
sht31.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000495c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000bc  08004aec  08004aec  00014aec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004ba8  08004ba8  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08004ba8  08004ba8  00014ba8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004bb0  08004bb0  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004bb0  08004bb0  00014bb0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004bb4  08004bb4  00014bb4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08004bb8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000100  20000070  08004c28  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000170  08004c28  00020170  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e1e5  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000200c  00000000  00000000  0002e285  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000be8  00000000  00000000  00030298  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000ac0  00000000  00000000  00030e80  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002604c  00000000  00000000  00031940  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000b024  00000000  00000000  0005798c  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000e9d38  00000000  00000000  000629b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0014c6e8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000032a0  00000000  00000000  0014c764  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08004ad4 	.word	0x08004ad4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	08004ad4 	.word	0x08004ad4

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b972 	b.w	800057c <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9e08      	ldr	r6, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	4688      	mov	r8, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d14b      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002be:	428a      	cmp	r2, r1
 80002c0:	4615      	mov	r5, r2
 80002c2:	d967      	bls.n	8000394 <__udivmoddi4+0xe4>
 80002c4:	fab2 f282 	clz	r2, r2
 80002c8:	b14a      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002ca:	f1c2 0720 	rsb	r7, r2, #32
 80002ce:	fa01 f302 	lsl.w	r3, r1, r2
 80002d2:	fa20 f707 	lsr.w	r7, r0, r7
 80002d6:	4095      	lsls	r5, r2
 80002d8:	ea47 0803 	orr.w	r8, r7, r3
 80002dc:	4094      	lsls	r4, r2
 80002de:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002e2:	0c23      	lsrs	r3, r4, #16
 80002e4:	fbb8 f7fe 	udiv	r7, r8, lr
 80002e8:	fa1f fc85 	uxth.w	ip, r5
 80002ec:	fb0e 8817 	mls	r8, lr, r7, r8
 80002f0:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002f4:	fb07 f10c 	mul.w	r1, r7, ip
 80002f8:	4299      	cmp	r1, r3
 80002fa:	d909      	bls.n	8000310 <__udivmoddi4+0x60>
 80002fc:	18eb      	adds	r3, r5, r3
 80002fe:	f107 30ff 	add.w	r0, r7, #4294967295
 8000302:	f080 811b 	bcs.w	800053c <__udivmoddi4+0x28c>
 8000306:	4299      	cmp	r1, r3
 8000308:	f240 8118 	bls.w	800053c <__udivmoddi4+0x28c>
 800030c:	3f02      	subs	r7, #2
 800030e:	442b      	add	r3, r5
 8000310:	1a5b      	subs	r3, r3, r1
 8000312:	b2a4      	uxth	r4, r4
 8000314:	fbb3 f0fe 	udiv	r0, r3, lr
 8000318:	fb0e 3310 	mls	r3, lr, r0, r3
 800031c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000320:	fb00 fc0c 	mul.w	ip, r0, ip
 8000324:	45a4      	cmp	ip, r4
 8000326:	d909      	bls.n	800033c <__udivmoddi4+0x8c>
 8000328:	192c      	adds	r4, r5, r4
 800032a:	f100 33ff 	add.w	r3, r0, #4294967295
 800032e:	f080 8107 	bcs.w	8000540 <__udivmoddi4+0x290>
 8000332:	45a4      	cmp	ip, r4
 8000334:	f240 8104 	bls.w	8000540 <__udivmoddi4+0x290>
 8000338:	3802      	subs	r0, #2
 800033a:	442c      	add	r4, r5
 800033c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000340:	eba4 040c 	sub.w	r4, r4, ip
 8000344:	2700      	movs	r7, #0
 8000346:	b11e      	cbz	r6, 8000350 <__udivmoddi4+0xa0>
 8000348:	40d4      	lsrs	r4, r2
 800034a:	2300      	movs	r3, #0
 800034c:	e9c6 4300 	strd	r4, r3, [r6]
 8000350:	4639      	mov	r1, r7
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d909      	bls.n	800036e <__udivmoddi4+0xbe>
 800035a:	2e00      	cmp	r6, #0
 800035c:	f000 80eb 	beq.w	8000536 <__udivmoddi4+0x286>
 8000360:	2700      	movs	r7, #0
 8000362:	e9c6 0100 	strd	r0, r1, [r6]
 8000366:	4638      	mov	r0, r7
 8000368:	4639      	mov	r1, r7
 800036a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036e:	fab3 f783 	clz	r7, r3
 8000372:	2f00      	cmp	r7, #0
 8000374:	d147      	bne.n	8000406 <__udivmoddi4+0x156>
 8000376:	428b      	cmp	r3, r1
 8000378:	d302      	bcc.n	8000380 <__udivmoddi4+0xd0>
 800037a:	4282      	cmp	r2, r0
 800037c:	f200 80fa 	bhi.w	8000574 <__udivmoddi4+0x2c4>
 8000380:	1a84      	subs	r4, r0, r2
 8000382:	eb61 0303 	sbc.w	r3, r1, r3
 8000386:	2001      	movs	r0, #1
 8000388:	4698      	mov	r8, r3
 800038a:	2e00      	cmp	r6, #0
 800038c:	d0e0      	beq.n	8000350 <__udivmoddi4+0xa0>
 800038e:	e9c6 4800 	strd	r4, r8, [r6]
 8000392:	e7dd      	b.n	8000350 <__udivmoddi4+0xa0>
 8000394:	b902      	cbnz	r2, 8000398 <__udivmoddi4+0xe8>
 8000396:	deff      	udf	#255	; 0xff
 8000398:	fab2 f282 	clz	r2, r2
 800039c:	2a00      	cmp	r2, #0
 800039e:	f040 808f 	bne.w	80004c0 <__udivmoddi4+0x210>
 80003a2:	1b49      	subs	r1, r1, r5
 80003a4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003a8:	fa1f f885 	uxth.w	r8, r5
 80003ac:	2701      	movs	r7, #1
 80003ae:	fbb1 fcfe 	udiv	ip, r1, lr
 80003b2:	0c23      	lsrs	r3, r4, #16
 80003b4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003b8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003bc:	fb08 f10c 	mul.w	r1, r8, ip
 80003c0:	4299      	cmp	r1, r3
 80003c2:	d907      	bls.n	80003d4 <__udivmoddi4+0x124>
 80003c4:	18eb      	adds	r3, r5, r3
 80003c6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003ca:	d202      	bcs.n	80003d2 <__udivmoddi4+0x122>
 80003cc:	4299      	cmp	r1, r3
 80003ce:	f200 80cd 	bhi.w	800056c <__udivmoddi4+0x2bc>
 80003d2:	4684      	mov	ip, r0
 80003d4:	1a59      	subs	r1, r3, r1
 80003d6:	b2a3      	uxth	r3, r4
 80003d8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003dc:	fb0e 1410 	mls	r4, lr, r0, r1
 80003e0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80003e4:	fb08 f800 	mul.w	r8, r8, r0
 80003e8:	45a0      	cmp	r8, r4
 80003ea:	d907      	bls.n	80003fc <__udivmoddi4+0x14c>
 80003ec:	192c      	adds	r4, r5, r4
 80003ee:	f100 33ff 	add.w	r3, r0, #4294967295
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x14a>
 80003f4:	45a0      	cmp	r8, r4
 80003f6:	f200 80b6 	bhi.w	8000566 <__udivmoddi4+0x2b6>
 80003fa:	4618      	mov	r0, r3
 80003fc:	eba4 0408 	sub.w	r4, r4, r8
 8000400:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000404:	e79f      	b.n	8000346 <__udivmoddi4+0x96>
 8000406:	f1c7 0c20 	rsb	ip, r7, #32
 800040a:	40bb      	lsls	r3, r7
 800040c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000410:	ea4e 0e03 	orr.w	lr, lr, r3
 8000414:	fa01 f407 	lsl.w	r4, r1, r7
 8000418:	fa20 f50c 	lsr.w	r5, r0, ip
 800041c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000420:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000424:	4325      	orrs	r5, r4
 8000426:	fbb3 f9f8 	udiv	r9, r3, r8
 800042a:	0c2c      	lsrs	r4, r5, #16
 800042c:	fb08 3319 	mls	r3, r8, r9, r3
 8000430:	fa1f fa8e 	uxth.w	sl, lr
 8000434:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000438:	fb09 f40a 	mul.w	r4, r9, sl
 800043c:	429c      	cmp	r4, r3
 800043e:	fa02 f207 	lsl.w	r2, r2, r7
 8000442:	fa00 f107 	lsl.w	r1, r0, r7
 8000446:	d90b      	bls.n	8000460 <__udivmoddi4+0x1b0>
 8000448:	eb1e 0303 	adds.w	r3, lr, r3
 800044c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000450:	f080 8087 	bcs.w	8000562 <__udivmoddi4+0x2b2>
 8000454:	429c      	cmp	r4, r3
 8000456:	f240 8084 	bls.w	8000562 <__udivmoddi4+0x2b2>
 800045a:	f1a9 0902 	sub.w	r9, r9, #2
 800045e:	4473      	add	r3, lr
 8000460:	1b1b      	subs	r3, r3, r4
 8000462:	b2ad      	uxth	r5, r5
 8000464:	fbb3 f0f8 	udiv	r0, r3, r8
 8000468:	fb08 3310 	mls	r3, r8, r0, r3
 800046c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000470:	fb00 fa0a 	mul.w	sl, r0, sl
 8000474:	45a2      	cmp	sl, r4
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x1da>
 8000478:	eb1e 0404 	adds.w	r4, lr, r4
 800047c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000480:	d26b      	bcs.n	800055a <__udivmoddi4+0x2aa>
 8000482:	45a2      	cmp	sl, r4
 8000484:	d969      	bls.n	800055a <__udivmoddi4+0x2aa>
 8000486:	3802      	subs	r0, #2
 8000488:	4474      	add	r4, lr
 800048a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800048e:	fba0 8902 	umull	r8, r9, r0, r2
 8000492:	eba4 040a 	sub.w	r4, r4, sl
 8000496:	454c      	cmp	r4, r9
 8000498:	46c2      	mov	sl, r8
 800049a:	464b      	mov	r3, r9
 800049c:	d354      	bcc.n	8000548 <__udivmoddi4+0x298>
 800049e:	d051      	beq.n	8000544 <__udivmoddi4+0x294>
 80004a0:	2e00      	cmp	r6, #0
 80004a2:	d069      	beq.n	8000578 <__udivmoddi4+0x2c8>
 80004a4:	ebb1 050a 	subs.w	r5, r1, sl
 80004a8:	eb64 0403 	sbc.w	r4, r4, r3
 80004ac:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004b0:	40fd      	lsrs	r5, r7
 80004b2:	40fc      	lsrs	r4, r7
 80004b4:	ea4c 0505 	orr.w	r5, ip, r5
 80004b8:	e9c6 5400 	strd	r5, r4, [r6]
 80004bc:	2700      	movs	r7, #0
 80004be:	e747      	b.n	8000350 <__udivmoddi4+0xa0>
 80004c0:	f1c2 0320 	rsb	r3, r2, #32
 80004c4:	fa20 f703 	lsr.w	r7, r0, r3
 80004c8:	4095      	lsls	r5, r2
 80004ca:	fa01 f002 	lsl.w	r0, r1, r2
 80004ce:	fa21 f303 	lsr.w	r3, r1, r3
 80004d2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004d6:	4338      	orrs	r0, r7
 80004d8:	0c01      	lsrs	r1, r0, #16
 80004da:	fbb3 f7fe 	udiv	r7, r3, lr
 80004de:	fa1f f885 	uxth.w	r8, r5
 80004e2:	fb0e 3317 	mls	r3, lr, r7, r3
 80004e6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004ea:	fb07 f308 	mul.w	r3, r7, r8
 80004ee:	428b      	cmp	r3, r1
 80004f0:	fa04 f402 	lsl.w	r4, r4, r2
 80004f4:	d907      	bls.n	8000506 <__udivmoddi4+0x256>
 80004f6:	1869      	adds	r1, r5, r1
 80004f8:	f107 3cff 	add.w	ip, r7, #4294967295
 80004fc:	d22f      	bcs.n	800055e <__udivmoddi4+0x2ae>
 80004fe:	428b      	cmp	r3, r1
 8000500:	d92d      	bls.n	800055e <__udivmoddi4+0x2ae>
 8000502:	3f02      	subs	r7, #2
 8000504:	4429      	add	r1, r5
 8000506:	1acb      	subs	r3, r1, r3
 8000508:	b281      	uxth	r1, r0
 800050a:	fbb3 f0fe 	udiv	r0, r3, lr
 800050e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000512:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000516:	fb00 f308 	mul.w	r3, r0, r8
 800051a:	428b      	cmp	r3, r1
 800051c:	d907      	bls.n	800052e <__udivmoddi4+0x27e>
 800051e:	1869      	adds	r1, r5, r1
 8000520:	f100 3cff 	add.w	ip, r0, #4294967295
 8000524:	d217      	bcs.n	8000556 <__udivmoddi4+0x2a6>
 8000526:	428b      	cmp	r3, r1
 8000528:	d915      	bls.n	8000556 <__udivmoddi4+0x2a6>
 800052a:	3802      	subs	r0, #2
 800052c:	4429      	add	r1, r5
 800052e:	1ac9      	subs	r1, r1, r3
 8000530:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000534:	e73b      	b.n	80003ae <__udivmoddi4+0xfe>
 8000536:	4637      	mov	r7, r6
 8000538:	4630      	mov	r0, r6
 800053a:	e709      	b.n	8000350 <__udivmoddi4+0xa0>
 800053c:	4607      	mov	r7, r0
 800053e:	e6e7      	b.n	8000310 <__udivmoddi4+0x60>
 8000540:	4618      	mov	r0, r3
 8000542:	e6fb      	b.n	800033c <__udivmoddi4+0x8c>
 8000544:	4541      	cmp	r1, r8
 8000546:	d2ab      	bcs.n	80004a0 <__udivmoddi4+0x1f0>
 8000548:	ebb8 0a02 	subs.w	sl, r8, r2
 800054c:	eb69 020e 	sbc.w	r2, r9, lr
 8000550:	3801      	subs	r0, #1
 8000552:	4613      	mov	r3, r2
 8000554:	e7a4      	b.n	80004a0 <__udivmoddi4+0x1f0>
 8000556:	4660      	mov	r0, ip
 8000558:	e7e9      	b.n	800052e <__udivmoddi4+0x27e>
 800055a:	4618      	mov	r0, r3
 800055c:	e795      	b.n	800048a <__udivmoddi4+0x1da>
 800055e:	4667      	mov	r7, ip
 8000560:	e7d1      	b.n	8000506 <__udivmoddi4+0x256>
 8000562:	4681      	mov	r9, r0
 8000564:	e77c      	b.n	8000460 <__udivmoddi4+0x1b0>
 8000566:	3802      	subs	r0, #2
 8000568:	442c      	add	r4, r5
 800056a:	e747      	b.n	80003fc <__udivmoddi4+0x14c>
 800056c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000570:	442b      	add	r3, r5
 8000572:	e72f      	b.n	80003d4 <__udivmoddi4+0x124>
 8000574:	4638      	mov	r0, r7
 8000576:	e708      	b.n	800038a <__udivmoddi4+0xda>
 8000578:	4637      	mov	r7, r6
 800057a:	e6e9      	b.n	8000350 <__udivmoddi4+0xa0>

0800057c <__aeabi_idiv0>:
 800057c:	4770      	bx	lr
 800057e:	bf00      	nop

08000580 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000580:	b580      	push	{r7, lr}
 8000582:	b082      	sub	sp, #8
 8000584:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000586:	2300      	movs	r3, #0
 8000588:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800058a:	4b0c      	ldr	r3, [pc, #48]	; (80005bc <HAL_Init+0x3c>)
 800058c:	681b      	ldr	r3, [r3, #0]
 800058e:	4a0b      	ldr	r2, [pc, #44]	; (80005bc <HAL_Init+0x3c>)
 8000590:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000594:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000596:	2003      	movs	r0, #3
 8000598:	f000 f93e 	bl	8000818 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800059c:	2000      	movs	r0, #0
 800059e:	f000 f80f 	bl	80005c0 <HAL_InitTick>
 80005a2:	4603      	mov	r3, r0
 80005a4:	2b00      	cmp	r3, #0
 80005a6:	d002      	beq.n	80005ae <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 80005a8:	2301      	movs	r3, #1
 80005aa:	71fb      	strb	r3, [r7, #7]
 80005ac:	e001      	b.n	80005b2 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80005ae:	f003 fd09 	bl	8003fc4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80005b2:	79fb      	ldrb	r3, [r7, #7]
}
 80005b4:	4618      	mov	r0, r3
 80005b6:	3708      	adds	r7, #8
 80005b8:	46bd      	mov	sp, r7
 80005ba:	bd80      	pop	{r7, pc}
 80005bc:	40022000 	.word	0x40022000

080005c0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80005c0:	b580      	push	{r7, lr}
 80005c2:	b084      	sub	sp, #16
 80005c4:	af00      	add	r7, sp, #0
 80005c6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80005c8:	2300      	movs	r3, #0
 80005ca:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 80005cc:	4b16      	ldr	r3, [pc, #88]	; (8000628 <HAL_InitTick+0x68>)
 80005ce:	681b      	ldr	r3, [r3, #0]
 80005d0:	2b00      	cmp	r3, #0
 80005d2:	d022      	beq.n	800061a <HAL_InitTick+0x5a>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80005d4:	4b15      	ldr	r3, [pc, #84]	; (800062c <HAL_InitTick+0x6c>)
 80005d6:	681a      	ldr	r2, [r3, #0]
 80005d8:	4b13      	ldr	r3, [pc, #76]	; (8000628 <HAL_InitTick+0x68>)
 80005da:	681b      	ldr	r3, [r3, #0]
 80005dc:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80005e0:	fbb1 f3f3 	udiv	r3, r1, r3
 80005e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80005e8:	4618      	mov	r0, r3
 80005ea:	f000 f93c 	bl	8000866 <HAL_SYSTICK_Config>
 80005ee:	4603      	mov	r3, r0
 80005f0:	2b00      	cmp	r3, #0
 80005f2:	d10f      	bne.n	8000614 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80005f4:	687b      	ldr	r3, [r7, #4]
 80005f6:	2b0f      	cmp	r3, #15
 80005f8:	d809      	bhi.n	800060e <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80005fa:	2200      	movs	r2, #0
 80005fc:	6879      	ldr	r1, [r7, #4]
 80005fe:	f04f 30ff 	mov.w	r0, #4294967295
 8000602:	f000 f914 	bl	800082e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000606:	4a0a      	ldr	r2, [pc, #40]	; (8000630 <HAL_InitTick+0x70>)
 8000608:	687b      	ldr	r3, [r7, #4]
 800060a:	6013      	str	r3, [r2, #0]
 800060c:	e007      	b.n	800061e <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 800060e:	2301      	movs	r3, #1
 8000610:	73fb      	strb	r3, [r7, #15]
 8000612:	e004      	b.n	800061e <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000614:	2301      	movs	r3, #1
 8000616:	73fb      	strb	r3, [r7, #15]
 8000618:	e001      	b.n	800061e <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 800061a:	2301      	movs	r3, #1
 800061c:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800061e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000620:	4618      	mov	r0, r3
 8000622:	3710      	adds	r7, #16
 8000624:	46bd      	mov	sp, r7
 8000626:	bd80      	pop	{r7, pc}
 8000628:	20000004 	.word	0x20000004
 800062c:	20000008 	.word	0x20000008
 8000630:	20000000 	.word	0x20000000

08000634 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000634:	b480      	push	{r7}
 8000636:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000638:	4b05      	ldr	r3, [pc, #20]	; (8000650 <HAL_IncTick+0x1c>)
 800063a:	681a      	ldr	r2, [r3, #0]
 800063c:	4b05      	ldr	r3, [pc, #20]	; (8000654 <HAL_IncTick+0x20>)
 800063e:	681b      	ldr	r3, [r3, #0]
 8000640:	4413      	add	r3, r2
 8000642:	4a03      	ldr	r2, [pc, #12]	; (8000650 <HAL_IncTick+0x1c>)
 8000644:	6013      	str	r3, [r2, #0]
}
 8000646:	bf00      	nop
 8000648:	46bd      	mov	sp, r7
 800064a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800064e:	4770      	bx	lr
 8000650:	2000009c 	.word	0x2000009c
 8000654:	20000004 	.word	0x20000004

08000658 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000658:	b480      	push	{r7}
 800065a:	af00      	add	r7, sp, #0
  return uwTick;
 800065c:	4b03      	ldr	r3, [pc, #12]	; (800066c <HAL_GetTick+0x14>)
 800065e:	681b      	ldr	r3, [r3, #0]
}
 8000660:	4618      	mov	r0, r3
 8000662:	46bd      	mov	sp, r7
 8000664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000668:	4770      	bx	lr
 800066a:	bf00      	nop
 800066c:	2000009c 	.word	0x2000009c

08000670 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000670:	b580      	push	{r7, lr}
 8000672:	b084      	sub	sp, #16
 8000674:	af00      	add	r7, sp, #0
 8000676:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000678:	f7ff ffee 	bl	8000658 <HAL_GetTick>
 800067c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800067e:	687b      	ldr	r3, [r7, #4]
 8000680:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000682:	68fb      	ldr	r3, [r7, #12]
 8000684:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000688:	d004      	beq.n	8000694 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 800068a:	4b09      	ldr	r3, [pc, #36]	; (80006b0 <HAL_Delay+0x40>)
 800068c:	681b      	ldr	r3, [r3, #0]
 800068e:	68fa      	ldr	r2, [r7, #12]
 8000690:	4413      	add	r3, r2
 8000692:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000694:	bf00      	nop
 8000696:	f7ff ffdf 	bl	8000658 <HAL_GetTick>
 800069a:	4602      	mov	r2, r0
 800069c:	68bb      	ldr	r3, [r7, #8]
 800069e:	1ad3      	subs	r3, r2, r3
 80006a0:	68fa      	ldr	r2, [r7, #12]
 80006a2:	429a      	cmp	r2, r3
 80006a4:	d8f7      	bhi.n	8000696 <HAL_Delay+0x26>
  {
  }
}
 80006a6:	bf00      	nop
 80006a8:	3710      	adds	r7, #16
 80006aa:	46bd      	mov	sp, r7
 80006ac:	bd80      	pop	{r7, pc}
 80006ae:	bf00      	nop
 80006b0:	20000004 	.word	0x20000004

080006b4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80006b4:	b480      	push	{r7}
 80006b6:	b085      	sub	sp, #20
 80006b8:	af00      	add	r7, sp, #0
 80006ba:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80006bc:	687b      	ldr	r3, [r7, #4]
 80006be:	f003 0307 	and.w	r3, r3, #7
 80006c2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80006c4:	4b0c      	ldr	r3, [pc, #48]	; (80006f8 <__NVIC_SetPriorityGrouping+0x44>)
 80006c6:	68db      	ldr	r3, [r3, #12]
 80006c8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80006ca:	68ba      	ldr	r2, [r7, #8]
 80006cc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80006d0:	4013      	ands	r3, r2
 80006d2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80006d4:	68fb      	ldr	r3, [r7, #12]
 80006d6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80006d8:	68bb      	ldr	r3, [r7, #8]
 80006da:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80006dc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80006e0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80006e4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80006e6:	4a04      	ldr	r2, [pc, #16]	; (80006f8 <__NVIC_SetPriorityGrouping+0x44>)
 80006e8:	68bb      	ldr	r3, [r7, #8]
 80006ea:	60d3      	str	r3, [r2, #12]
}
 80006ec:	bf00      	nop
 80006ee:	3714      	adds	r7, #20
 80006f0:	46bd      	mov	sp, r7
 80006f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006f6:	4770      	bx	lr
 80006f8:	e000ed00 	.word	0xe000ed00

080006fc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80006fc:	b480      	push	{r7}
 80006fe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000700:	4b04      	ldr	r3, [pc, #16]	; (8000714 <__NVIC_GetPriorityGrouping+0x18>)
 8000702:	68db      	ldr	r3, [r3, #12]
 8000704:	0a1b      	lsrs	r3, r3, #8
 8000706:	f003 0307 	and.w	r3, r3, #7
}
 800070a:	4618      	mov	r0, r3
 800070c:	46bd      	mov	sp, r7
 800070e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000712:	4770      	bx	lr
 8000714:	e000ed00 	.word	0xe000ed00

08000718 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000718:	b480      	push	{r7}
 800071a:	b083      	sub	sp, #12
 800071c:	af00      	add	r7, sp, #0
 800071e:	4603      	mov	r3, r0
 8000720:	6039      	str	r1, [r7, #0]
 8000722:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000724:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000728:	2b00      	cmp	r3, #0
 800072a:	db0a      	blt.n	8000742 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800072c:	683b      	ldr	r3, [r7, #0]
 800072e:	b2da      	uxtb	r2, r3
 8000730:	490c      	ldr	r1, [pc, #48]	; (8000764 <__NVIC_SetPriority+0x4c>)
 8000732:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000736:	0112      	lsls	r2, r2, #4
 8000738:	b2d2      	uxtb	r2, r2
 800073a:	440b      	add	r3, r1
 800073c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000740:	e00a      	b.n	8000758 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000742:	683b      	ldr	r3, [r7, #0]
 8000744:	b2da      	uxtb	r2, r3
 8000746:	4908      	ldr	r1, [pc, #32]	; (8000768 <__NVIC_SetPriority+0x50>)
 8000748:	79fb      	ldrb	r3, [r7, #7]
 800074a:	f003 030f 	and.w	r3, r3, #15
 800074e:	3b04      	subs	r3, #4
 8000750:	0112      	lsls	r2, r2, #4
 8000752:	b2d2      	uxtb	r2, r2
 8000754:	440b      	add	r3, r1
 8000756:	761a      	strb	r2, [r3, #24]
}
 8000758:	bf00      	nop
 800075a:	370c      	adds	r7, #12
 800075c:	46bd      	mov	sp, r7
 800075e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000762:	4770      	bx	lr
 8000764:	e000e100 	.word	0xe000e100
 8000768:	e000ed00 	.word	0xe000ed00

0800076c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800076c:	b480      	push	{r7}
 800076e:	b089      	sub	sp, #36	; 0x24
 8000770:	af00      	add	r7, sp, #0
 8000772:	60f8      	str	r0, [r7, #12]
 8000774:	60b9      	str	r1, [r7, #8]
 8000776:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000778:	68fb      	ldr	r3, [r7, #12]
 800077a:	f003 0307 	and.w	r3, r3, #7
 800077e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000780:	69fb      	ldr	r3, [r7, #28]
 8000782:	f1c3 0307 	rsb	r3, r3, #7
 8000786:	2b04      	cmp	r3, #4
 8000788:	bf28      	it	cs
 800078a:	2304      	movcs	r3, #4
 800078c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800078e:	69fb      	ldr	r3, [r7, #28]
 8000790:	3304      	adds	r3, #4
 8000792:	2b06      	cmp	r3, #6
 8000794:	d902      	bls.n	800079c <NVIC_EncodePriority+0x30>
 8000796:	69fb      	ldr	r3, [r7, #28]
 8000798:	3b03      	subs	r3, #3
 800079a:	e000      	b.n	800079e <NVIC_EncodePriority+0x32>
 800079c:	2300      	movs	r3, #0
 800079e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80007a0:	f04f 32ff 	mov.w	r2, #4294967295
 80007a4:	69bb      	ldr	r3, [r7, #24]
 80007a6:	fa02 f303 	lsl.w	r3, r2, r3
 80007aa:	43da      	mvns	r2, r3
 80007ac:	68bb      	ldr	r3, [r7, #8]
 80007ae:	401a      	ands	r2, r3
 80007b0:	697b      	ldr	r3, [r7, #20]
 80007b2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80007b4:	f04f 31ff 	mov.w	r1, #4294967295
 80007b8:	697b      	ldr	r3, [r7, #20]
 80007ba:	fa01 f303 	lsl.w	r3, r1, r3
 80007be:	43d9      	mvns	r1, r3
 80007c0:	687b      	ldr	r3, [r7, #4]
 80007c2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80007c4:	4313      	orrs	r3, r2
         );
}
 80007c6:	4618      	mov	r0, r3
 80007c8:	3724      	adds	r7, #36	; 0x24
 80007ca:	46bd      	mov	sp, r7
 80007cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007d0:	4770      	bx	lr
	...

080007d4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80007d4:	b580      	push	{r7, lr}
 80007d6:	b082      	sub	sp, #8
 80007d8:	af00      	add	r7, sp, #0
 80007da:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80007dc:	687b      	ldr	r3, [r7, #4]
 80007de:	3b01      	subs	r3, #1
 80007e0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80007e4:	d301      	bcc.n	80007ea <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80007e6:	2301      	movs	r3, #1
 80007e8:	e00f      	b.n	800080a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80007ea:	4a0a      	ldr	r2, [pc, #40]	; (8000814 <SysTick_Config+0x40>)
 80007ec:	687b      	ldr	r3, [r7, #4]
 80007ee:	3b01      	subs	r3, #1
 80007f0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80007f2:	210f      	movs	r1, #15
 80007f4:	f04f 30ff 	mov.w	r0, #4294967295
 80007f8:	f7ff ff8e 	bl	8000718 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80007fc:	4b05      	ldr	r3, [pc, #20]	; (8000814 <SysTick_Config+0x40>)
 80007fe:	2200      	movs	r2, #0
 8000800:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000802:	4b04      	ldr	r3, [pc, #16]	; (8000814 <SysTick_Config+0x40>)
 8000804:	2207      	movs	r2, #7
 8000806:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000808:	2300      	movs	r3, #0
}
 800080a:	4618      	mov	r0, r3
 800080c:	3708      	adds	r7, #8
 800080e:	46bd      	mov	sp, r7
 8000810:	bd80      	pop	{r7, pc}
 8000812:	bf00      	nop
 8000814:	e000e010 	.word	0xe000e010

08000818 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000818:	b580      	push	{r7, lr}
 800081a:	b082      	sub	sp, #8
 800081c:	af00      	add	r7, sp, #0
 800081e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000820:	6878      	ldr	r0, [r7, #4]
 8000822:	f7ff ff47 	bl	80006b4 <__NVIC_SetPriorityGrouping>
}
 8000826:	bf00      	nop
 8000828:	3708      	adds	r7, #8
 800082a:	46bd      	mov	sp, r7
 800082c:	bd80      	pop	{r7, pc}

0800082e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800082e:	b580      	push	{r7, lr}
 8000830:	b086      	sub	sp, #24
 8000832:	af00      	add	r7, sp, #0
 8000834:	4603      	mov	r3, r0
 8000836:	60b9      	str	r1, [r7, #8]
 8000838:	607a      	str	r2, [r7, #4]
 800083a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800083c:	2300      	movs	r3, #0
 800083e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000840:	f7ff ff5c 	bl	80006fc <__NVIC_GetPriorityGrouping>
 8000844:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000846:	687a      	ldr	r2, [r7, #4]
 8000848:	68b9      	ldr	r1, [r7, #8]
 800084a:	6978      	ldr	r0, [r7, #20]
 800084c:	f7ff ff8e 	bl	800076c <NVIC_EncodePriority>
 8000850:	4602      	mov	r2, r0
 8000852:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000856:	4611      	mov	r1, r2
 8000858:	4618      	mov	r0, r3
 800085a:	f7ff ff5d 	bl	8000718 <__NVIC_SetPriority>
}
 800085e:	bf00      	nop
 8000860:	3718      	adds	r7, #24
 8000862:	46bd      	mov	sp, r7
 8000864:	bd80      	pop	{r7, pc}

08000866 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000866:	b580      	push	{r7, lr}
 8000868:	b082      	sub	sp, #8
 800086a:	af00      	add	r7, sp, #0
 800086c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800086e:	6878      	ldr	r0, [r7, #4]
 8000870:	f7ff ffb0 	bl	80007d4 <SysTick_Config>
 8000874:	4603      	mov	r3, r0
}
 8000876:	4618      	mov	r0, r3
 8000878:	3708      	adds	r7, #8
 800087a:	46bd      	mov	sp, r7
 800087c:	bd80      	pop	{r7, pc}
	...

08000880 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000880:	b480      	push	{r7}
 8000882:	b087      	sub	sp, #28
 8000884:	af00      	add	r7, sp, #0
 8000886:	6078      	str	r0, [r7, #4]
 8000888:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800088a:	2300      	movs	r3, #0
 800088c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800088e:	e17f      	b.n	8000b90 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000890:	683b      	ldr	r3, [r7, #0]
 8000892:	681a      	ldr	r2, [r3, #0]
 8000894:	2101      	movs	r1, #1
 8000896:	697b      	ldr	r3, [r7, #20]
 8000898:	fa01 f303 	lsl.w	r3, r1, r3
 800089c:	4013      	ands	r3, r2
 800089e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80008a0:	68fb      	ldr	r3, [r7, #12]
 80008a2:	2b00      	cmp	r3, #0
 80008a4:	f000 8171 	beq.w	8000b8a <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80008a8:	683b      	ldr	r3, [r7, #0]
 80008aa:	685b      	ldr	r3, [r3, #4]
 80008ac:	2b02      	cmp	r3, #2
 80008ae:	d003      	beq.n	80008b8 <HAL_GPIO_Init+0x38>
 80008b0:	683b      	ldr	r3, [r7, #0]
 80008b2:	685b      	ldr	r3, [r3, #4]
 80008b4:	2b12      	cmp	r3, #18
 80008b6:	d123      	bne.n	8000900 <HAL_GPIO_Init+0x80>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80008b8:	697b      	ldr	r3, [r7, #20]
 80008ba:	08da      	lsrs	r2, r3, #3
 80008bc:	687b      	ldr	r3, [r7, #4]
 80008be:	3208      	adds	r2, #8
 80008c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80008c4:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80008c6:	697b      	ldr	r3, [r7, #20]
 80008c8:	f003 0307 	and.w	r3, r3, #7
 80008cc:	009b      	lsls	r3, r3, #2
 80008ce:	220f      	movs	r2, #15
 80008d0:	fa02 f303 	lsl.w	r3, r2, r3
 80008d4:	43db      	mvns	r3, r3
 80008d6:	693a      	ldr	r2, [r7, #16]
 80008d8:	4013      	ands	r3, r2
 80008da:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80008dc:	683b      	ldr	r3, [r7, #0]
 80008de:	691a      	ldr	r2, [r3, #16]
 80008e0:	697b      	ldr	r3, [r7, #20]
 80008e2:	f003 0307 	and.w	r3, r3, #7
 80008e6:	009b      	lsls	r3, r3, #2
 80008e8:	fa02 f303 	lsl.w	r3, r2, r3
 80008ec:	693a      	ldr	r2, [r7, #16]
 80008ee:	4313      	orrs	r3, r2
 80008f0:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80008f2:	697b      	ldr	r3, [r7, #20]
 80008f4:	08da      	lsrs	r2, r3, #3
 80008f6:	687b      	ldr	r3, [r7, #4]
 80008f8:	3208      	adds	r2, #8
 80008fa:	6939      	ldr	r1, [r7, #16]
 80008fc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000900:	687b      	ldr	r3, [r7, #4]
 8000902:	681b      	ldr	r3, [r3, #0]
 8000904:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000906:	697b      	ldr	r3, [r7, #20]
 8000908:	005b      	lsls	r3, r3, #1
 800090a:	2203      	movs	r2, #3
 800090c:	fa02 f303 	lsl.w	r3, r2, r3
 8000910:	43db      	mvns	r3, r3
 8000912:	693a      	ldr	r2, [r7, #16]
 8000914:	4013      	ands	r3, r2
 8000916:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000918:	683b      	ldr	r3, [r7, #0]
 800091a:	685b      	ldr	r3, [r3, #4]
 800091c:	f003 0203 	and.w	r2, r3, #3
 8000920:	697b      	ldr	r3, [r7, #20]
 8000922:	005b      	lsls	r3, r3, #1
 8000924:	fa02 f303 	lsl.w	r3, r2, r3
 8000928:	693a      	ldr	r2, [r7, #16]
 800092a:	4313      	orrs	r3, r2
 800092c:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800092e:	687b      	ldr	r3, [r7, #4]
 8000930:	693a      	ldr	r2, [r7, #16]
 8000932:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000934:	683b      	ldr	r3, [r7, #0]
 8000936:	685b      	ldr	r3, [r3, #4]
 8000938:	2b01      	cmp	r3, #1
 800093a:	d00b      	beq.n	8000954 <HAL_GPIO_Init+0xd4>
 800093c:	683b      	ldr	r3, [r7, #0]
 800093e:	685b      	ldr	r3, [r3, #4]
 8000940:	2b02      	cmp	r3, #2
 8000942:	d007      	beq.n	8000954 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000944:	683b      	ldr	r3, [r7, #0]
 8000946:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000948:	2b11      	cmp	r3, #17
 800094a:	d003      	beq.n	8000954 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800094c:	683b      	ldr	r3, [r7, #0]
 800094e:	685b      	ldr	r3, [r3, #4]
 8000950:	2b12      	cmp	r3, #18
 8000952:	d130      	bne.n	80009b6 <HAL_GPIO_Init+0x136>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	689b      	ldr	r3, [r3, #8]
 8000958:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800095a:	697b      	ldr	r3, [r7, #20]
 800095c:	005b      	lsls	r3, r3, #1
 800095e:	2203      	movs	r2, #3
 8000960:	fa02 f303 	lsl.w	r3, r2, r3
 8000964:	43db      	mvns	r3, r3
 8000966:	693a      	ldr	r2, [r7, #16]
 8000968:	4013      	ands	r3, r2
 800096a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800096c:	683b      	ldr	r3, [r7, #0]
 800096e:	68da      	ldr	r2, [r3, #12]
 8000970:	697b      	ldr	r3, [r7, #20]
 8000972:	005b      	lsls	r3, r3, #1
 8000974:	fa02 f303 	lsl.w	r3, r2, r3
 8000978:	693a      	ldr	r2, [r7, #16]
 800097a:	4313      	orrs	r3, r2
 800097c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800097e:	687b      	ldr	r3, [r7, #4]
 8000980:	693a      	ldr	r2, [r7, #16]
 8000982:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000984:	687b      	ldr	r3, [r7, #4]
 8000986:	685b      	ldr	r3, [r3, #4]
 8000988:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800098a:	2201      	movs	r2, #1
 800098c:	697b      	ldr	r3, [r7, #20]
 800098e:	fa02 f303 	lsl.w	r3, r2, r3
 8000992:	43db      	mvns	r3, r3
 8000994:	693a      	ldr	r2, [r7, #16]
 8000996:	4013      	ands	r3, r2
 8000998:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 800099a:	683b      	ldr	r3, [r7, #0]
 800099c:	685b      	ldr	r3, [r3, #4]
 800099e:	091b      	lsrs	r3, r3, #4
 80009a0:	f003 0201 	and.w	r2, r3, #1
 80009a4:	697b      	ldr	r3, [r7, #20]
 80009a6:	fa02 f303 	lsl.w	r3, r2, r3
 80009aa:	693a      	ldr	r2, [r7, #16]
 80009ac:	4313      	orrs	r3, r2
 80009ae:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80009b0:	687b      	ldr	r3, [r7, #4]
 80009b2:	693a      	ldr	r2, [r7, #16]
 80009b4:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80009b6:	683b      	ldr	r3, [r7, #0]
 80009b8:	685b      	ldr	r3, [r3, #4]
 80009ba:	f003 0303 	and.w	r3, r3, #3
 80009be:	2b03      	cmp	r3, #3
 80009c0:	d118      	bne.n	80009f4 <HAL_GPIO_Init+0x174>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80009c2:	687b      	ldr	r3, [r7, #4]
 80009c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80009c6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80009c8:	2201      	movs	r2, #1
 80009ca:	697b      	ldr	r3, [r7, #20]
 80009cc:	fa02 f303 	lsl.w	r3, r2, r3
 80009d0:	43db      	mvns	r3, r3
 80009d2:	693a      	ldr	r2, [r7, #16]
 80009d4:	4013      	ands	r3, r2
 80009d6:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 80009d8:	683b      	ldr	r3, [r7, #0]
 80009da:	685b      	ldr	r3, [r3, #4]
 80009dc:	08db      	lsrs	r3, r3, #3
 80009de:	f003 0201 	and.w	r2, r3, #1
 80009e2:	697b      	ldr	r3, [r7, #20]
 80009e4:	fa02 f303 	lsl.w	r3, r2, r3
 80009e8:	693a      	ldr	r2, [r7, #16]
 80009ea:	4313      	orrs	r3, r2
 80009ec:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 80009ee:	687b      	ldr	r3, [r7, #4]
 80009f0:	693a      	ldr	r2, [r7, #16]
 80009f2:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80009f4:	687b      	ldr	r3, [r7, #4]
 80009f6:	68db      	ldr	r3, [r3, #12]
 80009f8:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80009fa:	697b      	ldr	r3, [r7, #20]
 80009fc:	005b      	lsls	r3, r3, #1
 80009fe:	2203      	movs	r2, #3
 8000a00:	fa02 f303 	lsl.w	r3, r2, r3
 8000a04:	43db      	mvns	r3, r3
 8000a06:	693a      	ldr	r2, [r7, #16]
 8000a08:	4013      	ands	r3, r2
 8000a0a:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000a0c:	683b      	ldr	r3, [r7, #0]
 8000a0e:	689a      	ldr	r2, [r3, #8]
 8000a10:	697b      	ldr	r3, [r7, #20]
 8000a12:	005b      	lsls	r3, r3, #1
 8000a14:	fa02 f303 	lsl.w	r3, r2, r3
 8000a18:	693a      	ldr	r2, [r7, #16]
 8000a1a:	4313      	orrs	r3, r2
 8000a1c:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8000a1e:	687b      	ldr	r3, [r7, #4]
 8000a20:	693a      	ldr	r2, [r7, #16]
 8000a22:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000a24:	683b      	ldr	r3, [r7, #0]
 8000a26:	685b      	ldr	r3, [r3, #4]
 8000a28:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a2c:	2b00      	cmp	r3, #0
 8000a2e:	f000 80ac 	beq.w	8000b8a <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a32:	4b5e      	ldr	r3, [pc, #376]	; (8000bac <HAL_GPIO_Init+0x32c>)
 8000a34:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000a36:	4a5d      	ldr	r2, [pc, #372]	; (8000bac <HAL_GPIO_Init+0x32c>)
 8000a38:	f043 0301 	orr.w	r3, r3, #1
 8000a3c:	6613      	str	r3, [r2, #96]	; 0x60
 8000a3e:	4b5b      	ldr	r3, [pc, #364]	; (8000bac <HAL_GPIO_Init+0x32c>)
 8000a40:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000a42:	f003 0301 	and.w	r3, r3, #1
 8000a46:	60bb      	str	r3, [r7, #8]
 8000a48:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000a4a:	4a59      	ldr	r2, [pc, #356]	; (8000bb0 <HAL_GPIO_Init+0x330>)
 8000a4c:	697b      	ldr	r3, [r7, #20]
 8000a4e:	089b      	lsrs	r3, r3, #2
 8000a50:	3302      	adds	r3, #2
 8000a52:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a56:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000a58:	697b      	ldr	r3, [r7, #20]
 8000a5a:	f003 0303 	and.w	r3, r3, #3
 8000a5e:	009b      	lsls	r3, r3, #2
 8000a60:	220f      	movs	r2, #15
 8000a62:	fa02 f303 	lsl.w	r3, r2, r3
 8000a66:	43db      	mvns	r3, r3
 8000a68:	693a      	ldr	r2, [r7, #16]
 8000a6a:	4013      	ands	r3, r2
 8000a6c:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000a6e:	687b      	ldr	r3, [r7, #4]
 8000a70:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000a74:	d025      	beq.n	8000ac2 <HAL_GPIO_Init+0x242>
 8000a76:	687b      	ldr	r3, [r7, #4]
 8000a78:	4a4e      	ldr	r2, [pc, #312]	; (8000bb4 <HAL_GPIO_Init+0x334>)
 8000a7a:	4293      	cmp	r3, r2
 8000a7c:	d01f      	beq.n	8000abe <HAL_GPIO_Init+0x23e>
 8000a7e:	687b      	ldr	r3, [r7, #4]
 8000a80:	4a4d      	ldr	r2, [pc, #308]	; (8000bb8 <HAL_GPIO_Init+0x338>)
 8000a82:	4293      	cmp	r3, r2
 8000a84:	d019      	beq.n	8000aba <HAL_GPIO_Init+0x23a>
 8000a86:	687b      	ldr	r3, [r7, #4]
 8000a88:	4a4c      	ldr	r2, [pc, #304]	; (8000bbc <HAL_GPIO_Init+0x33c>)
 8000a8a:	4293      	cmp	r3, r2
 8000a8c:	d013      	beq.n	8000ab6 <HAL_GPIO_Init+0x236>
 8000a8e:	687b      	ldr	r3, [r7, #4]
 8000a90:	4a4b      	ldr	r2, [pc, #300]	; (8000bc0 <HAL_GPIO_Init+0x340>)
 8000a92:	4293      	cmp	r3, r2
 8000a94:	d00d      	beq.n	8000ab2 <HAL_GPIO_Init+0x232>
 8000a96:	687b      	ldr	r3, [r7, #4]
 8000a98:	4a4a      	ldr	r2, [pc, #296]	; (8000bc4 <HAL_GPIO_Init+0x344>)
 8000a9a:	4293      	cmp	r3, r2
 8000a9c:	d007      	beq.n	8000aae <HAL_GPIO_Init+0x22e>
 8000a9e:	687b      	ldr	r3, [r7, #4]
 8000aa0:	4a49      	ldr	r2, [pc, #292]	; (8000bc8 <HAL_GPIO_Init+0x348>)
 8000aa2:	4293      	cmp	r3, r2
 8000aa4:	d101      	bne.n	8000aaa <HAL_GPIO_Init+0x22a>
 8000aa6:	2306      	movs	r3, #6
 8000aa8:	e00c      	b.n	8000ac4 <HAL_GPIO_Init+0x244>
 8000aaa:	2307      	movs	r3, #7
 8000aac:	e00a      	b.n	8000ac4 <HAL_GPIO_Init+0x244>
 8000aae:	2305      	movs	r3, #5
 8000ab0:	e008      	b.n	8000ac4 <HAL_GPIO_Init+0x244>
 8000ab2:	2304      	movs	r3, #4
 8000ab4:	e006      	b.n	8000ac4 <HAL_GPIO_Init+0x244>
 8000ab6:	2303      	movs	r3, #3
 8000ab8:	e004      	b.n	8000ac4 <HAL_GPIO_Init+0x244>
 8000aba:	2302      	movs	r3, #2
 8000abc:	e002      	b.n	8000ac4 <HAL_GPIO_Init+0x244>
 8000abe:	2301      	movs	r3, #1
 8000ac0:	e000      	b.n	8000ac4 <HAL_GPIO_Init+0x244>
 8000ac2:	2300      	movs	r3, #0
 8000ac4:	697a      	ldr	r2, [r7, #20]
 8000ac6:	f002 0203 	and.w	r2, r2, #3
 8000aca:	0092      	lsls	r2, r2, #2
 8000acc:	4093      	lsls	r3, r2
 8000ace:	693a      	ldr	r2, [r7, #16]
 8000ad0:	4313      	orrs	r3, r2
 8000ad2:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000ad4:	4936      	ldr	r1, [pc, #216]	; (8000bb0 <HAL_GPIO_Init+0x330>)
 8000ad6:	697b      	ldr	r3, [r7, #20]
 8000ad8:	089b      	lsrs	r3, r3, #2
 8000ada:	3302      	adds	r3, #2
 8000adc:	693a      	ldr	r2, [r7, #16]
 8000ade:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8000ae2:	4b3a      	ldr	r3, [pc, #232]	; (8000bcc <HAL_GPIO_Init+0x34c>)
 8000ae4:	681b      	ldr	r3, [r3, #0]
 8000ae6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000ae8:	68fb      	ldr	r3, [r7, #12]
 8000aea:	43db      	mvns	r3, r3
 8000aec:	693a      	ldr	r2, [r7, #16]
 8000aee:	4013      	ands	r3, r2
 8000af0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000af2:	683b      	ldr	r3, [r7, #0]
 8000af4:	685b      	ldr	r3, [r3, #4]
 8000af6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000afa:	2b00      	cmp	r3, #0
 8000afc:	d003      	beq.n	8000b06 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8000afe:	693a      	ldr	r2, [r7, #16]
 8000b00:	68fb      	ldr	r3, [r7, #12]
 8000b02:	4313      	orrs	r3, r2
 8000b04:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000b06:	4a31      	ldr	r2, [pc, #196]	; (8000bcc <HAL_GPIO_Init+0x34c>)
 8000b08:	693b      	ldr	r3, [r7, #16]
 8000b0a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8000b0c:	4b2f      	ldr	r3, [pc, #188]	; (8000bcc <HAL_GPIO_Init+0x34c>)
 8000b0e:	685b      	ldr	r3, [r3, #4]
 8000b10:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000b12:	68fb      	ldr	r3, [r7, #12]
 8000b14:	43db      	mvns	r3, r3
 8000b16:	693a      	ldr	r2, [r7, #16]
 8000b18:	4013      	ands	r3, r2
 8000b1a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000b1c:	683b      	ldr	r3, [r7, #0]
 8000b1e:	685b      	ldr	r3, [r3, #4]
 8000b20:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b24:	2b00      	cmp	r3, #0
 8000b26:	d003      	beq.n	8000b30 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8000b28:	693a      	ldr	r2, [r7, #16]
 8000b2a:	68fb      	ldr	r3, [r7, #12]
 8000b2c:	4313      	orrs	r3, r2
 8000b2e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000b30:	4a26      	ldr	r2, [pc, #152]	; (8000bcc <HAL_GPIO_Init+0x34c>)
 8000b32:	693b      	ldr	r3, [r7, #16]
 8000b34:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000b36:	4b25      	ldr	r3, [pc, #148]	; (8000bcc <HAL_GPIO_Init+0x34c>)
 8000b38:	689b      	ldr	r3, [r3, #8]
 8000b3a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000b3c:	68fb      	ldr	r3, [r7, #12]
 8000b3e:	43db      	mvns	r3, r3
 8000b40:	693a      	ldr	r2, [r7, #16]
 8000b42:	4013      	ands	r3, r2
 8000b44:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000b46:	683b      	ldr	r3, [r7, #0]
 8000b48:	685b      	ldr	r3, [r3, #4]
 8000b4a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000b4e:	2b00      	cmp	r3, #0
 8000b50:	d003      	beq.n	8000b5a <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8000b52:	693a      	ldr	r2, [r7, #16]
 8000b54:	68fb      	ldr	r3, [r7, #12]
 8000b56:	4313      	orrs	r3, r2
 8000b58:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000b5a:	4a1c      	ldr	r2, [pc, #112]	; (8000bcc <HAL_GPIO_Init+0x34c>)
 8000b5c:	693b      	ldr	r3, [r7, #16]
 8000b5e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8000b60:	4b1a      	ldr	r3, [pc, #104]	; (8000bcc <HAL_GPIO_Init+0x34c>)
 8000b62:	68db      	ldr	r3, [r3, #12]
 8000b64:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000b66:	68fb      	ldr	r3, [r7, #12]
 8000b68:	43db      	mvns	r3, r3
 8000b6a:	693a      	ldr	r2, [r7, #16]
 8000b6c:	4013      	ands	r3, r2
 8000b6e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000b70:	683b      	ldr	r3, [r7, #0]
 8000b72:	685b      	ldr	r3, [r3, #4]
 8000b74:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000b78:	2b00      	cmp	r3, #0
 8000b7a:	d003      	beq.n	8000b84 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8000b7c:	693a      	ldr	r2, [r7, #16]
 8000b7e:	68fb      	ldr	r3, [r7, #12]
 8000b80:	4313      	orrs	r3, r2
 8000b82:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000b84:	4a11      	ldr	r2, [pc, #68]	; (8000bcc <HAL_GPIO_Init+0x34c>)
 8000b86:	693b      	ldr	r3, [r7, #16]
 8000b88:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8000b8a:	697b      	ldr	r3, [r7, #20]
 8000b8c:	3301      	adds	r3, #1
 8000b8e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000b90:	683b      	ldr	r3, [r7, #0]
 8000b92:	681a      	ldr	r2, [r3, #0]
 8000b94:	697b      	ldr	r3, [r7, #20]
 8000b96:	fa22 f303 	lsr.w	r3, r2, r3
 8000b9a:	2b00      	cmp	r3, #0
 8000b9c:	f47f ae78 	bne.w	8000890 <HAL_GPIO_Init+0x10>
  }
}
 8000ba0:	bf00      	nop
 8000ba2:	371c      	adds	r7, #28
 8000ba4:	46bd      	mov	sp, r7
 8000ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000baa:	4770      	bx	lr
 8000bac:	40021000 	.word	0x40021000
 8000bb0:	40010000 	.word	0x40010000
 8000bb4:	48000400 	.word	0x48000400
 8000bb8:	48000800 	.word	0x48000800
 8000bbc:	48000c00 	.word	0x48000c00
 8000bc0:	48001000 	.word	0x48001000
 8000bc4:	48001400 	.word	0x48001400
 8000bc8:	48001800 	.word	0x48001800
 8000bcc:	40010400 	.word	0x40010400

08000bd0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000bd0:	b480      	push	{r7}
 8000bd2:	b083      	sub	sp, #12
 8000bd4:	af00      	add	r7, sp, #0
 8000bd6:	6078      	str	r0, [r7, #4]
 8000bd8:	460b      	mov	r3, r1
 8000bda:	807b      	strh	r3, [r7, #2]
 8000bdc:	4613      	mov	r3, r2
 8000bde:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000be0:	787b      	ldrb	r3, [r7, #1]
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	d003      	beq.n	8000bee <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000be6:	887a      	ldrh	r2, [r7, #2]
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000bec:	e002      	b.n	8000bf4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000bee:	887a      	ldrh	r2, [r7, #2]
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000bf4:	bf00      	nop
 8000bf6:	370c      	adds	r7, #12
 8000bf8:	46bd      	mov	sp, r7
 8000bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bfe:	4770      	bx	lr

08000c00 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8000c00:	b580      	push	{r7, lr}
 8000c02:	b082      	sub	sp, #8
 8000c04:	af00      	add	r7, sp, #0
 8000c06:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	2b00      	cmp	r3, #0
 8000c0c:	d101      	bne.n	8000c12 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8000c0e:	2301      	movs	r3, #1
 8000c10:	e081      	b.n	8000d16 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8000c18:	b2db      	uxtb	r3, r3
 8000c1a:	2b00      	cmp	r3, #0
 8000c1c:	d106      	bne.n	8000c2c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	2200      	movs	r2, #0
 8000c22:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8000c26:	6878      	ldr	r0, [r7, #4]
 8000c28:	f002 feae 	bl	8003988 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	2224      	movs	r2, #36	; 0x24
 8000c30:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	681b      	ldr	r3, [r3, #0]
 8000c38:	681a      	ldr	r2, [r3, #0]
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	681b      	ldr	r3, [r3, #0]
 8000c3e:	f022 0201 	bic.w	r2, r2, #1
 8000c42:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	685a      	ldr	r2, [r3, #4]
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	681b      	ldr	r3, [r3, #0]
 8000c4c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8000c50:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	681b      	ldr	r3, [r3, #0]
 8000c56:	689a      	ldr	r2, [r3, #8]
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	681b      	ldr	r3, [r3, #0]
 8000c5c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8000c60:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	68db      	ldr	r3, [r3, #12]
 8000c66:	2b01      	cmp	r3, #1
 8000c68:	d107      	bne.n	8000c7a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	689a      	ldr	r2, [r3, #8]
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	681b      	ldr	r3, [r3, #0]
 8000c72:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8000c76:	609a      	str	r2, [r3, #8]
 8000c78:	e006      	b.n	8000c88 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	689a      	ldr	r2, [r3, #8]
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	681b      	ldr	r3, [r3, #0]
 8000c82:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8000c86:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	68db      	ldr	r3, [r3, #12]
 8000c8c:	2b02      	cmp	r3, #2
 8000c8e:	d104      	bne.n	8000c9a <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	681b      	ldr	r3, [r3, #0]
 8000c94:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000c98:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	681b      	ldr	r3, [r3, #0]
 8000c9e:	685b      	ldr	r3, [r3, #4]
 8000ca0:	687a      	ldr	r2, [r7, #4]
 8000ca2:	6812      	ldr	r2, [r2, #0]
 8000ca4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000ca8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000cac:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	681b      	ldr	r3, [r3, #0]
 8000cb2:	68da      	ldr	r2, [r3, #12]
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	681b      	ldr	r3, [r3, #0]
 8000cb8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8000cbc:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	691a      	ldr	r2, [r3, #16]
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	695b      	ldr	r3, [r3, #20]
 8000cc6:	ea42 0103 	orr.w	r1, r2, r3
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	699b      	ldr	r3, [r3, #24]
 8000cce:	021a      	lsls	r2, r3, #8
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	681b      	ldr	r3, [r3, #0]
 8000cd4:	430a      	orrs	r2, r1
 8000cd6:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	69d9      	ldr	r1, [r3, #28]
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	6a1a      	ldr	r2, [r3, #32]
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	681b      	ldr	r3, [r3, #0]
 8000ce4:	430a      	orrs	r2, r1
 8000ce6:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	681b      	ldr	r3, [r3, #0]
 8000cec:	681a      	ldr	r2, [r3, #0]
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	681b      	ldr	r3, [r3, #0]
 8000cf2:	f042 0201 	orr.w	r2, r2, #1
 8000cf6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	2220      	movs	r2, #32
 8000d02:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	2200      	movs	r2, #0
 8000d0a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	2200      	movs	r2, #0
 8000d10:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8000d14:	2300      	movs	r3, #0
}
 8000d16:	4618      	mov	r0, r3
 8000d18:	3708      	adds	r7, #8
 8000d1a:	46bd      	mov	sp, r7
 8000d1c:	bd80      	pop	{r7, pc}
	...

08000d20 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8000d20:	b580      	push	{r7, lr}
 8000d22:	b088      	sub	sp, #32
 8000d24:	af02      	add	r7, sp, #8
 8000d26:	60f8      	str	r0, [r7, #12]
 8000d28:	607a      	str	r2, [r7, #4]
 8000d2a:	461a      	mov	r2, r3
 8000d2c:	460b      	mov	r3, r1
 8000d2e:	817b      	strh	r3, [r7, #10]
 8000d30:	4613      	mov	r3, r2
 8000d32:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8000d34:	68fb      	ldr	r3, [r7, #12]
 8000d36:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8000d3a:	b2db      	uxtb	r3, r3
 8000d3c:	2b20      	cmp	r3, #32
 8000d3e:	f040 80da 	bne.w	8000ef6 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8000d42:	68fb      	ldr	r3, [r7, #12]
 8000d44:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8000d48:	2b01      	cmp	r3, #1
 8000d4a:	d101      	bne.n	8000d50 <HAL_I2C_Master_Transmit+0x30>
 8000d4c:	2302      	movs	r3, #2
 8000d4e:	e0d3      	b.n	8000ef8 <HAL_I2C_Master_Transmit+0x1d8>
 8000d50:	68fb      	ldr	r3, [r7, #12]
 8000d52:	2201      	movs	r2, #1
 8000d54:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8000d58:	f7ff fc7e 	bl	8000658 <HAL_GetTick>
 8000d5c:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8000d5e:	697b      	ldr	r3, [r7, #20]
 8000d60:	9300      	str	r3, [sp, #0]
 8000d62:	2319      	movs	r3, #25
 8000d64:	2201      	movs	r2, #1
 8000d66:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000d6a:	68f8      	ldr	r0, [r7, #12]
 8000d6c:	f000 faed 	bl	800134a <I2C_WaitOnFlagUntilTimeout>
 8000d70:	4603      	mov	r3, r0
 8000d72:	2b00      	cmp	r3, #0
 8000d74:	d001      	beq.n	8000d7a <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8000d76:	2301      	movs	r3, #1
 8000d78:	e0be      	b.n	8000ef8 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8000d7a:	68fb      	ldr	r3, [r7, #12]
 8000d7c:	2221      	movs	r2, #33	; 0x21
 8000d7e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8000d82:	68fb      	ldr	r3, [r7, #12]
 8000d84:	2210      	movs	r2, #16
 8000d86:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000d8a:	68fb      	ldr	r3, [r7, #12]
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8000d90:	68fb      	ldr	r3, [r7, #12]
 8000d92:	687a      	ldr	r2, [r7, #4]
 8000d94:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8000d96:	68fb      	ldr	r3, [r7, #12]
 8000d98:	893a      	ldrh	r2, [r7, #8]
 8000d9a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8000d9c:	68fb      	ldr	r3, [r7, #12]
 8000d9e:	2200      	movs	r2, #0
 8000da0:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8000da2:	68fb      	ldr	r3, [r7, #12]
 8000da4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000da6:	b29b      	uxth	r3, r3
 8000da8:	2bff      	cmp	r3, #255	; 0xff
 8000daa:	d90e      	bls.n	8000dca <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8000dac:	68fb      	ldr	r3, [r7, #12]
 8000dae:	22ff      	movs	r2, #255	; 0xff
 8000db0:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8000db2:	68fb      	ldr	r3, [r7, #12]
 8000db4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000db6:	b2da      	uxtb	r2, r3
 8000db8:	8979      	ldrh	r1, [r7, #10]
 8000dba:	4b51      	ldr	r3, [pc, #324]	; (8000f00 <HAL_I2C_Master_Transmit+0x1e0>)
 8000dbc:	9300      	str	r3, [sp, #0]
 8000dbe:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000dc2:	68f8      	ldr	r0, [r7, #12]
 8000dc4:	f000 fc50 	bl	8001668 <I2C_TransferConfig>
 8000dc8:	e06c      	b.n	8000ea4 <HAL_I2C_Master_Transmit+0x184>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8000dca:	68fb      	ldr	r3, [r7, #12]
 8000dcc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000dce:	b29a      	uxth	r2, r3
 8000dd0:	68fb      	ldr	r3, [r7, #12]
 8000dd2:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
 8000dd4:	68fb      	ldr	r3, [r7, #12]
 8000dd6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000dd8:	b2da      	uxtb	r2, r3
 8000dda:	8979      	ldrh	r1, [r7, #10]
 8000ddc:	4b48      	ldr	r3, [pc, #288]	; (8000f00 <HAL_I2C_Master_Transmit+0x1e0>)
 8000dde:	9300      	str	r3, [sp, #0]
 8000de0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000de4:	68f8      	ldr	r0, [r7, #12]
 8000de6:	f000 fc3f 	bl	8001668 <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 8000dea:	e05b      	b.n	8000ea4 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8000dec:	697a      	ldr	r2, [r7, #20]
 8000dee:	6a39      	ldr	r1, [r7, #32]
 8000df0:	68f8      	ldr	r0, [r7, #12]
 8000df2:	f000 faea 	bl	80013ca <I2C_WaitOnTXISFlagUntilTimeout>
 8000df6:	4603      	mov	r3, r0
 8000df8:	2b00      	cmp	r3, #0
 8000dfa:	d001      	beq.n	8000e00 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8000dfc:	2301      	movs	r3, #1
 8000dfe:	e07b      	b.n	8000ef8 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8000e00:	68fb      	ldr	r3, [r7, #12]
 8000e02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e04:	781a      	ldrb	r2, [r3, #0]
 8000e06:	68fb      	ldr	r3, [r7, #12]
 8000e08:	681b      	ldr	r3, [r3, #0]
 8000e0a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8000e0c:	68fb      	ldr	r3, [r7, #12]
 8000e0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e10:	1c5a      	adds	r2, r3, #1
 8000e12:	68fb      	ldr	r3, [r7, #12]
 8000e14:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8000e16:	68fb      	ldr	r3, [r7, #12]
 8000e18:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000e1a:	b29b      	uxth	r3, r3
 8000e1c:	3b01      	subs	r3, #1
 8000e1e:	b29a      	uxth	r2, r3
 8000e20:	68fb      	ldr	r3, [r7, #12]
 8000e22:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8000e24:	68fb      	ldr	r3, [r7, #12]
 8000e26:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000e28:	3b01      	subs	r3, #1
 8000e2a:	b29a      	uxth	r2, r3
 8000e2c:	68fb      	ldr	r3, [r7, #12]
 8000e2e:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8000e30:	68fb      	ldr	r3, [r7, #12]
 8000e32:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000e34:	b29b      	uxth	r3, r3
 8000e36:	2b00      	cmp	r3, #0
 8000e38:	d034      	beq.n	8000ea4 <HAL_I2C_Master_Transmit+0x184>
 8000e3a:	68fb      	ldr	r3, [r7, #12]
 8000e3c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000e3e:	2b00      	cmp	r3, #0
 8000e40:	d130      	bne.n	8000ea4 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8000e42:	697b      	ldr	r3, [r7, #20]
 8000e44:	9300      	str	r3, [sp, #0]
 8000e46:	6a3b      	ldr	r3, [r7, #32]
 8000e48:	2200      	movs	r2, #0
 8000e4a:	2180      	movs	r1, #128	; 0x80
 8000e4c:	68f8      	ldr	r0, [r7, #12]
 8000e4e:	f000 fa7c 	bl	800134a <I2C_WaitOnFlagUntilTimeout>
 8000e52:	4603      	mov	r3, r0
 8000e54:	2b00      	cmp	r3, #0
 8000e56:	d001      	beq.n	8000e5c <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8000e58:	2301      	movs	r3, #1
 8000e5a:	e04d      	b.n	8000ef8 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8000e5c:	68fb      	ldr	r3, [r7, #12]
 8000e5e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000e60:	b29b      	uxth	r3, r3
 8000e62:	2bff      	cmp	r3, #255	; 0xff
 8000e64:	d90e      	bls.n	8000e84 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8000e66:	68fb      	ldr	r3, [r7, #12]
 8000e68:	22ff      	movs	r2, #255	; 0xff
 8000e6a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8000e6c:	68fb      	ldr	r3, [r7, #12]
 8000e6e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000e70:	b2da      	uxtb	r2, r3
 8000e72:	8979      	ldrh	r1, [r7, #10]
 8000e74:	2300      	movs	r3, #0
 8000e76:	9300      	str	r3, [sp, #0]
 8000e78:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000e7c:	68f8      	ldr	r0, [r7, #12]
 8000e7e:	f000 fbf3 	bl	8001668 <I2C_TransferConfig>
 8000e82:	e00f      	b.n	8000ea4 <HAL_I2C_Master_Transmit+0x184>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8000e84:	68fb      	ldr	r3, [r7, #12]
 8000e86:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000e88:	b29a      	uxth	r2, r3
 8000e8a:	68fb      	ldr	r3, [r7, #12]
 8000e8c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8000e8e:	68fb      	ldr	r3, [r7, #12]
 8000e90:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000e92:	b2da      	uxtb	r2, r3
 8000e94:	8979      	ldrh	r1, [r7, #10]
 8000e96:	2300      	movs	r3, #0
 8000e98:	9300      	str	r3, [sp, #0]
 8000e9a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000e9e:	68f8      	ldr	r0, [r7, #12]
 8000ea0:	f000 fbe2 	bl	8001668 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8000ea4:	68fb      	ldr	r3, [r7, #12]
 8000ea6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000ea8:	b29b      	uxth	r3, r3
 8000eaa:	2b00      	cmp	r3, #0
 8000eac:	d19e      	bne.n	8000dec <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8000eae:	697a      	ldr	r2, [r7, #20]
 8000eb0:	6a39      	ldr	r1, [r7, #32]
 8000eb2:	68f8      	ldr	r0, [r7, #12]
 8000eb4:	f000 fac9 	bl	800144a <I2C_WaitOnSTOPFlagUntilTimeout>
 8000eb8:	4603      	mov	r3, r0
 8000eba:	2b00      	cmp	r3, #0
 8000ebc:	d001      	beq.n	8000ec2 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8000ebe:	2301      	movs	r3, #1
 8000ec0:	e01a      	b.n	8000ef8 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8000ec2:	68fb      	ldr	r3, [r7, #12]
 8000ec4:	681b      	ldr	r3, [r3, #0]
 8000ec6:	2220      	movs	r2, #32
 8000ec8:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8000eca:	68fb      	ldr	r3, [r7, #12]
 8000ecc:	681b      	ldr	r3, [r3, #0]
 8000ece:	6859      	ldr	r1, [r3, #4]
 8000ed0:	68fb      	ldr	r3, [r7, #12]
 8000ed2:	681a      	ldr	r2, [r3, #0]
 8000ed4:	4b0b      	ldr	r3, [pc, #44]	; (8000f04 <HAL_I2C_Master_Transmit+0x1e4>)
 8000ed6:	400b      	ands	r3, r1
 8000ed8:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8000eda:	68fb      	ldr	r3, [r7, #12]
 8000edc:	2220      	movs	r2, #32
 8000ede:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8000ee2:	68fb      	ldr	r3, [r7, #12]
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8000eea:	68fb      	ldr	r3, [r7, #12]
 8000eec:	2200      	movs	r2, #0
 8000eee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	e000      	b.n	8000ef8 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8000ef6:	2302      	movs	r3, #2
  }
}
 8000ef8:	4618      	mov	r0, r3
 8000efa:	3718      	adds	r7, #24
 8000efc:	46bd      	mov	sp, r7
 8000efe:	bd80      	pop	{r7, pc}
 8000f00:	80002000 	.word	0x80002000
 8000f04:	fe00e800 	.word	0xfe00e800

08000f08 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	b088      	sub	sp, #32
 8000f0c:	af02      	add	r7, sp, #8
 8000f0e:	60f8      	str	r0, [r7, #12]
 8000f10:	607a      	str	r2, [r7, #4]
 8000f12:	461a      	mov	r2, r3
 8000f14:	460b      	mov	r3, r1
 8000f16:	817b      	strh	r3, [r7, #10]
 8000f18:	4613      	mov	r3, r2
 8000f1a:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8000f1c:	68fb      	ldr	r3, [r7, #12]
 8000f1e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8000f22:	b2db      	uxtb	r3, r3
 8000f24:	2b20      	cmp	r3, #32
 8000f26:	f040 80db 	bne.w	80010e0 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8000f2a:	68fb      	ldr	r3, [r7, #12]
 8000f2c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8000f30:	2b01      	cmp	r3, #1
 8000f32:	d101      	bne.n	8000f38 <HAL_I2C_Master_Receive+0x30>
 8000f34:	2302      	movs	r3, #2
 8000f36:	e0d4      	b.n	80010e2 <HAL_I2C_Master_Receive+0x1da>
 8000f38:	68fb      	ldr	r3, [r7, #12]
 8000f3a:	2201      	movs	r2, #1
 8000f3c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8000f40:	f7ff fb8a 	bl	8000658 <HAL_GetTick>
 8000f44:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8000f46:	697b      	ldr	r3, [r7, #20]
 8000f48:	9300      	str	r3, [sp, #0]
 8000f4a:	2319      	movs	r3, #25
 8000f4c:	2201      	movs	r2, #1
 8000f4e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000f52:	68f8      	ldr	r0, [r7, #12]
 8000f54:	f000 f9f9 	bl	800134a <I2C_WaitOnFlagUntilTimeout>
 8000f58:	4603      	mov	r3, r0
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	d001      	beq.n	8000f62 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8000f5e:	2301      	movs	r3, #1
 8000f60:	e0bf      	b.n	80010e2 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8000f62:	68fb      	ldr	r3, [r7, #12]
 8000f64:	2222      	movs	r2, #34	; 0x22
 8000f66:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8000f6a:	68fb      	ldr	r3, [r7, #12]
 8000f6c:	2210      	movs	r2, #16
 8000f6e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000f72:	68fb      	ldr	r3, [r7, #12]
 8000f74:	2200      	movs	r2, #0
 8000f76:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8000f78:	68fb      	ldr	r3, [r7, #12]
 8000f7a:	687a      	ldr	r2, [r7, #4]
 8000f7c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8000f7e:	68fb      	ldr	r3, [r7, #12]
 8000f80:	893a      	ldrh	r2, [r7, #8]
 8000f82:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8000f84:	68fb      	ldr	r3, [r7, #12]
 8000f86:	2200      	movs	r2, #0
 8000f88:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8000f8a:	68fb      	ldr	r3, [r7, #12]
 8000f8c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000f8e:	b29b      	uxth	r3, r3
 8000f90:	2bff      	cmp	r3, #255	; 0xff
 8000f92:	d90e      	bls.n	8000fb2 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8000f94:	68fb      	ldr	r3, [r7, #12]
 8000f96:	22ff      	movs	r2, #255	; 0xff
 8000f98:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8000f9a:	68fb      	ldr	r3, [r7, #12]
 8000f9c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000f9e:	b2da      	uxtb	r2, r3
 8000fa0:	8979      	ldrh	r1, [r7, #10]
 8000fa2:	4b52      	ldr	r3, [pc, #328]	; (80010ec <HAL_I2C_Master_Receive+0x1e4>)
 8000fa4:	9300      	str	r3, [sp, #0]
 8000fa6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000faa:	68f8      	ldr	r0, [r7, #12]
 8000fac:	f000 fb5c 	bl	8001668 <I2C_TransferConfig>
 8000fb0:	e06d      	b.n	800108e <HAL_I2C_Master_Receive+0x186>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8000fb2:	68fb      	ldr	r3, [r7, #12]
 8000fb4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000fb6:	b29a      	uxth	r2, r3
 8000fb8:	68fb      	ldr	r3, [r7, #12]
 8000fba:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8000fbc:	68fb      	ldr	r3, [r7, #12]
 8000fbe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000fc0:	b2da      	uxtb	r2, r3
 8000fc2:	8979      	ldrh	r1, [r7, #10]
 8000fc4:	4b49      	ldr	r3, [pc, #292]	; (80010ec <HAL_I2C_Master_Receive+0x1e4>)
 8000fc6:	9300      	str	r3, [sp, #0]
 8000fc8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000fcc:	68f8      	ldr	r0, [r7, #12]
 8000fce:	f000 fb4b 	bl	8001668 <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 8000fd2:	e05c      	b.n	800108e <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8000fd4:	697a      	ldr	r2, [r7, #20]
 8000fd6:	6a39      	ldr	r1, [r7, #32]
 8000fd8:	68f8      	ldr	r0, [r7, #12]
 8000fda:	f000 fa73 	bl	80014c4 <I2C_WaitOnRXNEFlagUntilTimeout>
 8000fde:	4603      	mov	r3, r0
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	d001      	beq.n	8000fe8 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8000fe4:	2301      	movs	r3, #1
 8000fe6:	e07c      	b.n	80010e2 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8000fe8:	68fb      	ldr	r3, [r7, #12]
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000fee:	68fb      	ldr	r3, [r7, #12]
 8000ff0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ff2:	b2d2      	uxtb	r2, r2
 8000ff4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8000ff6:	68fb      	ldr	r3, [r7, #12]
 8000ff8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ffa:	1c5a      	adds	r2, r3, #1
 8000ffc:	68fb      	ldr	r3, [r7, #12]
 8000ffe:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8001000:	68fb      	ldr	r3, [r7, #12]
 8001002:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001004:	3b01      	subs	r3, #1
 8001006:	b29a      	uxth	r2, r3
 8001008:	68fb      	ldr	r3, [r7, #12]
 800100a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800100c:	68fb      	ldr	r3, [r7, #12]
 800100e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001010:	b29b      	uxth	r3, r3
 8001012:	3b01      	subs	r3, #1
 8001014:	b29a      	uxth	r2, r3
 8001016:	68fb      	ldr	r3, [r7, #12]
 8001018:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800101a:	68fb      	ldr	r3, [r7, #12]
 800101c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800101e:	b29b      	uxth	r3, r3
 8001020:	2b00      	cmp	r3, #0
 8001022:	d034      	beq.n	800108e <HAL_I2C_Master_Receive+0x186>
 8001024:	68fb      	ldr	r3, [r7, #12]
 8001026:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001028:	2b00      	cmp	r3, #0
 800102a:	d130      	bne.n	800108e <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800102c:	697b      	ldr	r3, [r7, #20]
 800102e:	9300      	str	r3, [sp, #0]
 8001030:	6a3b      	ldr	r3, [r7, #32]
 8001032:	2200      	movs	r2, #0
 8001034:	2180      	movs	r1, #128	; 0x80
 8001036:	68f8      	ldr	r0, [r7, #12]
 8001038:	f000 f987 	bl	800134a <I2C_WaitOnFlagUntilTimeout>
 800103c:	4603      	mov	r3, r0
 800103e:	2b00      	cmp	r3, #0
 8001040:	d001      	beq.n	8001046 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8001042:	2301      	movs	r3, #1
 8001044:	e04d      	b.n	80010e2 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001046:	68fb      	ldr	r3, [r7, #12]
 8001048:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800104a:	b29b      	uxth	r3, r3
 800104c:	2bff      	cmp	r3, #255	; 0xff
 800104e:	d90e      	bls.n	800106e <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001050:	68fb      	ldr	r3, [r7, #12]
 8001052:	22ff      	movs	r2, #255	; 0xff
 8001054:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8001056:	68fb      	ldr	r3, [r7, #12]
 8001058:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800105a:	b2da      	uxtb	r2, r3
 800105c:	8979      	ldrh	r1, [r7, #10]
 800105e:	2300      	movs	r3, #0
 8001060:	9300      	str	r3, [sp, #0]
 8001062:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001066:	68f8      	ldr	r0, [r7, #12]
 8001068:	f000 fafe 	bl	8001668 <I2C_TransferConfig>
 800106c:	e00f      	b.n	800108e <HAL_I2C_Master_Receive+0x186>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800106e:	68fb      	ldr	r3, [r7, #12]
 8001070:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001072:	b29a      	uxth	r2, r3
 8001074:	68fb      	ldr	r3, [r7, #12]
 8001076:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8001078:	68fb      	ldr	r3, [r7, #12]
 800107a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800107c:	b2da      	uxtb	r2, r3
 800107e:	8979      	ldrh	r1, [r7, #10]
 8001080:	2300      	movs	r3, #0
 8001082:	9300      	str	r3, [sp, #0]
 8001084:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001088:	68f8      	ldr	r0, [r7, #12]
 800108a:	f000 faed 	bl	8001668 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800108e:	68fb      	ldr	r3, [r7, #12]
 8001090:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001092:	b29b      	uxth	r3, r3
 8001094:	2b00      	cmp	r3, #0
 8001096:	d19d      	bne.n	8000fd4 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001098:	697a      	ldr	r2, [r7, #20]
 800109a:	6a39      	ldr	r1, [r7, #32]
 800109c:	68f8      	ldr	r0, [r7, #12]
 800109e:	f000 f9d4 	bl	800144a <I2C_WaitOnSTOPFlagUntilTimeout>
 80010a2:	4603      	mov	r3, r0
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	d001      	beq.n	80010ac <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 80010a8:	2301      	movs	r3, #1
 80010aa:	e01a      	b.n	80010e2 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80010ac:	68fb      	ldr	r3, [r7, #12]
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	2220      	movs	r2, #32
 80010b2:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80010b4:	68fb      	ldr	r3, [r7, #12]
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	6859      	ldr	r1, [r3, #4]
 80010ba:	68fb      	ldr	r3, [r7, #12]
 80010bc:	681a      	ldr	r2, [r3, #0]
 80010be:	4b0c      	ldr	r3, [pc, #48]	; (80010f0 <HAL_I2C_Master_Receive+0x1e8>)
 80010c0:	400b      	ands	r3, r1
 80010c2:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80010c4:	68fb      	ldr	r3, [r7, #12]
 80010c6:	2220      	movs	r2, #32
 80010c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80010cc:	68fb      	ldr	r3, [r7, #12]
 80010ce:	2200      	movs	r2, #0
 80010d0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80010d4:	68fb      	ldr	r3, [r7, #12]
 80010d6:	2200      	movs	r2, #0
 80010d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80010dc:	2300      	movs	r3, #0
 80010de:	e000      	b.n	80010e2 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 80010e0:	2302      	movs	r3, #2
  }
}
 80010e2:	4618      	mov	r0, r3
 80010e4:	3718      	adds	r7, #24
 80010e6:	46bd      	mov	sp, r7
 80010e8:	bd80      	pop	{r7, pc}
 80010ea:	bf00      	nop
 80010ec:	80002400 	.word	0x80002400
 80010f0:	fe00e800 	.word	0xfe00e800

080010f4 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 80010f4:	b580      	push	{r7, lr}
 80010f6:	b08a      	sub	sp, #40	; 0x28
 80010f8:	af02      	add	r7, sp, #8
 80010fa:	60f8      	str	r0, [r7, #12]
 80010fc:	607a      	str	r2, [r7, #4]
 80010fe:	603b      	str	r3, [r7, #0]
 8001100:	460b      	mov	r3, r1
 8001102:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 8001104:	2300      	movs	r3, #0
 8001106:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001108:	68fb      	ldr	r3, [r7, #12]
 800110a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800110e:	b2db      	uxtb	r3, r3
 8001110:	2b20      	cmp	r3, #32
 8001112:	f040 80f1 	bne.w	80012f8 <HAL_I2C_IsDeviceReady+0x204>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8001116:	68fb      	ldr	r3, [r7, #12]
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	699b      	ldr	r3, [r3, #24]
 800111c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001120:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001124:	d101      	bne.n	800112a <HAL_I2C_IsDeviceReady+0x36>
    {
      return HAL_BUSY;
 8001126:	2302      	movs	r3, #2
 8001128:	e0e7      	b.n	80012fa <HAL_I2C_IsDeviceReady+0x206>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800112a:	68fb      	ldr	r3, [r7, #12]
 800112c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001130:	2b01      	cmp	r3, #1
 8001132:	d101      	bne.n	8001138 <HAL_I2C_IsDeviceReady+0x44>
 8001134:	2302      	movs	r3, #2
 8001136:	e0e0      	b.n	80012fa <HAL_I2C_IsDeviceReady+0x206>
 8001138:	68fb      	ldr	r3, [r7, #12]
 800113a:	2201      	movs	r2, #1
 800113c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001140:	68fb      	ldr	r3, [r7, #12]
 8001142:	2224      	movs	r2, #36	; 0x24
 8001144:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001148:	68fb      	ldr	r3, [r7, #12]
 800114a:	2200      	movs	r2, #0
 800114c:	645a      	str	r2, [r3, #68]	; 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 800114e:	68fb      	ldr	r3, [r7, #12]
 8001150:	68db      	ldr	r3, [r3, #12]
 8001152:	2b01      	cmp	r3, #1
 8001154:	d107      	bne.n	8001166 <HAL_I2C_IsDeviceReady+0x72>
 8001156:	897b      	ldrh	r3, [r7, #10]
 8001158:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800115c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001160:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001164:	e004      	b.n	8001170 <HAL_I2C_IsDeviceReady+0x7c>
 8001166:	897b      	ldrh	r3, [r7, #10]
 8001168:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800116c:	f443 5320 	orr.w	r3, r3, #10240	; 0x2800
 8001170:	68fa      	ldr	r2, [r7, #12]
 8001172:	6812      	ldr	r2, [r2, #0]
 8001174:	6053      	str	r3, [r2, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 8001176:	f7ff fa6f 	bl	8000658 <HAL_GetTick>
 800117a:	61b8      	str	r0, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 800117c:	68fb      	ldr	r3, [r7, #12]
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	699b      	ldr	r3, [r3, #24]
 8001182:	f003 0320 	and.w	r3, r3, #32
 8001186:	2b20      	cmp	r3, #32
 8001188:	bf0c      	ite	eq
 800118a:	2301      	moveq	r3, #1
 800118c:	2300      	movne	r3, #0
 800118e:	b2db      	uxtb	r3, r3
 8001190:	77fb      	strb	r3, [r7, #31]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8001192:	68fb      	ldr	r3, [r7, #12]
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	699b      	ldr	r3, [r3, #24]
 8001198:	f003 0310 	and.w	r3, r3, #16
 800119c:	2b10      	cmp	r3, #16
 800119e:	bf0c      	ite	eq
 80011a0:	2301      	moveq	r3, #1
 80011a2:	2300      	movne	r3, #0
 80011a4:	b2db      	uxtb	r3, r3
 80011a6:	77bb      	strb	r3, [r7, #30]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 80011a8:	e034      	b.n	8001214 <HAL_I2C_IsDeviceReady+0x120>
      {
        if (Timeout != HAL_MAX_DELAY)
 80011aa:	683b      	ldr	r3, [r7, #0]
 80011ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80011b0:	d01a      	beq.n	80011e8 <HAL_I2C_IsDeviceReady+0xf4>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80011b2:	f7ff fa51 	bl	8000658 <HAL_GetTick>
 80011b6:	4602      	mov	r2, r0
 80011b8:	69bb      	ldr	r3, [r7, #24]
 80011ba:	1ad3      	subs	r3, r2, r3
 80011bc:	683a      	ldr	r2, [r7, #0]
 80011be:	429a      	cmp	r2, r3
 80011c0:	d302      	bcc.n	80011c8 <HAL_I2C_IsDeviceReady+0xd4>
 80011c2:	683b      	ldr	r3, [r7, #0]
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d10f      	bne.n	80011e8 <HAL_I2C_IsDeviceReady+0xf4>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 80011c8:	68fb      	ldr	r3, [r7, #12]
 80011ca:	2220      	movs	r2, #32
 80011cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80011d0:	68fb      	ldr	r3, [r7, #12]
 80011d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011d4:	f043 0220 	orr.w	r2, r3, #32
 80011d8:	68fb      	ldr	r3, [r7, #12]
 80011da:	645a      	str	r2, [r3, #68]	; 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 80011dc:	68fb      	ldr	r3, [r7, #12]
 80011de:	2200      	movs	r2, #0
 80011e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

            return HAL_ERROR;
 80011e4:	2301      	movs	r3, #1
 80011e6:	e088      	b.n	80012fa <HAL_I2C_IsDeviceReady+0x206>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 80011e8:	68fb      	ldr	r3, [r7, #12]
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	699b      	ldr	r3, [r3, #24]
 80011ee:	f003 0320 	and.w	r3, r3, #32
 80011f2:	2b20      	cmp	r3, #32
 80011f4:	bf0c      	ite	eq
 80011f6:	2301      	moveq	r3, #1
 80011f8:	2300      	movne	r3, #0
 80011fa:	b2db      	uxtb	r3, r3
 80011fc:	77fb      	strb	r3, [r7, #31]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80011fe:	68fb      	ldr	r3, [r7, #12]
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	699b      	ldr	r3, [r3, #24]
 8001204:	f003 0310 	and.w	r3, r3, #16
 8001208:	2b10      	cmp	r3, #16
 800120a:	bf0c      	ite	eq
 800120c:	2301      	moveq	r3, #1
 800120e:	2300      	movne	r3, #0
 8001210:	b2db      	uxtb	r3, r3
 8001212:	77bb      	strb	r3, [r7, #30]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 8001214:	7ffb      	ldrb	r3, [r7, #31]
 8001216:	2b00      	cmp	r3, #0
 8001218:	d102      	bne.n	8001220 <HAL_I2C_IsDeviceReady+0x12c>
 800121a:	7fbb      	ldrb	r3, [r7, #30]
 800121c:	2b00      	cmp	r3, #0
 800121e:	d0c4      	beq.n	80011aa <HAL_I2C_IsDeviceReady+0xb6>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 8001220:	68fb      	ldr	r3, [r7, #12]
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	699b      	ldr	r3, [r3, #24]
 8001226:	f003 0310 	and.w	r3, r3, #16
 800122a:	2b10      	cmp	r3, #16
 800122c:	d01a      	beq.n	8001264 <HAL_I2C_IsDeviceReady+0x170>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 800122e:	69bb      	ldr	r3, [r7, #24]
 8001230:	9300      	str	r3, [sp, #0]
 8001232:	683b      	ldr	r3, [r7, #0]
 8001234:	2200      	movs	r2, #0
 8001236:	2120      	movs	r1, #32
 8001238:	68f8      	ldr	r0, [r7, #12]
 800123a:	f000 f886 	bl	800134a <I2C_WaitOnFlagUntilTimeout>
 800123e:	4603      	mov	r3, r0
 8001240:	2b00      	cmp	r3, #0
 8001242:	d001      	beq.n	8001248 <HAL_I2C_IsDeviceReady+0x154>
        {
          return HAL_ERROR;
 8001244:	2301      	movs	r3, #1
 8001246:	e058      	b.n	80012fa <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001248:	68fb      	ldr	r3, [r7, #12]
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	2220      	movs	r2, #32
 800124e:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 8001250:	68fb      	ldr	r3, [r7, #12]
 8001252:	2220      	movs	r2, #32
 8001254:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001258:	68fb      	ldr	r3, [r7, #12]
 800125a:	2200      	movs	r2, #0
 800125c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_OK;
 8001260:	2300      	movs	r3, #0
 8001262:	e04a      	b.n	80012fa <HAL_I2C_IsDeviceReady+0x206>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8001264:	69bb      	ldr	r3, [r7, #24]
 8001266:	9300      	str	r3, [sp, #0]
 8001268:	683b      	ldr	r3, [r7, #0]
 800126a:	2200      	movs	r2, #0
 800126c:	2120      	movs	r1, #32
 800126e:	68f8      	ldr	r0, [r7, #12]
 8001270:	f000 f86b 	bl	800134a <I2C_WaitOnFlagUntilTimeout>
 8001274:	4603      	mov	r3, r0
 8001276:	2b00      	cmp	r3, #0
 8001278:	d001      	beq.n	800127e <HAL_I2C_IsDeviceReady+0x18a>
        {
          return HAL_ERROR;
 800127a:	2301      	movs	r3, #1
 800127c:	e03d      	b.n	80012fa <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800127e:	68fb      	ldr	r3, [r7, #12]
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	2210      	movs	r2, #16
 8001284:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001286:	68fb      	ldr	r3, [r7, #12]
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	2220      	movs	r2, #32
 800128c:	61da      	str	r2, [r3, #28]
      }

      /* Check if the maximum allowed number of trials has been reached */
      if (I2C_Trials == Trials)
 800128e:	697b      	ldr	r3, [r7, #20]
 8001290:	687a      	ldr	r2, [r7, #4]
 8001292:	429a      	cmp	r2, r3
 8001294:	d118      	bne.n	80012c8 <HAL_I2C_IsDeviceReady+0x1d4>
      {
        /* Generate Stop */
        hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8001296:	68fb      	ldr	r3, [r7, #12]
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	685a      	ldr	r2, [r3, #4]
 800129c:	68fb      	ldr	r3, [r7, #12]
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80012a4:	605a      	str	r2, [r3, #4]

        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 80012a6:	69bb      	ldr	r3, [r7, #24]
 80012a8:	9300      	str	r3, [sp, #0]
 80012aa:	683b      	ldr	r3, [r7, #0]
 80012ac:	2200      	movs	r2, #0
 80012ae:	2120      	movs	r1, #32
 80012b0:	68f8      	ldr	r0, [r7, #12]
 80012b2:	f000 f84a 	bl	800134a <I2C_WaitOnFlagUntilTimeout>
 80012b6:	4603      	mov	r3, r0
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d001      	beq.n	80012c0 <HAL_I2C_IsDeviceReady+0x1cc>
        {
          return HAL_ERROR;
 80012bc:	2301      	movs	r3, #1
 80012be:	e01c      	b.n	80012fa <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80012c0:	68fb      	ldr	r3, [r7, #12]
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	2220      	movs	r2, #32
 80012c6:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 80012c8:	697b      	ldr	r3, [r7, #20]
 80012ca:	3301      	adds	r3, #1
 80012cc:	617b      	str	r3, [r7, #20]
    }
    while (I2C_Trials < Trials);
 80012ce:	697b      	ldr	r3, [r7, #20]
 80012d0:	687a      	ldr	r2, [r7, #4]
 80012d2:	429a      	cmp	r2, r3
 80012d4:	f63f af3b 	bhi.w	800114e <HAL_I2C_IsDeviceReady+0x5a>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 80012d8:	68fb      	ldr	r3, [r7, #12]
 80012da:	2220      	movs	r2, #32
 80012dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80012e0:	68fb      	ldr	r3, [r7, #12]
 80012e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012e4:	f043 0220 	orr.w	r2, r3, #32
 80012e8:	68fb      	ldr	r3, [r7, #12]
 80012ea:	645a      	str	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80012ec:	68fb      	ldr	r3, [r7, #12]
 80012ee:	2200      	movs	r2, #0
 80012f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 80012f4:	2301      	movs	r3, #1
 80012f6:	e000      	b.n	80012fa <HAL_I2C_IsDeviceReady+0x206>
  }
  else
  {
    return HAL_BUSY;
 80012f8:	2302      	movs	r3, #2
  }
}
 80012fa:	4618      	mov	r0, r3
 80012fc:	3720      	adds	r7, #32
 80012fe:	46bd      	mov	sp, r7
 8001300:	bd80      	pop	{r7, pc}

08001302 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8001302:	b480      	push	{r7}
 8001304:	b083      	sub	sp, #12
 8001306:	af00      	add	r7, sp, #0
 8001308:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	699b      	ldr	r3, [r3, #24]
 8001310:	f003 0302 	and.w	r3, r3, #2
 8001314:	2b02      	cmp	r3, #2
 8001316:	d103      	bne.n	8001320 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	2200      	movs	r2, #0
 800131e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	699b      	ldr	r3, [r3, #24]
 8001326:	f003 0301 	and.w	r3, r3, #1
 800132a:	2b01      	cmp	r3, #1
 800132c:	d007      	beq.n	800133e <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	699a      	ldr	r2, [r3, #24]
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	f042 0201 	orr.w	r2, r2, #1
 800133c:	619a      	str	r2, [r3, #24]
  }
}
 800133e:	bf00      	nop
 8001340:	370c      	adds	r7, #12
 8001342:	46bd      	mov	sp, r7
 8001344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001348:	4770      	bx	lr

0800134a <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800134a:	b580      	push	{r7, lr}
 800134c:	b084      	sub	sp, #16
 800134e:	af00      	add	r7, sp, #0
 8001350:	60f8      	str	r0, [r7, #12]
 8001352:	60b9      	str	r1, [r7, #8]
 8001354:	603b      	str	r3, [r7, #0]
 8001356:	4613      	mov	r3, r2
 8001358:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800135a:	e022      	b.n	80013a2 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800135c:	683b      	ldr	r3, [r7, #0]
 800135e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001362:	d01e      	beq.n	80013a2 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001364:	f7ff f978 	bl	8000658 <HAL_GetTick>
 8001368:	4602      	mov	r2, r0
 800136a:	69bb      	ldr	r3, [r7, #24]
 800136c:	1ad3      	subs	r3, r2, r3
 800136e:	683a      	ldr	r2, [r7, #0]
 8001370:	429a      	cmp	r2, r3
 8001372:	d302      	bcc.n	800137a <I2C_WaitOnFlagUntilTimeout+0x30>
 8001374:	683b      	ldr	r3, [r7, #0]
 8001376:	2b00      	cmp	r3, #0
 8001378:	d113      	bne.n	80013a2 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800137a:	68fb      	ldr	r3, [r7, #12]
 800137c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800137e:	f043 0220 	orr.w	r2, r3, #32
 8001382:	68fb      	ldr	r3, [r7, #12]
 8001384:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001386:	68fb      	ldr	r3, [r7, #12]
 8001388:	2220      	movs	r2, #32
 800138a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800138e:	68fb      	ldr	r3, [r7, #12]
 8001390:	2200      	movs	r2, #0
 8001392:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001396:	68fb      	ldr	r3, [r7, #12]
 8001398:	2200      	movs	r2, #0
 800139a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 800139e:	2301      	movs	r3, #1
 80013a0:	e00f      	b.n	80013c2 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80013a2:	68fb      	ldr	r3, [r7, #12]
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	699a      	ldr	r2, [r3, #24]
 80013a8:	68bb      	ldr	r3, [r7, #8]
 80013aa:	4013      	ands	r3, r2
 80013ac:	68ba      	ldr	r2, [r7, #8]
 80013ae:	429a      	cmp	r2, r3
 80013b0:	bf0c      	ite	eq
 80013b2:	2301      	moveq	r3, #1
 80013b4:	2300      	movne	r3, #0
 80013b6:	b2db      	uxtb	r3, r3
 80013b8:	461a      	mov	r2, r3
 80013ba:	79fb      	ldrb	r3, [r7, #7]
 80013bc:	429a      	cmp	r2, r3
 80013be:	d0cd      	beq.n	800135c <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80013c0:	2300      	movs	r3, #0
}
 80013c2:	4618      	mov	r0, r3
 80013c4:	3710      	adds	r7, #16
 80013c6:	46bd      	mov	sp, r7
 80013c8:	bd80      	pop	{r7, pc}

080013ca <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80013ca:	b580      	push	{r7, lr}
 80013cc:	b084      	sub	sp, #16
 80013ce:	af00      	add	r7, sp, #0
 80013d0:	60f8      	str	r0, [r7, #12]
 80013d2:	60b9      	str	r1, [r7, #8]
 80013d4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80013d6:	e02c      	b.n	8001432 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80013d8:	687a      	ldr	r2, [r7, #4]
 80013da:	68b9      	ldr	r1, [r7, #8]
 80013dc:	68f8      	ldr	r0, [r7, #12]
 80013de:	f000 f8dd 	bl	800159c <I2C_IsAcknowledgeFailed>
 80013e2:	4603      	mov	r3, r0
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d001      	beq.n	80013ec <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80013e8:	2301      	movs	r3, #1
 80013ea:	e02a      	b.n	8001442 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80013ec:	68bb      	ldr	r3, [r7, #8]
 80013ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80013f2:	d01e      	beq.n	8001432 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80013f4:	f7ff f930 	bl	8000658 <HAL_GetTick>
 80013f8:	4602      	mov	r2, r0
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	1ad3      	subs	r3, r2, r3
 80013fe:	68ba      	ldr	r2, [r7, #8]
 8001400:	429a      	cmp	r2, r3
 8001402:	d302      	bcc.n	800140a <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8001404:	68bb      	ldr	r3, [r7, #8]
 8001406:	2b00      	cmp	r3, #0
 8001408:	d113      	bne.n	8001432 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800140a:	68fb      	ldr	r3, [r7, #12]
 800140c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800140e:	f043 0220 	orr.w	r2, r3, #32
 8001412:	68fb      	ldr	r3, [r7, #12]
 8001414:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001416:	68fb      	ldr	r3, [r7, #12]
 8001418:	2220      	movs	r2, #32
 800141a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800141e:	68fb      	ldr	r3, [r7, #12]
 8001420:	2200      	movs	r2, #0
 8001422:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001426:	68fb      	ldr	r3, [r7, #12]
 8001428:	2200      	movs	r2, #0
 800142a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800142e:	2301      	movs	r3, #1
 8001430:	e007      	b.n	8001442 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001432:	68fb      	ldr	r3, [r7, #12]
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	699b      	ldr	r3, [r3, #24]
 8001438:	f003 0302 	and.w	r3, r3, #2
 800143c:	2b02      	cmp	r3, #2
 800143e:	d1cb      	bne.n	80013d8 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001440:	2300      	movs	r3, #0
}
 8001442:	4618      	mov	r0, r3
 8001444:	3710      	adds	r7, #16
 8001446:	46bd      	mov	sp, r7
 8001448:	bd80      	pop	{r7, pc}

0800144a <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800144a:	b580      	push	{r7, lr}
 800144c:	b084      	sub	sp, #16
 800144e:	af00      	add	r7, sp, #0
 8001450:	60f8      	str	r0, [r7, #12]
 8001452:	60b9      	str	r1, [r7, #8]
 8001454:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001456:	e028      	b.n	80014aa <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8001458:	687a      	ldr	r2, [r7, #4]
 800145a:	68b9      	ldr	r1, [r7, #8]
 800145c:	68f8      	ldr	r0, [r7, #12]
 800145e:	f000 f89d 	bl	800159c <I2C_IsAcknowledgeFailed>
 8001462:	4603      	mov	r3, r0
 8001464:	2b00      	cmp	r3, #0
 8001466:	d001      	beq.n	800146c <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001468:	2301      	movs	r3, #1
 800146a:	e026      	b.n	80014ba <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800146c:	f7ff f8f4 	bl	8000658 <HAL_GetTick>
 8001470:	4602      	mov	r2, r0
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	1ad3      	subs	r3, r2, r3
 8001476:	68ba      	ldr	r2, [r7, #8]
 8001478:	429a      	cmp	r2, r3
 800147a:	d302      	bcc.n	8001482 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800147c:	68bb      	ldr	r3, [r7, #8]
 800147e:	2b00      	cmp	r3, #0
 8001480:	d113      	bne.n	80014aa <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001482:	68fb      	ldr	r3, [r7, #12]
 8001484:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001486:	f043 0220 	orr.w	r2, r3, #32
 800148a:	68fb      	ldr	r3, [r7, #12]
 800148c:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800148e:	68fb      	ldr	r3, [r7, #12]
 8001490:	2220      	movs	r2, #32
 8001492:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8001496:	68fb      	ldr	r3, [r7, #12]
 8001498:	2200      	movs	r2, #0
 800149a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800149e:	68fb      	ldr	r3, [r7, #12]
 80014a0:	2200      	movs	r2, #0
 80014a2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80014a6:	2301      	movs	r3, #1
 80014a8:	e007      	b.n	80014ba <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80014aa:	68fb      	ldr	r3, [r7, #12]
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	699b      	ldr	r3, [r3, #24]
 80014b0:	f003 0320 	and.w	r3, r3, #32
 80014b4:	2b20      	cmp	r3, #32
 80014b6:	d1cf      	bne.n	8001458 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80014b8:	2300      	movs	r3, #0
}
 80014ba:	4618      	mov	r0, r3
 80014bc:	3710      	adds	r7, #16
 80014be:	46bd      	mov	sp, r7
 80014c0:	bd80      	pop	{r7, pc}
	...

080014c4 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80014c4:	b580      	push	{r7, lr}
 80014c6:	b084      	sub	sp, #16
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	60f8      	str	r0, [r7, #12]
 80014cc:	60b9      	str	r1, [r7, #8]
 80014ce:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80014d0:	e055      	b.n	800157e <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80014d2:	687a      	ldr	r2, [r7, #4]
 80014d4:	68b9      	ldr	r1, [r7, #8]
 80014d6:	68f8      	ldr	r0, [r7, #12]
 80014d8:	f000 f860 	bl	800159c <I2C_IsAcknowledgeFailed>
 80014dc:	4603      	mov	r3, r0
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d001      	beq.n	80014e6 <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80014e2:	2301      	movs	r3, #1
 80014e4:	e053      	b.n	800158e <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80014e6:	68fb      	ldr	r3, [r7, #12]
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	699b      	ldr	r3, [r3, #24]
 80014ec:	f003 0320 	and.w	r3, r3, #32
 80014f0:	2b20      	cmp	r3, #32
 80014f2:	d129      	bne.n	8001548 <I2C_WaitOnRXNEFlagUntilTimeout+0x84>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 80014f4:	68fb      	ldr	r3, [r7, #12]
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	699b      	ldr	r3, [r3, #24]
 80014fa:	f003 0304 	and.w	r3, r3, #4
 80014fe:	2b04      	cmp	r3, #4
 8001500:	d105      	bne.n	800150e <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8001502:	68fb      	ldr	r3, [r7, #12]
 8001504:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001506:	2b00      	cmp	r3, #0
 8001508:	d001      	beq.n	800150e <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 800150a:	2300      	movs	r3, #0
 800150c:	e03f      	b.n	800158e <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
      else
      {
        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800150e:	68fb      	ldr	r3, [r7, #12]
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	2220      	movs	r2, #32
 8001514:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8001516:	68fb      	ldr	r3, [r7, #12]
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	6859      	ldr	r1, [r3, #4]
 800151c:	68fb      	ldr	r3, [r7, #12]
 800151e:	681a      	ldr	r2, [r3, #0]
 8001520:	4b1d      	ldr	r3, [pc, #116]	; (8001598 <I2C_WaitOnRXNEFlagUntilTimeout+0xd4>)
 8001522:	400b      	ands	r3, r1
 8001524:	6053      	str	r3, [r2, #4]

        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001526:	68fb      	ldr	r3, [r7, #12]
 8001528:	2200      	movs	r2, #0
 800152a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800152c:	68fb      	ldr	r3, [r7, #12]
 800152e:	2220      	movs	r2, #32
 8001530:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001534:	68fb      	ldr	r3, [r7, #12]
 8001536:	2200      	movs	r2, #0
 8001538:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800153c:	68fb      	ldr	r3, [r7, #12]
 800153e:	2200      	movs	r2, #0
 8001540:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8001544:	2301      	movs	r3, #1
 8001546:	e022      	b.n	800158e <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001548:	f7ff f886 	bl	8000658 <HAL_GetTick>
 800154c:	4602      	mov	r2, r0
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	1ad3      	subs	r3, r2, r3
 8001552:	68ba      	ldr	r2, [r7, #8]
 8001554:	429a      	cmp	r2, r3
 8001556:	d302      	bcc.n	800155e <I2C_WaitOnRXNEFlagUntilTimeout+0x9a>
 8001558:	68bb      	ldr	r3, [r7, #8]
 800155a:	2b00      	cmp	r3, #0
 800155c:	d10f      	bne.n	800157e <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800155e:	68fb      	ldr	r3, [r7, #12]
 8001560:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001562:	f043 0220 	orr.w	r2, r3, #32
 8001566:	68fb      	ldr	r3, [r7, #12]
 8001568:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800156a:	68fb      	ldr	r3, [r7, #12]
 800156c:	2220      	movs	r2, #32
 800156e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001572:	68fb      	ldr	r3, [r7, #12]
 8001574:	2200      	movs	r2, #0
 8001576:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800157a:	2301      	movs	r3, #1
 800157c:	e007      	b.n	800158e <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800157e:	68fb      	ldr	r3, [r7, #12]
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	699b      	ldr	r3, [r3, #24]
 8001584:	f003 0304 	and.w	r3, r3, #4
 8001588:	2b04      	cmp	r3, #4
 800158a:	d1a2      	bne.n	80014d2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800158c:	2300      	movs	r3, #0
}
 800158e:	4618      	mov	r0, r3
 8001590:	3710      	adds	r7, #16
 8001592:	46bd      	mov	sp, r7
 8001594:	bd80      	pop	{r7, pc}
 8001596:	bf00      	nop
 8001598:	fe00e800 	.word	0xfe00e800

0800159c <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800159c:	b580      	push	{r7, lr}
 800159e:	b084      	sub	sp, #16
 80015a0:	af00      	add	r7, sp, #0
 80015a2:	60f8      	str	r0, [r7, #12]
 80015a4:	60b9      	str	r1, [r7, #8]
 80015a6:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80015a8:	68fb      	ldr	r3, [r7, #12]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	699b      	ldr	r3, [r3, #24]
 80015ae:	f003 0310 	and.w	r3, r3, #16
 80015b2:	2b10      	cmp	r3, #16
 80015b4:	d151      	bne.n	800165a <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80015b6:	e022      	b.n	80015fe <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80015b8:	68bb      	ldr	r3, [r7, #8]
 80015ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80015be:	d01e      	beq.n	80015fe <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80015c0:	f7ff f84a 	bl	8000658 <HAL_GetTick>
 80015c4:	4602      	mov	r2, r0
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	1ad3      	subs	r3, r2, r3
 80015ca:	68ba      	ldr	r2, [r7, #8]
 80015cc:	429a      	cmp	r2, r3
 80015ce:	d302      	bcc.n	80015d6 <I2C_IsAcknowledgeFailed+0x3a>
 80015d0:	68bb      	ldr	r3, [r7, #8]
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d113      	bne.n	80015fe <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80015d6:	68fb      	ldr	r3, [r7, #12]
 80015d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015da:	f043 0220 	orr.w	r2, r3, #32
 80015de:	68fb      	ldr	r3, [r7, #12]
 80015e0:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80015e2:	68fb      	ldr	r3, [r7, #12]
 80015e4:	2220      	movs	r2, #32
 80015e6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80015ea:	68fb      	ldr	r3, [r7, #12]
 80015ec:	2200      	movs	r2, #0
 80015ee:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80015f2:	68fb      	ldr	r3, [r7, #12]
 80015f4:	2200      	movs	r2, #0
 80015f6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 80015fa:	2301      	movs	r3, #1
 80015fc:	e02e      	b.n	800165c <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80015fe:	68fb      	ldr	r3, [r7, #12]
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	699b      	ldr	r3, [r3, #24]
 8001604:	f003 0320 	and.w	r3, r3, #32
 8001608:	2b20      	cmp	r3, #32
 800160a:	d1d5      	bne.n	80015b8 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800160c:	68fb      	ldr	r3, [r7, #12]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	2210      	movs	r2, #16
 8001612:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001614:	68fb      	ldr	r3, [r7, #12]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	2220      	movs	r2, #32
 800161a:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800161c:	68f8      	ldr	r0, [r7, #12]
 800161e:	f7ff fe70 	bl	8001302 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001622:	68fb      	ldr	r3, [r7, #12]
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	6859      	ldr	r1, [r3, #4]
 8001628:	68fb      	ldr	r3, [r7, #12]
 800162a:	681a      	ldr	r2, [r3, #0]
 800162c:	4b0d      	ldr	r3, [pc, #52]	; (8001664 <I2C_IsAcknowledgeFailed+0xc8>)
 800162e:	400b      	ands	r3, r1
 8001630:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8001632:	68fb      	ldr	r3, [r7, #12]
 8001634:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001636:	f043 0204 	orr.w	r2, r3, #4
 800163a:	68fb      	ldr	r3, [r7, #12]
 800163c:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800163e:	68fb      	ldr	r3, [r7, #12]
 8001640:	2220      	movs	r2, #32
 8001642:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001646:	68fb      	ldr	r3, [r7, #12]
 8001648:	2200      	movs	r2, #0
 800164a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800164e:	68fb      	ldr	r3, [r7, #12]
 8001650:	2200      	movs	r2, #0
 8001652:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8001656:	2301      	movs	r3, #1
 8001658:	e000      	b.n	800165c <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 800165a:	2300      	movs	r3, #0
}
 800165c:	4618      	mov	r0, r3
 800165e:	3710      	adds	r7, #16
 8001660:	46bd      	mov	sp, r7
 8001662:	bd80      	pop	{r7, pc}
 8001664:	fe00e800 	.word	0xfe00e800

08001668 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 8001668:	b480      	push	{r7}
 800166a:	b085      	sub	sp, #20
 800166c:	af00      	add	r7, sp, #0
 800166e:	60f8      	str	r0, [r7, #12]
 8001670:	607b      	str	r3, [r7, #4]
 8001672:	460b      	mov	r3, r1
 8001674:	817b      	strh	r3, [r7, #10]
 8001676:	4613      	mov	r3, r2
 8001678:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 800167a:	68fb      	ldr	r3, [r7, #12]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	685a      	ldr	r2, [r3, #4]
 8001680:	69bb      	ldr	r3, [r7, #24]
 8001682:	0d5b      	lsrs	r3, r3, #21
 8001684:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8001688:	4b0d      	ldr	r3, [pc, #52]	; (80016c0 <I2C_TransferConfig+0x58>)
 800168a:	430b      	orrs	r3, r1
 800168c:	43db      	mvns	r3, r3
 800168e:	ea02 0103 	and.w	r1, r2, r3
 8001692:	897b      	ldrh	r3, [r7, #10]
 8001694:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001698:	7a7b      	ldrb	r3, [r7, #9]
 800169a:	041b      	lsls	r3, r3, #16
 800169c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80016a0:	431a      	orrs	r2, r3
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	431a      	orrs	r2, r3
 80016a6:	69bb      	ldr	r3, [r7, #24]
 80016a8:	431a      	orrs	r2, r3
 80016aa:	68fb      	ldr	r3, [r7, #12]
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	430a      	orrs	r2, r1
 80016b0:	605a      	str	r2, [r3, #4]
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 80016b2:	bf00      	nop
 80016b4:	3714      	adds	r7, #20
 80016b6:	46bd      	mov	sp, r7
 80016b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016bc:	4770      	bx	lr
 80016be:	bf00      	nop
 80016c0:	03ff63ff 	.word	0x03ff63ff

080016c4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80016c4:	b480      	push	{r7}
 80016c6:	b083      	sub	sp, #12
 80016c8:	af00      	add	r7, sp, #0
 80016ca:	6078      	str	r0, [r7, #4]
 80016cc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80016d4:	b2db      	uxtb	r3, r3
 80016d6:	2b20      	cmp	r3, #32
 80016d8:	d138      	bne.n	800174c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80016e0:	2b01      	cmp	r3, #1
 80016e2:	d101      	bne.n	80016e8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80016e4:	2302      	movs	r3, #2
 80016e6:	e032      	b.n	800174e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	2201      	movs	r2, #1
 80016ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	2224      	movs	r2, #36	; 0x24
 80016f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	681a      	ldr	r2, [r3, #0]
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	f022 0201 	bic.w	r2, r2, #1
 8001706:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	681a      	ldr	r2, [r3, #0]
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001716:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	6819      	ldr	r1, [r3, #0]
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	683a      	ldr	r2, [r7, #0]
 8001724:	430a      	orrs	r2, r1
 8001726:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	681a      	ldr	r2, [r3, #0]
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	f042 0201 	orr.w	r2, r2, #1
 8001736:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	2220      	movs	r2, #32
 800173c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	2200      	movs	r2, #0
 8001744:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001748:	2300      	movs	r3, #0
 800174a:	e000      	b.n	800174e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800174c:	2302      	movs	r3, #2
  }
}
 800174e:	4618      	mov	r0, r3
 8001750:	370c      	adds	r7, #12
 8001752:	46bd      	mov	sp, r7
 8001754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001758:	4770      	bx	lr

0800175a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800175a:	b480      	push	{r7}
 800175c:	b085      	sub	sp, #20
 800175e:	af00      	add	r7, sp, #0
 8001760:	6078      	str	r0, [r7, #4]
 8001762:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800176a:	b2db      	uxtb	r3, r3
 800176c:	2b20      	cmp	r3, #32
 800176e:	d139      	bne.n	80017e4 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001776:	2b01      	cmp	r3, #1
 8001778:	d101      	bne.n	800177e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800177a:	2302      	movs	r3, #2
 800177c:	e033      	b.n	80017e6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	2201      	movs	r2, #1
 8001782:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	2224      	movs	r2, #36	; 0x24
 800178a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	681a      	ldr	r2, [r3, #0]
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	f022 0201 	bic.w	r2, r2, #1
 800179c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80017a6:	68fb      	ldr	r3, [r7, #12]
 80017a8:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80017ac:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80017ae:	683b      	ldr	r3, [r7, #0]
 80017b0:	021b      	lsls	r3, r3, #8
 80017b2:	68fa      	ldr	r2, [r7, #12]
 80017b4:	4313      	orrs	r3, r2
 80017b6:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	68fa      	ldr	r2, [r7, #12]
 80017be:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	681a      	ldr	r2, [r3, #0]
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	f042 0201 	orr.w	r2, r2, #1
 80017ce:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	2220      	movs	r2, #32
 80017d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	2200      	movs	r2, #0
 80017dc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80017e0:	2300      	movs	r3, #0
 80017e2:	e000      	b.n	80017e6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80017e4:	2302      	movs	r3, #2
  }
}
 80017e6:	4618      	mov	r0, r3
 80017e8:	3714      	adds	r7, #20
 80017ea:	46bd      	mov	sp, r7
 80017ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f0:	4770      	bx	lr
	...

080017f4 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80017f4:	b480      	push	{r7}
 80017f6:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80017f8:	4b04      	ldr	r3, [pc, #16]	; (800180c <HAL_PWREx_GetVoltageRange+0x18>)
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8001800:	4618      	mov	r0, r3
 8001802:	46bd      	mov	sp, r7
 8001804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001808:	4770      	bx	lr
 800180a:	bf00      	nop
 800180c:	40007000 	.word	0x40007000

08001810 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001810:	b480      	push	{r7}
 8001812:	b085      	sub	sp, #20
 8001814:	af00      	add	r7, sp, #0
 8001816:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800181e:	d130      	bne.n	8001882 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001820:	4b23      	ldr	r3, [pc, #140]	; (80018b0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001828:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800182c:	d038      	beq.n	80018a0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800182e:	4b20      	ldr	r3, [pc, #128]	; (80018b0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001836:	4a1e      	ldr	r2, [pc, #120]	; (80018b0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001838:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800183c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800183e:	4b1d      	ldr	r3, [pc, #116]	; (80018b4 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	2232      	movs	r2, #50	; 0x32
 8001844:	fb02 f303 	mul.w	r3, r2, r3
 8001848:	4a1b      	ldr	r2, [pc, #108]	; (80018b8 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800184a:	fba2 2303 	umull	r2, r3, r2, r3
 800184e:	0c9b      	lsrs	r3, r3, #18
 8001850:	3301      	adds	r3, #1
 8001852:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001854:	e002      	b.n	800185c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001856:	68fb      	ldr	r3, [r7, #12]
 8001858:	3b01      	subs	r3, #1
 800185a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800185c:	4b14      	ldr	r3, [pc, #80]	; (80018b0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800185e:	695b      	ldr	r3, [r3, #20]
 8001860:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001864:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001868:	d102      	bne.n	8001870 <HAL_PWREx_ControlVoltageScaling+0x60>
 800186a:	68fb      	ldr	r3, [r7, #12]
 800186c:	2b00      	cmp	r3, #0
 800186e:	d1f2      	bne.n	8001856 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001870:	4b0f      	ldr	r3, [pc, #60]	; (80018b0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001872:	695b      	ldr	r3, [r3, #20]
 8001874:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001878:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800187c:	d110      	bne.n	80018a0 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800187e:	2303      	movs	r3, #3
 8001880:	e00f      	b.n	80018a2 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001882:	4b0b      	ldr	r3, [pc, #44]	; (80018b0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800188a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800188e:	d007      	beq.n	80018a0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001890:	4b07      	ldr	r3, [pc, #28]	; (80018b0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001898:	4a05      	ldr	r2, [pc, #20]	; (80018b0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800189a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800189e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80018a0:	2300      	movs	r3, #0
}
 80018a2:	4618      	mov	r0, r3
 80018a4:	3714      	adds	r7, #20
 80018a6:	46bd      	mov	sp, r7
 80018a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ac:	4770      	bx	lr
 80018ae:	bf00      	nop
 80018b0:	40007000 	.word	0x40007000
 80018b4:	20000008 	.word	0x20000008
 80018b8:	431bde83 	.word	0x431bde83

080018bc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80018bc:	b580      	push	{r7, lr}
 80018be:	b088      	sub	sp, #32
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d101      	bne.n	80018ce <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80018ca:	2301      	movs	r3, #1
 80018cc:	e39d      	b.n	800200a <HAL_RCC_OscConfig+0x74e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80018ce:	4ba4      	ldr	r3, [pc, #656]	; (8001b60 <HAL_RCC_OscConfig+0x2a4>)
 80018d0:	689b      	ldr	r3, [r3, #8]
 80018d2:	f003 030c 	and.w	r3, r3, #12
 80018d6:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80018d8:	4ba1      	ldr	r3, [pc, #644]	; (8001b60 <HAL_RCC_OscConfig+0x2a4>)
 80018da:	68db      	ldr	r3, [r3, #12]
 80018dc:	f003 0303 	and.w	r3, r3, #3
 80018e0:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	f003 0310 	and.w	r3, r3, #16
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	f000 80e1 	beq.w	8001ab2 <HAL_RCC_OscConfig+0x1f6>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80018f0:	69bb      	ldr	r3, [r7, #24]
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d007      	beq.n	8001906 <HAL_RCC_OscConfig+0x4a>
 80018f6:	69bb      	ldr	r3, [r7, #24]
 80018f8:	2b0c      	cmp	r3, #12
 80018fa:	f040 8088 	bne.w	8001a0e <HAL_RCC_OscConfig+0x152>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80018fe:	697b      	ldr	r3, [r7, #20]
 8001900:	2b01      	cmp	r3, #1
 8001902:	f040 8084 	bne.w	8001a0e <HAL_RCC_OscConfig+0x152>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001906:	4b96      	ldr	r3, [pc, #600]	; (8001b60 <HAL_RCC_OscConfig+0x2a4>)
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	f003 0302 	and.w	r3, r3, #2
 800190e:	2b00      	cmp	r3, #0
 8001910:	d005      	beq.n	800191e <HAL_RCC_OscConfig+0x62>
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	699b      	ldr	r3, [r3, #24]
 8001916:	2b00      	cmp	r3, #0
 8001918:	d101      	bne.n	800191e <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 800191a:	2301      	movs	r3, #1
 800191c:	e375      	b.n	800200a <HAL_RCC_OscConfig+0x74e>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	6a1a      	ldr	r2, [r3, #32]
 8001922:	4b8f      	ldr	r3, [pc, #572]	; (8001b60 <HAL_RCC_OscConfig+0x2a4>)
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	f003 0308 	and.w	r3, r3, #8
 800192a:	2b00      	cmp	r3, #0
 800192c:	d004      	beq.n	8001938 <HAL_RCC_OscConfig+0x7c>
 800192e:	4b8c      	ldr	r3, [pc, #560]	; (8001b60 <HAL_RCC_OscConfig+0x2a4>)
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001936:	e005      	b.n	8001944 <HAL_RCC_OscConfig+0x88>
 8001938:	4b89      	ldr	r3, [pc, #548]	; (8001b60 <HAL_RCC_OscConfig+0x2a4>)
 800193a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800193e:	091b      	lsrs	r3, r3, #4
 8001940:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001944:	4293      	cmp	r3, r2
 8001946:	d223      	bcs.n	8001990 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	6a1b      	ldr	r3, [r3, #32]
 800194c:	4618      	mov	r0, r3
 800194e:	f000 fd09 	bl	8002364 <RCC_SetFlashLatencyFromMSIRange>
 8001952:	4603      	mov	r3, r0
 8001954:	2b00      	cmp	r3, #0
 8001956:	d001      	beq.n	800195c <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8001958:	2301      	movs	r3, #1
 800195a:	e356      	b.n	800200a <HAL_RCC_OscConfig+0x74e>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800195c:	4b80      	ldr	r3, [pc, #512]	; (8001b60 <HAL_RCC_OscConfig+0x2a4>)
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	4a7f      	ldr	r2, [pc, #508]	; (8001b60 <HAL_RCC_OscConfig+0x2a4>)
 8001962:	f043 0308 	orr.w	r3, r3, #8
 8001966:	6013      	str	r3, [r2, #0]
 8001968:	4b7d      	ldr	r3, [pc, #500]	; (8001b60 <HAL_RCC_OscConfig+0x2a4>)
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	6a1b      	ldr	r3, [r3, #32]
 8001974:	497a      	ldr	r1, [pc, #488]	; (8001b60 <HAL_RCC_OscConfig+0x2a4>)
 8001976:	4313      	orrs	r3, r2
 8001978:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800197a:	4b79      	ldr	r3, [pc, #484]	; (8001b60 <HAL_RCC_OscConfig+0x2a4>)
 800197c:	685b      	ldr	r3, [r3, #4]
 800197e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	69db      	ldr	r3, [r3, #28]
 8001986:	021b      	lsls	r3, r3, #8
 8001988:	4975      	ldr	r1, [pc, #468]	; (8001b60 <HAL_RCC_OscConfig+0x2a4>)
 800198a:	4313      	orrs	r3, r2
 800198c:	604b      	str	r3, [r1, #4]
 800198e:	e022      	b.n	80019d6 <HAL_RCC_OscConfig+0x11a>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001990:	4b73      	ldr	r3, [pc, #460]	; (8001b60 <HAL_RCC_OscConfig+0x2a4>)
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	4a72      	ldr	r2, [pc, #456]	; (8001b60 <HAL_RCC_OscConfig+0x2a4>)
 8001996:	f043 0308 	orr.w	r3, r3, #8
 800199a:	6013      	str	r3, [r2, #0]
 800199c:	4b70      	ldr	r3, [pc, #448]	; (8001b60 <HAL_RCC_OscConfig+0x2a4>)
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	6a1b      	ldr	r3, [r3, #32]
 80019a8:	496d      	ldr	r1, [pc, #436]	; (8001b60 <HAL_RCC_OscConfig+0x2a4>)
 80019aa:	4313      	orrs	r3, r2
 80019ac:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80019ae:	4b6c      	ldr	r3, [pc, #432]	; (8001b60 <HAL_RCC_OscConfig+0x2a4>)
 80019b0:	685b      	ldr	r3, [r3, #4]
 80019b2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	69db      	ldr	r3, [r3, #28]
 80019ba:	021b      	lsls	r3, r3, #8
 80019bc:	4968      	ldr	r1, [pc, #416]	; (8001b60 <HAL_RCC_OscConfig+0x2a4>)
 80019be:	4313      	orrs	r3, r2
 80019c0:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	6a1b      	ldr	r3, [r3, #32]
 80019c6:	4618      	mov	r0, r3
 80019c8:	f000 fccc 	bl	8002364 <RCC_SetFlashLatencyFromMSIRange>
 80019cc:	4603      	mov	r3, r0
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d001      	beq.n	80019d6 <HAL_RCC_OscConfig+0x11a>
          {
            return HAL_ERROR;
 80019d2:	2301      	movs	r3, #1
 80019d4:	e319      	b.n	800200a <HAL_RCC_OscConfig+0x74e>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80019d6:	f000 fc03 	bl	80021e0 <HAL_RCC_GetSysClockFreq>
 80019da:	4601      	mov	r1, r0
 80019dc:	4b60      	ldr	r3, [pc, #384]	; (8001b60 <HAL_RCC_OscConfig+0x2a4>)
 80019de:	689b      	ldr	r3, [r3, #8]
 80019e0:	091b      	lsrs	r3, r3, #4
 80019e2:	f003 030f 	and.w	r3, r3, #15
 80019e6:	4a5f      	ldr	r2, [pc, #380]	; (8001b64 <HAL_RCC_OscConfig+0x2a8>)
 80019e8:	5cd3      	ldrb	r3, [r2, r3]
 80019ea:	f003 031f 	and.w	r3, r3, #31
 80019ee:	fa21 f303 	lsr.w	r3, r1, r3
 80019f2:	4a5d      	ldr	r2, [pc, #372]	; (8001b68 <HAL_RCC_OscConfig+0x2ac>)
 80019f4:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80019f6:	4b5d      	ldr	r3, [pc, #372]	; (8001b6c <HAL_RCC_OscConfig+0x2b0>)
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	4618      	mov	r0, r3
 80019fc:	f7fe fde0 	bl	80005c0 <HAL_InitTick>
 8001a00:	4603      	mov	r3, r0
 8001a02:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001a04:	7bfb      	ldrb	r3, [r7, #15]
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d052      	beq.n	8001ab0 <HAL_RCC_OscConfig+0x1f4>
        {
          return status;
 8001a0a:	7bfb      	ldrb	r3, [r7, #15]
 8001a0c:	e2fd      	b.n	800200a <HAL_RCC_OscConfig+0x74e>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	699b      	ldr	r3, [r3, #24]
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d032      	beq.n	8001a7c <HAL_RCC_OscConfig+0x1c0>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001a16:	4b52      	ldr	r3, [pc, #328]	; (8001b60 <HAL_RCC_OscConfig+0x2a4>)
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	4a51      	ldr	r2, [pc, #324]	; (8001b60 <HAL_RCC_OscConfig+0x2a4>)
 8001a1c:	f043 0301 	orr.w	r3, r3, #1
 8001a20:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001a22:	f7fe fe19 	bl	8000658 <HAL_GetTick>
 8001a26:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001a28:	e008      	b.n	8001a3c <HAL_RCC_OscConfig+0x180>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001a2a:	f7fe fe15 	bl	8000658 <HAL_GetTick>
 8001a2e:	4602      	mov	r2, r0
 8001a30:	693b      	ldr	r3, [r7, #16]
 8001a32:	1ad3      	subs	r3, r2, r3
 8001a34:	2b02      	cmp	r3, #2
 8001a36:	d901      	bls.n	8001a3c <HAL_RCC_OscConfig+0x180>
          {
            return HAL_TIMEOUT;
 8001a38:	2303      	movs	r3, #3
 8001a3a:	e2e6      	b.n	800200a <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001a3c:	4b48      	ldr	r3, [pc, #288]	; (8001b60 <HAL_RCC_OscConfig+0x2a4>)
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	f003 0302 	and.w	r3, r3, #2
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d0f0      	beq.n	8001a2a <HAL_RCC_OscConfig+0x16e>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001a48:	4b45      	ldr	r3, [pc, #276]	; (8001b60 <HAL_RCC_OscConfig+0x2a4>)
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	4a44      	ldr	r2, [pc, #272]	; (8001b60 <HAL_RCC_OscConfig+0x2a4>)
 8001a4e:	f043 0308 	orr.w	r3, r3, #8
 8001a52:	6013      	str	r3, [r2, #0]
 8001a54:	4b42      	ldr	r3, [pc, #264]	; (8001b60 <HAL_RCC_OscConfig+0x2a4>)
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	6a1b      	ldr	r3, [r3, #32]
 8001a60:	493f      	ldr	r1, [pc, #252]	; (8001b60 <HAL_RCC_OscConfig+0x2a4>)
 8001a62:	4313      	orrs	r3, r2
 8001a64:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001a66:	4b3e      	ldr	r3, [pc, #248]	; (8001b60 <HAL_RCC_OscConfig+0x2a4>)
 8001a68:	685b      	ldr	r3, [r3, #4]
 8001a6a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	69db      	ldr	r3, [r3, #28]
 8001a72:	021b      	lsls	r3, r3, #8
 8001a74:	493a      	ldr	r1, [pc, #232]	; (8001b60 <HAL_RCC_OscConfig+0x2a4>)
 8001a76:	4313      	orrs	r3, r2
 8001a78:	604b      	str	r3, [r1, #4]
 8001a7a:	e01a      	b.n	8001ab2 <HAL_RCC_OscConfig+0x1f6>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001a7c:	4b38      	ldr	r3, [pc, #224]	; (8001b60 <HAL_RCC_OscConfig+0x2a4>)
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	4a37      	ldr	r2, [pc, #220]	; (8001b60 <HAL_RCC_OscConfig+0x2a4>)
 8001a82:	f023 0301 	bic.w	r3, r3, #1
 8001a86:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001a88:	f7fe fde6 	bl	8000658 <HAL_GetTick>
 8001a8c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001a8e:	e008      	b.n	8001aa2 <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001a90:	f7fe fde2 	bl	8000658 <HAL_GetTick>
 8001a94:	4602      	mov	r2, r0
 8001a96:	693b      	ldr	r3, [r7, #16]
 8001a98:	1ad3      	subs	r3, r2, r3
 8001a9a:	2b02      	cmp	r3, #2
 8001a9c:	d901      	bls.n	8001aa2 <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8001a9e:	2303      	movs	r3, #3
 8001aa0:	e2b3      	b.n	800200a <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001aa2:	4b2f      	ldr	r3, [pc, #188]	; (8001b60 <HAL_RCC_OscConfig+0x2a4>)
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	f003 0302 	and.w	r3, r3, #2
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d1f0      	bne.n	8001a90 <HAL_RCC_OscConfig+0x1d4>
 8001aae:	e000      	b.n	8001ab2 <HAL_RCC_OscConfig+0x1f6>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001ab0:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	f003 0301 	and.w	r3, r3, #1
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d074      	beq.n	8001ba8 <HAL_RCC_OscConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001abe:	69bb      	ldr	r3, [r7, #24]
 8001ac0:	2b08      	cmp	r3, #8
 8001ac2:	d005      	beq.n	8001ad0 <HAL_RCC_OscConfig+0x214>
 8001ac4:	69bb      	ldr	r3, [r7, #24]
 8001ac6:	2b0c      	cmp	r3, #12
 8001ac8:	d10e      	bne.n	8001ae8 <HAL_RCC_OscConfig+0x22c>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001aca:	697b      	ldr	r3, [r7, #20]
 8001acc:	2b03      	cmp	r3, #3
 8001ace:	d10b      	bne.n	8001ae8 <HAL_RCC_OscConfig+0x22c>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ad0:	4b23      	ldr	r3, [pc, #140]	; (8001b60 <HAL_RCC_OscConfig+0x2a4>)
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d064      	beq.n	8001ba6 <HAL_RCC_OscConfig+0x2ea>
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	685b      	ldr	r3, [r3, #4]
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d160      	bne.n	8001ba6 <HAL_RCC_OscConfig+0x2ea>
      {
        return HAL_ERROR;
 8001ae4:	2301      	movs	r3, #1
 8001ae6:	e290      	b.n	800200a <HAL_RCC_OscConfig+0x74e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	685b      	ldr	r3, [r3, #4]
 8001aec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001af0:	d106      	bne.n	8001b00 <HAL_RCC_OscConfig+0x244>
 8001af2:	4b1b      	ldr	r3, [pc, #108]	; (8001b60 <HAL_RCC_OscConfig+0x2a4>)
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	4a1a      	ldr	r2, [pc, #104]	; (8001b60 <HAL_RCC_OscConfig+0x2a4>)
 8001af8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001afc:	6013      	str	r3, [r2, #0]
 8001afe:	e01d      	b.n	8001b3c <HAL_RCC_OscConfig+0x280>
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	685b      	ldr	r3, [r3, #4]
 8001b04:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001b08:	d10c      	bne.n	8001b24 <HAL_RCC_OscConfig+0x268>
 8001b0a:	4b15      	ldr	r3, [pc, #84]	; (8001b60 <HAL_RCC_OscConfig+0x2a4>)
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	4a14      	ldr	r2, [pc, #80]	; (8001b60 <HAL_RCC_OscConfig+0x2a4>)
 8001b10:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001b14:	6013      	str	r3, [r2, #0]
 8001b16:	4b12      	ldr	r3, [pc, #72]	; (8001b60 <HAL_RCC_OscConfig+0x2a4>)
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	4a11      	ldr	r2, [pc, #68]	; (8001b60 <HAL_RCC_OscConfig+0x2a4>)
 8001b1c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b20:	6013      	str	r3, [r2, #0]
 8001b22:	e00b      	b.n	8001b3c <HAL_RCC_OscConfig+0x280>
 8001b24:	4b0e      	ldr	r3, [pc, #56]	; (8001b60 <HAL_RCC_OscConfig+0x2a4>)
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	4a0d      	ldr	r2, [pc, #52]	; (8001b60 <HAL_RCC_OscConfig+0x2a4>)
 8001b2a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001b2e:	6013      	str	r3, [r2, #0]
 8001b30:	4b0b      	ldr	r3, [pc, #44]	; (8001b60 <HAL_RCC_OscConfig+0x2a4>)
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	4a0a      	ldr	r2, [pc, #40]	; (8001b60 <HAL_RCC_OscConfig+0x2a4>)
 8001b36:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001b3a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	685b      	ldr	r3, [r3, #4]
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d01c      	beq.n	8001b7e <HAL_RCC_OscConfig+0x2c2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b44:	f7fe fd88 	bl	8000658 <HAL_GetTick>
 8001b48:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001b4a:	e011      	b.n	8001b70 <HAL_RCC_OscConfig+0x2b4>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001b4c:	f7fe fd84 	bl	8000658 <HAL_GetTick>
 8001b50:	4602      	mov	r2, r0
 8001b52:	693b      	ldr	r3, [r7, #16]
 8001b54:	1ad3      	subs	r3, r2, r3
 8001b56:	2b64      	cmp	r3, #100	; 0x64
 8001b58:	d90a      	bls.n	8001b70 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8001b5a:	2303      	movs	r3, #3
 8001b5c:	e255      	b.n	800200a <HAL_RCC_OscConfig+0x74e>
 8001b5e:	bf00      	nop
 8001b60:	40021000 	.word	0x40021000
 8001b64:	08004b2c 	.word	0x08004b2c
 8001b68:	20000008 	.word	0x20000008
 8001b6c:	20000000 	.word	0x20000000
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001b70:	4bae      	ldr	r3, [pc, #696]	; (8001e2c <HAL_RCC_OscConfig+0x570>)
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d0e7      	beq.n	8001b4c <HAL_RCC_OscConfig+0x290>
 8001b7c:	e014      	b.n	8001ba8 <HAL_RCC_OscConfig+0x2ec>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b7e:	f7fe fd6b 	bl	8000658 <HAL_GetTick>
 8001b82:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001b84:	e008      	b.n	8001b98 <HAL_RCC_OscConfig+0x2dc>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001b86:	f7fe fd67 	bl	8000658 <HAL_GetTick>
 8001b8a:	4602      	mov	r2, r0
 8001b8c:	693b      	ldr	r3, [r7, #16]
 8001b8e:	1ad3      	subs	r3, r2, r3
 8001b90:	2b64      	cmp	r3, #100	; 0x64
 8001b92:	d901      	bls.n	8001b98 <HAL_RCC_OscConfig+0x2dc>
          {
            return HAL_TIMEOUT;
 8001b94:	2303      	movs	r3, #3
 8001b96:	e238      	b.n	800200a <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001b98:	4ba4      	ldr	r3, [pc, #656]	; (8001e2c <HAL_RCC_OscConfig+0x570>)
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d1f0      	bne.n	8001b86 <HAL_RCC_OscConfig+0x2ca>
 8001ba4:	e000      	b.n	8001ba8 <HAL_RCC_OscConfig+0x2ec>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ba6:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	f003 0302 	and.w	r3, r3, #2
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d060      	beq.n	8001c76 <HAL_RCC_OscConfig+0x3ba>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001bb4:	69bb      	ldr	r3, [r7, #24]
 8001bb6:	2b04      	cmp	r3, #4
 8001bb8:	d005      	beq.n	8001bc6 <HAL_RCC_OscConfig+0x30a>
 8001bba:	69bb      	ldr	r3, [r7, #24]
 8001bbc:	2b0c      	cmp	r3, #12
 8001bbe:	d119      	bne.n	8001bf4 <HAL_RCC_OscConfig+0x338>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001bc0:	697b      	ldr	r3, [r7, #20]
 8001bc2:	2b02      	cmp	r3, #2
 8001bc4:	d116      	bne.n	8001bf4 <HAL_RCC_OscConfig+0x338>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001bc6:	4b99      	ldr	r3, [pc, #612]	; (8001e2c <HAL_RCC_OscConfig+0x570>)
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d005      	beq.n	8001bde <HAL_RCC_OscConfig+0x322>
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	68db      	ldr	r3, [r3, #12]
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d101      	bne.n	8001bde <HAL_RCC_OscConfig+0x322>
      {
        return HAL_ERROR;
 8001bda:	2301      	movs	r3, #1
 8001bdc:	e215      	b.n	800200a <HAL_RCC_OscConfig+0x74e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001bde:	4b93      	ldr	r3, [pc, #588]	; (8001e2c <HAL_RCC_OscConfig+0x570>)
 8001be0:	685b      	ldr	r3, [r3, #4]
 8001be2:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	691b      	ldr	r3, [r3, #16]
 8001bea:	061b      	lsls	r3, r3, #24
 8001bec:	498f      	ldr	r1, [pc, #572]	; (8001e2c <HAL_RCC_OscConfig+0x570>)
 8001bee:	4313      	orrs	r3, r2
 8001bf0:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001bf2:	e040      	b.n	8001c76 <HAL_RCC_OscConfig+0x3ba>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	68db      	ldr	r3, [r3, #12]
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d023      	beq.n	8001c44 <HAL_RCC_OscConfig+0x388>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001bfc:	4b8b      	ldr	r3, [pc, #556]	; (8001e2c <HAL_RCC_OscConfig+0x570>)
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	4a8a      	ldr	r2, [pc, #552]	; (8001e2c <HAL_RCC_OscConfig+0x570>)
 8001c02:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c06:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c08:	f7fe fd26 	bl	8000658 <HAL_GetTick>
 8001c0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001c0e:	e008      	b.n	8001c22 <HAL_RCC_OscConfig+0x366>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001c10:	f7fe fd22 	bl	8000658 <HAL_GetTick>
 8001c14:	4602      	mov	r2, r0
 8001c16:	693b      	ldr	r3, [r7, #16]
 8001c18:	1ad3      	subs	r3, r2, r3
 8001c1a:	2b02      	cmp	r3, #2
 8001c1c:	d901      	bls.n	8001c22 <HAL_RCC_OscConfig+0x366>
          {
            return HAL_TIMEOUT;
 8001c1e:	2303      	movs	r3, #3
 8001c20:	e1f3      	b.n	800200a <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001c22:	4b82      	ldr	r3, [pc, #520]	; (8001e2c <HAL_RCC_OscConfig+0x570>)
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d0f0      	beq.n	8001c10 <HAL_RCC_OscConfig+0x354>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c2e:	4b7f      	ldr	r3, [pc, #508]	; (8001e2c <HAL_RCC_OscConfig+0x570>)
 8001c30:	685b      	ldr	r3, [r3, #4]
 8001c32:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	691b      	ldr	r3, [r3, #16]
 8001c3a:	061b      	lsls	r3, r3, #24
 8001c3c:	497b      	ldr	r1, [pc, #492]	; (8001e2c <HAL_RCC_OscConfig+0x570>)
 8001c3e:	4313      	orrs	r3, r2
 8001c40:	604b      	str	r3, [r1, #4]
 8001c42:	e018      	b.n	8001c76 <HAL_RCC_OscConfig+0x3ba>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001c44:	4b79      	ldr	r3, [pc, #484]	; (8001e2c <HAL_RCC_OscConfig+0x570>)
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	4a78      	ldr	r2, [pc, #480]	; (8001e2c <HAL_RCC_OscConfig+0x570>)
 8001c4a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001c4e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c50:	f7fe fd02 	bl	8000658 <HAL_GetTick>
 8001c54:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001c56:	e008      	b.n	8001c6a <HAL_RCC_OscConfig+0x3ae>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001c58:	f7fe fcfe 	bl	8000658 <HAL_GetTick>
 8001c5c:	4602      	mov	r2, r0
 8001c5e:	693b      	ldr	r3, [r7, #16]
 8001c60:	1ad3      	subs	r3, r2, r3
 8001c62:	2b02      	cmp	r3, #2
 8001c64:	d901      	bls.n	8001c6a <HAL_RCC_OscConfig+0x3ae>
          {
            return HAL_TIMEOUT;
 8001c66:	2303      	movs	r3, #3
 8001c68:	e1cf      	b.n	800200a <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001c6a:	4b70      	ldr	r3, [pc, #448]	; (8001e2c <HAL_RCC_OscConfig+0x570>)
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d1f0      	bne.n	8001c58 <HAL_RCC_OscConfig+0x39c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	f003 0308 	and.w	r3, r3, #8
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d03c      	beq.n	8001cfc <HAL_RCC_OscConfig+0x440>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	695b      	ldr	r3, [r3, #20]
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d01c      	beq.n	8001cc4 <HAL_RCC_OscConfig+0x408>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001c8a:	4b68      	ldr	r3, [pc, #416]	; (8001e2c <HAL_RCC_OscConfig+0x570>)
 8001c8c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001c90:	4a66      	ldr	r2, [pc, #408]	; (8001e2c <HAL_RCC_OscConfig+0x570>)
 8001c92:	f043 0301 	orr.w	r3, r3, #1
 8001c96:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c9a:	f7fe fcdd 	bl	8000658 <HAL_GetTick>
 8001c9e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001ca0:	e008      	b.n	8001cb4 <HAL_RCC_OscConfig+0x3f8>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001ca2:	f7fe fcd9 	bl	8000658 <HAL_GetTick>
 8001ca6:	4602      	mov	r2, r0
 8001ca8:	693b      	ldr	r3, [r7, #16]
 8001caa:	1ad3      	subs	r3, r2, r3
 8001cac:	2b02      	cmp	r3, #2
 8001cae:	d901      	bls.n	8001cb4 <HAL_RCC_OscConfig+0x3f8>
        {
          return HAL_TIMEOUT;
 8001cb0:	2303      	movs	r3, #3
 8001cb2:	e1aa      	b.n	800200a <HAL_RCC_OscConfig+0x74e>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001cb4:	4b5d      	ldr	r3, [pc, #372]	; (8001e2c <HAL_RCC_OscConfig+0x570>)
 8001cb6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001cba:	f003 0302 	and.w	r3, r3, #2
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d0ef      	beq.n	8001ca2 <HAL_RCC_OscConfig+0x3e6>
 8001cc2:	e01b      	b.n	8001cfc <HAL_RCC_OscConfig+0x440>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001cc4:	4b59      	ldr	r3, [pc, #356]	; (8001e2c <HAL_RCC_OscConfig+0x570>)
 8001cc6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001cca:	4a58      	ldr	r2, [pc, #352]	; (8001e2c <HAL_RCC_OscConfig+0x570>)
 8001ccc:	f023 0301 	bic.w	r3, r3, #1
 8001cd0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001cd4:	f7fe fcc0 	bl	8000658 <HAL_GetTick>
 8001cd8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001cda:	e008      	b.n	8001cee <HAL_RCC_OscConfig+0x432>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001cdc:	f7fe fcbc 	bl	8000658 <HAL_GetTick>
 8001ce0:	4602      	mov	r2, r0
 8001ce2:	693b      	ldr	r3, [r7, #16]
 8001ce4:	1ad3      	subs	r3, r2, r3
 8001ce6:	2b02      	cmp	r3, #2
 8001ce8:	d901      	bls.n	8001cee <HAL_RCC_OscConfig+0x432>
        {
          return HAL_TIMEOUT;
 8001cea:	2303      	movs	r3, #3
 8001cec:	e18d      	b.n	800200a <HAL_RCC_OscConfig+0x74e>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001cee:	4b4f      	ldr	r3, [pc, #316]	; (8001e2c <HAL_RCC_OscConfig+0x570>)
 8001cf0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001cf4:	f003 0302 	and.w	r3, r3, #2
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d1ef      	bne.n	8001cdc <HAL_RCC_OscConfig+0x420>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	f003 0304 	and.w	r3, r3, #4
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	f000 80a5 	beq.w	8001e54 <HAL_RCC_OscConfig+0x598>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001d0a:	2300      	movs	r3, #0
 8001d0c:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001d0e:	4b47      	ldr	r3, [pc, #284]	; (8001e2c <HAL_RCC_OscConfig+0x570>)
 8001d10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d12:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d10d      	bne.n	8001d36 <HAL_RCC_OscConfig+0x47a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001d1a:	4b44      	ldr	r3, [pc, #272]	; (8001e2c <HAL_RCC_OscConfig+0x570>)
 8001d1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d1e:	4a43      	ldr	r2, [pc, #268]	; (8001e2c <HAL_RCC_OscConfig+0x570>)
 8001d20:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d24:	6593      	str	r3, [r2, #88]	; 0x58
 8001d26:	4b41      	ldr	r3, [pc, #260]	; (8001e2c <HAL_RCC_OscConfig+0x570>)
 8001d28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d2a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d2e:	60bb      	str	r3, [r7, #8]
 8001d30:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001d32:	2301      	movs	r3, #1
 8001d34:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001d36:	4b3e      	ldr	r3, [pc, #248]	; (8001e30 <HAL_RCC_OscConfig+0x574>)
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d118      	bne.n	8001d74 <HAL_RCC_OscConfig+0x4b8>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001d42:	4b3b      	ldr	r3, [pc, #236]	; (8001e30 <HAL_RCC_OscConfig+0x574>)
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	4a3a      	ldr	r2, [pc, #232]	; (8001e30 <HAL_RCC_OscConfig+0x574>)
 8001d48:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d4c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001d4e:	f7fe fc83 	bl	8000658 <HAL_GetTick>
 8001d52:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001d54:	e008      	b.n	8001d68 <HAL_RCC_OscConfig+0x4ac>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001d56:	f7fe fc7f 	bl	8000658 <HAL_GetTick>
 8001d5a:	4602      	mov	r2, r0
 8001d5c:	693b      	ldr	r3, [r7, #16]
 8001d5e:	1ad3      	subs	r3, r2, r3
 8001d60:	2b02      	cmp	r3, #2
 8001d62:	d901      	bls.n	8001d68 <HAL_RCC_OscConfig+0x4ac>
        {
          return HAL_TIMEOUT;
 8001d64:	2303      	movs	r3, #3
 8001d66:	e150      	b.n	800200a <HAL_RCC_OscConfig+0x74e>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001d68:	4b31      	ldr	r3, [pc, #196]	; (8001e30 <HAL_RCC_OscConfig+0x574>)
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d0f0      	beq.n	8001d56 <HAL_RCC_OscConfig+0x49a>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	689b      	ldr	r3, [r3, #8]
 8001d78:	2b01      	cmp	r3, #1
 8001d7a:	d108      	bne.n	8001d8e <HAL_RCC_OscConfig+0x4d2>
 8001d7c:	4b2b      	ldr	r3, [pc, #172]	; (8001e2c <HAL_RCC_OscConfig+0x570>)
 8001d7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d82:	4a2a      	ldr	r2, [pc, #168]	; (8001e2c <HAL_RCC_OscConfig+0x570>)
 8001d84:	f043 0301 	orr.w	r3, r3, #1
 8001d88:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001d8c:	e024      	b.n	8001dd8 <HAL_RCC_OscConfig+0x51c>
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	689b      	ldr	r3, [r3, #8]
 8001d92:	2b05      	cmp	r3, #5
 8001d94:	d110      	bne.n	8001db8 <HAL_RCC_OscConfig+0x4fc>
 8001d96:	4b25      	ldr	r3, [pc, #148]	; (8001e2c <HAL_RCC_OscConfig+0x570>)
 8001d98:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d9c:	4a23      	ldr	r2, [pc, #140]	; (8001e2c <HAL_RCC_OscConfig+0x570>)
 8001d9e:	f043 0304 	orr.w	r3, r3, #4
 8001da2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001da6:	4b21      	ldr	r3, [pc, #132]	; (8001e2c <HAL_RCC_OscConfig+0x570>)
 8001da8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001dac:	4a1f      	ldr	r2, [pc, #124]	; (8001e2c <HAL_RCC_OscConfig+0x570>)
 8001dae:	f043 0301 	orr.w	r3, r3, #1
 8001db2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001db6:	e00f      	b.n	8001dd8 <HAL_RCC_OscConfig+0x51c>
 8001db8:	4b1c      	ldr	r3, [pc, #112]	; (8001e2c <HAL_RCC_OscConfig+0x570>)
 8001dba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001dbe:	4a1b      	ldr	r2, [pc, #108]	; (8001e2c <HAL_RCC_OscConfig+0x570>)
 8001dc0:	f023 0301 	bic.w	r3, r3, #1
 8001dc4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001dc8:	4b18      	ldr	r3, [pc, #96]	; (8001e2c <HAL_RCC_OscConfig+0x570>)
 8001dca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001dce:	4a17      	ldr	r2, [pc, #92]	; (8001e2c <HAL_RCC_OscConfig+0x570>)
 8001dd0:	f023 0304 	bic.w	r3, r3, #4
 8001dd4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	689b      	ldr	r3, [r3, #8]
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d016      	beq.n	8001e0e <HAL_RCC_OscConfig+0x552>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001de0:	f7fe fc3a 	bl	8000658 <HAL_GetTick>
 8001de4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001de6:	e00a      	b.n	8001dfe <HAL_RCC_OscConfig+0x542>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001de8:	f7fe fc36 	bl	8000658 <HAL_GetTick>
 8001dec:	4602      	mov	r2, r0
 8001dee:	693b      	ldr	r3, [r7, #16]
 8001df0:	1ad3      	subs	r3, r2, r3
 8001df2:	f241 3288 	movw	r2, #5000	; 0x1388
 8001df6:	4293      	cmp	r3, r2
 8001df8:	d901      	bls.n	8001dfe <HAL_RCC_OscConfig+0x542>
        {
          return HAL_TIMEOUT;
 8001dfa:	2303      	movs	r3, #3
 8001dfc:	e105      	b.n	800200a <HAL_RCC_OscConfig+0x74e>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001dfe:	4b0b      	ldr	r3, [pc, #44]	; (8001e2c <HAL_RCC_OscConfig+0x570>)
 8001e00:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e04:	f003 0302 	and.w	r3, r3, #2
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d0ed      	beq.n	8001de8 <HAL_RCC_OscConfig+0x52c>
 8001e0c:	e019      	b.n	8001e42 <HAL_RCC_OscConfig+0x586>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e0e:	f7fe fc23 	bl	8000658 <HAL_GetTick>
 8001e12:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001e14:	e00e      	b.n	8001e34 <HAL_RCC_OscConfig+0x578>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e16:	f7fe fc1f 	bl	8000658 <HAL_GetTick>
 8001e1a:	4602      	mov	r2, r0
 8001e1c:	693b      	ldr	r3, [r7, #16]
 8001e1e:	1ad3      	subs	r3, r2, r3
 8001e20:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e24:	4293      	cmp	r3, r2
 8001e26:	d905      	bls.n	8001e34 <HAL_RCC_OscConfig+0x578>
        {
          return HAL_TIMEOUT;
 8001e28:	2303      	movs	r3, #3
 8001e2a:	e0ee      	b.n	800200a <HAL_RCC_OscConfig+0x74e>
 8001e2c:	40021000 	.word	0x40021000
 8001e30:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001e34:	4b77      	ldr	r3, [pc, #476]	; (8002014 <HAL_RCC_OscConfig+0x758>)
 8001e36:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e3a:	f003 0302 	and.w	r3, r3, #2
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d1e9      	bne.n	8001e16 <HAL_RCC_OscConfig+0x55a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001e42:	7ffb      	ldrb	r3, [r7, #31]
 8001e44:	2b01      	cmp	r3, #1
 8001e46:	d105      	bne.n	8001e54 <HAL_RCC_OscConfig+0x598>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001e48:	4b72      	ldr	r3, [pc, #456]	; (8002014 <HAL_RCC_OscConfig+0x758>)
 8001e4a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e4c:	4a71      	ldr	r2, [pc, #452]	; (8002014 <HAL_RCC_OscConfig+0x758>)
 8001e4e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001e52:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	f000 80d5 	beq.w	8002008 <HAL_RCC_OscConfig+0x74c>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001e5e:	69bb      	ldr	r3, [r7, #24]
 8001e60:	2b0c      	cmp	r3, #12
 8001e62:	f000 808e 	beq.w	8001f82 <HAL_RCC_OscConfig+0x6c6>
    {
      if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e6a:	2b02      	cmp	r3, #2
 8001e6c:	d15b      	bne.n	8001f26 <HAL_RCC_OscConfig+0x66a>
#endif /* RCC_PLLP_SUPPORT */
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e6e:	4b69      	ldr	r3, [pc, #420]	; (8002014 <HAL_RCC_OscConfig+0x758>)
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	4a68      	ldr	r2, [pc, #416]	; (8002014 <HAL_RCC_OscConfig+0x758>)
 8001e74:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001e78:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e7a:	f7fe fbed 	bl	8000658 <HAL_GetTick>
 8001e7e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001e80:	e008      	b.n	8001e94 <HAL_RCC_OscConfig+0x5d8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e82:	f7fe fbe9 	bl	8000658 <HAL_GetTick>
 8001e86:	4602      	mov	r2, r0
 8001e88:	693b      	ldr	r3, [r7, #16]
 8001e8a:	1ad3      	subs	r3, r2, r3
 8001e8c:	2b02      	cmp	r3, #2
 8001e8e:	d901      	bls.n	8001e94 <HAL_RCC_OscConfig+0x5d8>
          {
            return HAL_TIMEOUT;
 8001e90:	2303      	movs	r3, #3
 8001e92:	e0ba      	b.n	800200a <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001e94:	4b5f      	ldr	r3, [pc, #380]	; (8002014 <HAL_RCC_OscConfig+0x758>)
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d1f0      	bne.n	8001e82 <HAL_RCC_OscConfig+0x5c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001ea0:	4b5c      	ldr	r3, [pc, #368]	; (8002014 <HAL_RCC_OscConfig+0x758>)
 8001ea2:	68da      	ldr	r2, [r3, #12]
 8001ea4:	4b5c      	ldr	r3, [pc, #368]	; (8002018 <HAL_RCC_OscConfig+0x75c>)
 8001ea6:	4013      	ands	r3, r2
 8001ea8:	687a      	ldr	r2, [r7, #4]
 8001eaa:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8001eac:	687a      	ldr	r2, [r7, #4]
 8001eae:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001eb0:	3a01      	subs	r2, #1
 8001eb2:	0112      	lsls	r2, r2, #4
 8001eb4:	4311      	orrs	r1, r2
 8001eb6:	687a      	ldr	r2, [r7, #4]
 8001eb8:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001eba:	0212      	lsls	r2, r2, #8
 8001ebc:	4311      	orrs	r1, r2
 8001ebe:	687a      	ldr	r2, [r7, #4]
 8001ec0:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001ec2:	0852      	lsrs	r2, r2, #1
 8001ec4:	3a01      	subs	r2, #1
 8001ec6:	0552      	lsls	r2, r2, #21
 8001ec8:	4311      	orrs	r1, r2
 8001eca:	687a      	ldr	r2, [r7, #4]
 8001ecc:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001ece:	0852      	lsrs	r2, r2, #1
 8001ed0:	3a01      	subs	r2, #1
 8001ed2:	0652      	lsls	r2, r2, #25
 8001ed4:	4311      	orrs	r1, r2
 8001ed6:	687a      	ldr	r2, [r7, #4]
 8001ed8:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001eda:	0912      	lsrs	r2, r2, #4
 8001edc:	0452      	lsls	r2, r2, #17
 8001ede:	430a      	orrs	r2, r1
 8001ee0:	494c      	ldr	r1, [pc, #304]	; (8002014 <HAL_RCC_OscConfig+0x758>)
 8001ee2:	4313      	orrs	r3, r2
 8001ee4:	60cb      	str	r3, [r1, #12]
#endif
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001ee6:	4b4b      	ldr	r3, [pc, #300]	; (8002014 <HAL_RCC_OscConfig+0x758>)
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	4a4a      	ldr	r2, [pc, #296]	; (8002014 <HAL_RCC_OscConfig+0x758>)
 8001eec:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001ef0:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001ef2:	4b48      	ldr	r3, [pc, #288]	; (8002014 <HAL_RCC_OscConfig+0x758>)
 8001ef4:	68db      	ldr	r3, [r3, #12]
 8001ef6:	4a47      	ldr	r2, [pc, #284]	; (8002014 <HAL_RCC_OscConfig+0x758>)
 8001ef8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001efc:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001efe:	f7fe fbab 	bl	8000658 <HAL_GetTick>
 8001f02:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001f04:	e008      	b.n	8001f18 <HAL_RCC_OscConfig+0x65c>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f06:	f7fe fba7 	bl	8000658 <HAL_GetTick>
 8001f0a:	4602      	mov	r2, r0
 8001f0c:	693b      	ldr	r3, [r7, #16]
 8001f0e:	1ad3      	subs	r3, r2, r3
 8001f10:	2b02      	cmp	r3, #2
 8001f12:	d901      	bls.n	8001f18 <HAL_RCC_OscConfig+0x65c>
          {
            return HAL_TIMEOUT;
 8001f14:	2303      	movs	r3, #3
 8001f16:	e078      	b.n	800200a <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001f18:	4b3e      	ldr	r3, [pc, #248]	; (8002014 <HAL_RCC_OscConfig+0x758>)
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d0f0      	beq.n	8001f06 <HAL_RCC_OscConfig+0x64a>
 8001f24:	e070      	b.n	8002008 <HAL_RCC_OscConfig+0x74c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f26:	4b3b      	ldr	r3, [pc, #236]	; (8002014 <HAL_RCC_OscConfig+0x758>)
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	4a3a      	ldr	r2, [pc, #232]	; (8002014 <HAL_RCC_OscConfig+0x758>)
 8001f2c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001f30:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8001f32:	4b38      	ldr	r3, [pc, #224]	; (8002014 <HAL_RCC_OscConfig+0x758>)
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d105      	bne.n	8001f4a <HAL_RCC_OscConfig+0x68e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8001f3e:	4b35      	ldr	r3, [pc, #212]	; (8002014 <HAL_RCC_OscConfig+0x758>)
 8001f40:	68db      	ldr	r3, [r3, #12]
 8001f42:	4a34      	ldr	r2, [pc, #208]	; (8002014 <HAL_RCC_OscConfig+0x758>)
 8001f44:	f023 0303 	bic.w	r3, r3, #3
 8001f48:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8001f4a:	4b32      	ldr	r3, [pc, #200]	; (8002014 <HAL_RCC_OscConfig+0x758>)
 8001f4c:	68db      	ldr	r3, [r3, #12]
 8001f4e:	4a31      	ldr	r2, [pc, #196]	; (8002014 <HAL_RCC_OscConfig+0x758>)
 8001f50:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8001f54:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001f58:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f5a:	f7fe fb7d 	bl	8000658 <HAL_GetTick>
 8001f5e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001f60:	e008      	b.n	8001f74 <HAL_RCC_OscConfig+0x6b8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f62:	f7fe fb79 	bl	8000658 <HAL_GetTick>
 8001f66:	4602      	mov	r2, r0
 8001f68:	693b      	ldr	r3, [r7, #16]
 8001f6a:	1ad3      	subs	r3, r2, r3
 8001f6c:	2b02      	cmp	r3, #2
 8001f6e:	d901      	bls.n	8001f74 <HAL_RCC_OscConfig+0x6b8>
          {
            return HAL_TIMEOUT;
 8001f70:	2303      	movs	r3, #3
 8001f72:	e04a      	b.n	800200a <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001f74:	4b27      	ldr	r3, [pc, #156]	; (8002014 <HAL_RCC_OscConfig+0x758>)
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d1f0      	bne.n	8001f62 <HAL_RCC_OscConfig+0x6a6>
 8001f80:	e042      	b.n	8002008 <HAL_RCC_OscConfig+0x74c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f86:	2b01      	cmp	r3, #1
 8001f88:	d101      	bne.n	8001f8e <HAL_RCC_OscConfig+0x6d2>
      {
        return HAL_ERROR;
 8001f8a:	2301      	movs	r3, #1
 8001f8c:	e03d      	b.n	800200a <HAL_RCC_OscConfig+0x74e>
      }
      else
      {
        pll_config = RCC->PLLCFGR;
 8001f8e:	4b21      	ldr	r3, [pc, #132]	; (8002014 <HAL_RCC_OscConfig+0x758>)
 8001f90:	68db      	ldr	r3, [r3, #12]
 8001f92:	617b      	str	r3, [r7, #20]
        /* Do not return HAL_ERROR if request repeats the current configuration */
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f94:	697b      	ldr	r3, [r7, #20]
 8001f96:	f003 0203 	and.w	r2, r3, #3
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f9e:	429a      	cmp	r2, r3
 8001fa0:	d130      	bne.n	8002004 <HAL_RCC_OscConfig+0x748>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001fa2:	697b      	ldr	r3, [r7, #20]
 8001fa4:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fac:	3b01      	subs	r3, #1
 8001fae:	011b      	lsls	r3, r3, #4
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001fb0:	429a      	cmp	r2, r3
 8001fb2:	d127      	bne.n	8002004 <HAL_RCC_OscConfig+0x748>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001fb4:	697b      	ldr	r3, [r7, #20]
 8001fb6:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001fbe:	021b      	lsls	r3, r3, #8
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001fc0:	429a      	cmp	r2, r3
 8001fc2:	d11f      	bne.n	8002004 <HAL_RCC_OscConfig+0x748>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001fc4:	697b      	ldr	r3, [r7, #20]
 8001fc6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fca:	687a      	ldr	r2, [r7, #4]
 8001fcc:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001fce:	2a07      	cmp	r2, #7
 8001fd0:	bf14      	ite	ne
 8001fd2:	2201      	movne	r2, #1
 8001fd4:	2200      	moveq	r2, #0
 8001fd6:	b2d2      	uxtb	r2, r2
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001fd8:	4293      	cmp	r3, r2
 8001fda:	d113      	bne.n	8002004 <HAL_RCC_OscConfig+0x748>
#endif
#endif
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001fdc:	697b      	ldr	r3, [r7, #20]
 8001fde:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001fe6:	085b      	lsrs	r3, r3, #1
 8001fe8:	3b01      	subs	r3, #1
 8001fea:	055b      	lsls	r3, r3, #21
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001fec:	429a      	cmp	r2, r3
 8001fee:	d109      	bne.n	8002004 <HAL_RCC_OscConfig+0x748>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001ff0:	697b      	ldr	r3, [r7, #20]
 8001ff2:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ffa:	085b      	lsrs	r3, r3, #1
 8001ffc:	3b01      	subs	r3, #1
 8001ffe:	065b      	lsls	r3, r3, #25
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002000:	429a      	cmp	r2, r3
 8002002:	d001      	beq.n	8002008 <HAL_RCC_OscConfig+0x74c>
        {
          return HAL_ERROR;
 8002004:	2301      	movs	r3, #1
 8002006:	e000      	b.n	800200a <HAL_RCC_OscConfig+0x74e>
        }
      }
    }
  }
  return HAL_OK;
 8002008:	2300      	movs	r3, #0
}
 800200a:	4618      	mov	r0, r3
 800200c:	3720      	adds	r7, #32
 800200e:	46bd      	mov	sp, r7
 8002010:	bd80      	pop	{r7, pc}
 8002012:	bf00      	nop
 8002014:	40021000 	.word	0x40021000
 8002018:	f99d808c 	.word	0xf99d808c

0800201c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800201c:	b580      	push	{r7, lr}
 800201e:	b084      	sub	sp, #16
 8002020:	af00      	add	r7, sp, #0
 8002022:	6078      	str	r0, [r7, #4]
 8002024:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	2b00      	cmp	r3, #0
 800202a:	d101      	bne.n	8002030 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800202c:	2301      	movs	r3, #1
 800202e:	e0c8      	b.n	80021c2 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002030:	4b66      	ldr	r3, [pc, #408]	; (80021cc <HAL_RCC_ClockConfig+0x1b0>)
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	f003 0307 	and.w	r3, r3, #7
 8002038:	683a      	ldr	r2, [r7, #0]
 800203a:	429a      	cmp	r2, r3
 800203c:	d910      	bls.n	8002060 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800203e:	4b63      	ldr	r3, [pc, #396]	; (80021cc <HAL_RCC_ClockConfig+0x1b0>)
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	f023 0207 	bic.w	r2, r3, #7
 8002046:	4961      	ldr	r1, [pc, #388]	; (80021cc <HAL_RCC_ClockConfig+0x1b0>)
 8002048:	683b      	ldr	r3, [r7, #0]
 800204a:	4313      	orrs	r3, r2
 800204c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800204e:	4b5f      	ldr	r3, [pc, #380]	; (80021cc <HAL_RCC_ClockConfig+0x1b0>)
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	f003 0307 	and.w	r3, r3, #7
 8002056:	683a      	ldr	r2, [r7, #0]
 8002058:	429a      	cmp	r2, r3
 800205a:	d001      	beq.n	8002060 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800205c:	2301      	movs	r3, #1
 800205e:	e0b0      	b.n	80021c2 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	f003 0301 	and.w	r3, r3, #1
 8002068:	2b00      	cmp	r3, #0
 800206a:	d04c      	beq.n	8002106 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	685b      	ldr	r3, [r3, #4]
 8002070:	2b03      	cmp	r3, #3
 8002072:	d107      	bne.n	8002084 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002074:	4b56      	ldr	r3, [pc, #344]	; (80021d0 <HAL_RCC_ClockConfig+0x1b4>)
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800207c:	2b00      	cmp	r3, #0
 800207e:	d121      	bne.n	80020c4 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8002080:	2301      	movs	r3, #1
 8002082:	e09e      	b.n	80021c2 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	685b      	ldr	r3, [r3, #4]
 8002088:	2b02      	cmp	r3, #2
 800208a:	d107      	bne.n	800209c <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800208c:	4b50      	ldr	r3, [pc, #320]	; (80021d0 <HAL_RCC_ClockConfig+0x1b4>)
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002094:	2b00      	cmp	r3, #0
 8002096:	d115      	bne.n	80020c4 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002098:	2301      	movs	r3, #1
 800209a:	e092      	b.n	80021c2 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	685b      	ldr	r3, [r3, #4]
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d107      	bne.n	80020b4 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80020a4:	4b4a      	ldr	r3, [pc, #296]	; (80021d0 <HAL_RCC_ClockConfig+0x1b4>)
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	f003 0302 	and.w	r3, r3, #2
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d109      	bne.n	80020c4 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80020b0:	2301      	movs	r3, #1
 80020b2:	e086      	b.n	80021c2 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80020b4:	4b46      	ldr	r3, [pc, #280]	; (80021d0 <HAL_RCC_ClockConfig+0x1b4>)
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d101      	bne.n	80020c4 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80020c0:	2301      	movs	r3, #1
 80020c2:	e07e      	b.n	80021c2 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80020c4:	4b42      	ldr	r3, [pc, #264]	; (80021d0 <HAL_RCC_ClockConfig+0x1b4>)
 80020c6:	689b      	ldr	r3, [r3, #8]
 80020c8:	f023 0203 	bic.w	r2, r3, #3
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	685b      	ldr	r3, [r3, #4]
 80020d0:	493f      	ldr	r1, [pc, #252]	; (80021d0 <HAL_RCC_ClockConfig+0x1b4>)
 80020d2:	4313      	orrs	r3, r2
 80020d4:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80020d6:	f7fe fabf 	bl	8000658 <HAL_GetTick>
 80020da:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80020dc:	e00a      	b.n	80020f4 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80020de:	f7fe fabb 	bl	8000658 <HAL_GetTick>
 80020e2:	4602      	mov	r2, r0
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	1ad3      	subs	r3, r2, r3
 80020e8:	f241 3288 	movw	r2, #5000	; 0x1388
 80020ec:	4293      	cmp	r3, r2
 80020ee:	d901      	bls.n	80020f4 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 80020f0:	2303      	movs	r3, #3
 80020f2:	e066      	b.n	80021c2 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80020f4:	4b36      	ldr	r3, [pc, #216]	; (80021d0 <HAL_RCC_ClockConfig+0x1b4>)
 80020f6:	689b      	ldr	r3, [r3, #8]
 80020f8:	f003 020c 	and.w	r2, r3, #12
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	685b      	ldr	r3, [r3, #4]
 8002100:	009b      	lsls	r3, r3, #2
 8002102:	429a      	cmp	r2, r3
 8002104:	d1eb      	bne.n	80020de <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	f003 0302 	and.w	r3, r3, #2
 800210e:	2b00      	cmp	r3, #0
 8002110:	d008      	beq.n	8002124 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002112:	4b2f      	ldr	r3, [pc, #188]	; (80021d0 <HAL_RCC_ClockConfig+0x1b4>)
 8002114:	689b      	ldr	r3, [r3, #8]
 8002116:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	689b      	ldr	r3, [r3, #8]
 800211e:	492c      	ldr	r1, [pc, #176]	; (80021d0 <HAL_RCC_ClockConfig+0x1b4>)
 8002120:	4313      	orrs	r3, r2
 8002122:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002124:	4b29      	ldr	r3, [pc, #164]	; (80021cc <HAL_RCC_ClockConfig+0x1b0>)
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	f003 0307 	and.w	r3, r3, #7
 800212c:	683a      	ldr	r2, [r7, #0]
 800212e:	429a      	cmp	r2, r3
 8002130:	d210      	bcs.n	8002154 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002132:	4b26      	ldr	r3, [pc, #152]	; (80021cc <HAL_RCC_ClockConfig+0x1b0>)
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	f023 0207 	bic.w	r2, r3, #7
 800213a:	4924      	ldr	r1, [pc, #144]	; (80021cc <HAL_RCC_ClockConfig+0x1b0>)
 800213c:	683b      	ldr	r3, [r7, #0]
 800213e:	4313      	orrs	r3, r2
 8002140:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002142:	4b22      	ldr	r3, [pc, #136]	; (80021cc <HAL_RCC_ClockConfig+0x1b0>)
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	f003 0307 	and.w	r3, r3, #7
 800214a:	683a      	ldr	r2, [r7, #0]
 800214c:	429a      	cmp	r2, r3
 800214e:	d001      	beq.n	8002154 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8002150:	2301      	movs	r3, #1
 8002152:	e036      	b.n	80021c2 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	f003 0304 	and.w	r3, r3, #4
 800215c:	2b00      	cmp	r3, #0
 800215e:	d008      	beq.n	8002172 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002160:	4b1b      	ldr	r3, [pc, #108]	; (80021d0 <HAL_RCC_ClockConfig+0x1b4>)
 8002162:	689b      	ldr	r3, [r3, #8]
 8002164:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	68db      	ldr	r3, [r3, #12]
 800216c:	4918      	ldr	r1, [pc, #96]	; (80021d0 <HAL_RCC_ClockConfig+0x1b4>)
 800216e:	4313      	orrs	r3, r2
 8002170:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	f003 0308 	and.w	r3, r3, #8
 800217a:	2b00      	cmp	r3, #0
 800217c:	d009      	beq.n	8002192 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800217e:	4b14      	ldr	r3, [pc, #80]	; (80021d0 <HAL_RCC_ClockConfig+0x1b4>)
 8002180:	689b      	ldr	r3, [r3, #8]
 8002182:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	691b      	ldr	r3, [r3, #16]
 800218a:	00db      	lsls	r3, r3, #3
 800218c:	4910      	ldr	r1, [pc, #64]	; (80021d0 <HAL_RCC_ClockConfig+0x1b4>)
 800218e:	4313      	orrs	r3, r2
 8002190:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002192:	f000 f825 	bl	80021e0 <HAL_RCC_GetSysClockFreq>
 8002196:	4601      	mov	r1, r0
 8002198:	4b0d      	ldr	r3, [pc, #52]	; (80021d0 <HAL_RCC_ClockConfig+0x1b4>)
 800219a:	689b      	ldr	r3, [r3, #8]
 800219c:	091b      	lsrs	r3, r3, #4
 800219e:	f003 030f 	and.w	r3, r3, #15
 80021a2:	4a0c      	ldr	r2, [pc, #48]	; (80021d4 <HAL_RCC_ClockConfig+0x1b8>)
 80021a4:	5cd3      	ldrb	r3, [r2, r3]
 80021a6:	f003 031f 	and.w	r3, r3, #31
 80021aa:	fa21 f303 	lsr.w	r3, r1, r3
 80021ae:	4a0a      	ldr	r2, [pc, #40]	; (80021d8 <HAL_RCC_ClockConfig+0x1bc>)
 80021b0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80021b2:	4b0a      	ldr	r3, [pc, #40]	; (80021dc <HAL_RCC_ClockConfig+0x1c0>)
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	4618      	mov	r0, r3
 80021b8:	f7fe fa02 	bl	80005c0 <HAL_InitTick>
 80021bc:	4603      	mov	r3, r0
 80021be:	72fb      	strb	r3, [r7, #11]

  return status;
 80021c0:	7afb      	ldrb	r3, [r7, #11]
}
 80021c2:	4618      	mov	r0, r3
 80021c4:	3710      	adds	r7, #16
 80021c6:	46bd      	mov	sp, r7
 80021c8:	bd80      	pop	{r7, pc}
 80021ca:	bf00      	nop
 80021cc:	40022000 	.word	0x40022000
 80021d0:	40021000 	.word	0x40021000
 80021d4:	08004b2c 	.word	0x08004b2c
 80021d8:	20000008 	.word	0x20000008
 80021dc:	20000000 	.word	0x20000000

080021e0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80021e0:	b480      	push	{r7}
 80021e2:	b089      	sub	sp, #36	; 0x24
 80021e4:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80021e6:	2300      	movs	r3, #0
 80021e8:	61fb      	str	r3, [r7, #28]
 80021ea:	2300      	movs	r3, #0
 80021ec:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80021ee:	4b3d      	ldr	r3, [pc, #244]	; (80022e4 <HAL_RCC_GetSysClockFreq+0x104>)
 80021f0:	689b      	ldr	r3, [r3, #8]
 80021f2:	f003 030c 	and.w	r3, r3, #12
 80021f6:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80021f8:	4b3a      	ldr	r3, [pc, #232]	; (80022e4 <HAL_RCC_GetSysClockFreq+0x104>)
 80021fa:	68db      	ldr	r3, [r3, #12]
 80021fc:	f003 0303 	and.w	r3, r3, #3
 8002200:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002202:	693b      	ldr	r3, [r7, #16]
 8002204:	2b00      	cmp	r3, #0
 8002206:	d005      	beq.n	8002214 <HAL_RCC_GetSysClockFreq+0x34>
 8002208:	693b      	ldr	r3, [r7, #16]
 800220a:	2b0c      	cmp	r3, #12
 800220c:	d121      	bne.n	8002252 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	2b01      	cmp	r3, #1
 8002212:	d11e      	bne.n	8002252 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002214:	4b33      	ldr	r3, [pc, #204]	; (80022e4 <HAL_RCC_GetSysClockFreq+0x104>)
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	f003 0308 	and.w	r3, r3, #8
 800221c:	2b00      	cmp	r3, #0
 800221e:	d107      	bne.n	8002230 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002220:	4b30      	ldr	r3, [pc, #192]	; (80022e4 <HAL_RCC_GetSysClockFreq+0x104>)
 8002222:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002226:	0a1b      	lsrs	r3, r3, #8
 8002228:	f003 030f 	and.w	r3, r3, #15
 800222c:	61fb      	str	r3, [r7, #28]
 800222e:	e005      	b.n	800223c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002230:	4b2c      	ldr	r3, [pc, #176]	; (80022e4 <HAL_RCC_GetSysClockFreq+0x104>)
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	091b      	lsrs	r3, r3, #4
 8002236:	f003 030f 	and.w	r3, r3, #15
 800223a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800223c:	4a2a      	ldr	r2, [pc, #168]	; (80022e8 <HAL_RCC_GetSysClockFreq+0x108>)
 800223e:	69fb      	ldr	r3, [r7, #28]
 8002240:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002244:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002246:	693b      	ldr	r3, [r7, #16]
 8002248:	2b00      	cmp	r3, #0
 800224a:	d10d      	bne.n	8002268 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800224c:	69fb      	ldr	r3, [r7, #28]
 800224e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002250:	e00a      	b.n	8002268 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002252:	693b      	ldr	r3, [r7, #16]
 8002254:	2b04      	cmp	r3, #4
 8002256:	d102      	bne.n	800225e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002258:	4b24      	ldr	r3, [pc, #144]	; (80022ec <HAL_RCC_GetSysClockFreq+0x10c>)
 800225a:	61bb      	str	r3, [r7, #24]
 800225c:	e004      	b.n	8002268 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800225e:	693b      	ldr	r3, [r7, #16]
 8002260:	2b08      	cmp	r3, #8
 8002262:	d101      	bne.n	8002268 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002264:	4b22      	ldr	r3, [pc, #136]	; (80022f0 <HAL_RCC_GetSysClockFreq+0x110>)
 8002266:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002268:	693b      	ldr	r3, [r7, #16]
 800226a:	2b0c      	cmp	r3, #12
 800226c:	d133      	bne.n	80022d6 <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800226e:	4b1d      	ldr	r3, [pc, #116]	; (80022e4 <HAL_RCC_GetSysClockFreq+0x104>)
 8002270:	68db      	ldr	r3, [r3, #12]
 8002272:	f003 0303 	and.w	r3, r3, #3
 8002276:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002278:	68bb      	ldr	r3, [r7, #8]
 800227a:	2b02      	cmp	r3, #2
 800227c:	d002      	beq.n	8002284 <HAL_RCC_GetSysClockFreq+0xa4>
 800227e:	2b03      	cmp	r3, #3
 8002280:	d003      	beq.n	800228a <HAL_RCC_GetSysClockFreq+0xaa>
 8002282:	e005      	b.n	8002290 <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002284:	4b19      	ldr	r3, [pc, #100]	; (80022ec <HAL_RCC_GetSysClockFreq+0x10c>)
 8002286:	617b      	str	r3, [r7, #20]
      break;
 8002288:	e005      	b.n	8002296 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800228a:	4b19      	ldr	r3, [pc, #100]	; (80022f0 <HAL_RCC_GetSysClockFreq+0x110>)
 800228c:	617b      	str	r3, [r7, #20]
      break;
 800228e:	e002      	b.n	8002296 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002290:	69fb      	ldr	r3, [r7, #28]
 8002292:	617b      	str	r3, [r7, #20]
      break;
 8002294:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002296:	4b13      	ldr	r3, [pc, #76]	; (80022e4 <HAL_RCC_GetSysClockFreq+0x104>)
 8002298:	68db      	ldr	r3, [r3, #12]
 800229a:	091b      	lsrs	r3, r3, #4
 800229c:	f003 0307 	and.w	r3, r3, #7
 80022a0:	3301      	adds	r3, #1
 80022a2:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80022a4:	4b0f      	ldr	r3, [pc, #60]	; (80022e4 <HAL_RCC_GetSysClockFreq+0x104>)
 80022a6:	68db      	ldr	r3, [r3, #12]
 80022a8:	0a1b      	lsrs	r3, r3, #8
 80022aa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80022ae:	697a      	ldr	r2, [r7, #20]
 80022b0:	fb02 f203 	mul.w	r2, r2, r3
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80022ba:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80022bc:	4b09      	ldr	r3, [pc, #36]	; (80022e4 <HAL_RCC_GetSysClockFreq+0x104>)
 80022be:	68db      	ldr	r3, [r3, #12]
 80022c0:	0e5b      	lsrs	r3, r3, #25
 80022c2:	f003 0303 	and.w	r3, r3, #3
 80022c6:	3301      	adds	r3, #1
 80022c8:	005b      	lsls	r3, r3, #1
 80022ca:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80022cc:	697a      	ldr	r2, [r7, #20]
 80022ce:	683b      	ldr	r3, [r7, #0]
 80022d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80022d4:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80022d6:	69bb      	ldr	r3, [r7, #24]
}
 80022d8:	4618      	mov	r0, r3
 80022da:	3724      	adds	r7, #36	; 0x24
 80022dc:	46bd      	mov	sp, r7
 80022de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e2:	4770      	bx	lr
 80022e4:	40021000 	.word	0x40021000
 80022e8:	08004b44 	.word	0x08004b44
 80022ec:	00f42400 	.word	0x00f42400
 80022f0:	007a1200 	.word	0x007a1200

080022f4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80022f4:	b480      	push	{r7}
 80022f6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80022f8:	4b03      	ldr	r3, [pc, #12]	; (8002308 <HAL_RCC_GetHCLKFreq+0x14>)
 80022fa:	681b      	ldr	r3, [r3, #0]
}
 80022fc:	4618      	mov	r0, r3
 80022fe:	46bd      	mov	sp, r7
 8002300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002304:	4770      	bx	lr
 8002306:	bf00      	nop
 8002308:	20000008 	.word	0x20000008

0800230c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800230c:	b580      	push	{r7, lr}
 800230e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002310:	f7ff fff0 	bl	80022f4 <HAL_RCC_GetHCLKFreq>
 8002314:	4601      	mov	r1, r0
 8002316:	4b06      	ldr	r3, [pc, #24]	; (8002330 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002318:	689b      	ldr	r3, [r3, #8]
 800231a:	0a1b      	lsrs	r3, r3, #8
 800231c:	f003 0307 	and.w	r3, r3, #7
 8002320:	4a04      	ldr	r2, [pc, #16]	; (8002334 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002322:	5cd3      	ldrb	r3, [r2, r3]
 8002324:	f003 031f 	and.w	r3, r3, #31
 8002328:	fa21 f303 	lsr.w	r3, r1, r3
}
 800232c:	4618      	mov	r0, r3
 800232e:	bd80      	pop	{r7, pc}
 8002330:	40021000 	.word	0x40021000
 8002334:	08004b3c 	.word	0x08004b3c

08002338 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002338:	b580      	push	{r7, lr}
 800233a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800233c:	f7ff ffda 	bl	80022f4 <HAL_RCC_GetHCLKFreq>
 8002340:	4601      	mov	r1, r0
 8002342:	4b06      	ldr	r3, [pc, #24]	; (800235c <HAL_RCC_GetPCLK2Freq+0x24>)
 8002344:	689b      	ldr	r3, [r3, #8]
 8002346:	0adb      	lsrs	r3, r3, #11
 8002348:	f003 0307 	and.w	r3, r3, #7
 800234c:	4a04      	ldr	r2, [pc, #16]	; (8002360 <HAL_RCC_GetPCLK2Freq+0x28>)
 800234e:	5cd3      	ldrb	r3, [r2, r3]
 8002350:	f003 031f 	and.w	r3, r3, #31
 8002354:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002358:	4618      	mov	r0, r3
 800235a:	bd80      	pop	{r7, pc}
 800235c:	40021000 	.word	0x40021000
 8002360:	08004b3c 	.word	0x08004b3c

08002364 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002364:	b580      	push	{r7, lr}
 8002366:	b086      	sub	sp, #24
 8002368:	af00      	add	r7, sp, #0
 800236a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800236c:	2300      	movs	r3, #0
 800236e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002370:	4b2a      	ldr	r3, [pc, #168]	; (800241c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002372:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002374:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002378:	2b00      	cmp	r3, #0
 800237a:	d003      	beq.n	8002384 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800237c:	f7ff fa3a 	bl	80017f4 <HAL_PWREx_GetVoltageRange>
 8002380:	6178      	str	r0, [r7, #20]
 8002382:	e014      	b.n	80023ae <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002384:	4b25      	ldr	r3, [pc, #148]	; (800241c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002386:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002388:	4a24      	ldr	r2, [pc, #144]	; (800241c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800238a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800238e:	6593      	str	r3, [r2, #88]	; 0x58
 8002390:	4b22      	ldr	r3, [pc, #136]	; (800241c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002392:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002394:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002398:	60fb      	str	r3, [r7, #12]
 800239a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800239c:	f7ff fa2a 	bl	80017f4 <HAL_PWREx_GetVoltageRange>
 80023a0:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80023a2:	4b1e      	ldr	r3, [pc, #120]	; (800241c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80023a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023a6:	4a1d      	ldr	r2, [pc, #116]	; (800241c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80023a8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80023ac:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80023ae:	697b      	ldr	r3, [r7, #20]
 80023b0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80023b4:	d10b      	bne.n	80023ce <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	2b80      	cmp	r3, #128	; 0x80
 80023ba:	d919      	bls.n	80023f0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	2ba0      	cmp	r3, #160	; 0xa0
 80023c0:	d902      	bls.n	80023c8 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80023c2:	2302      	movs	r3, #2
 80023c4:	613b      	str	r3, [r7, #16]
 80023c6:	e013      	b.n	80023f0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80023c8:	2301      	movs	r3, #1
 80023ca:	613b      	str	r3, [r7, #16]
 80023cc:	e010      	b.n	80023f0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	2b80      	cmp	r3, #128	; 0x80
 80023d2:	d902      	bls.n	80023da <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80023d4:	2303      	movs	r3, #3
 80023d6:	613b      	str	r3, [r7, #16]
 80023d8:	e00a      	b.n	80023f0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	2b80      	cmp	r3, #128	; 0x80
 80023de:	d102      	bne.n	80023e6 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80023e0:	2302      	movs	r3, #2
 80023e2:	613b      	str	r3, [r7, #16]
 80023e4:	e004      	b.n	80023f0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	2b70      	cmp	r3, #112	; 0x70
 80023ea:	d101      	bne.n	80023f0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80023ec:	2301      	movs	r3, #1
 80023ee:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80023f0:	4b0b      	ldr	r3, [pc, #44]	; (8002420 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	f023 0207 	bic.w	r2, r3, #7
 80023f8:	4909      	ldr	r1, [pc, #36]	; (8002420 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80023fa:	693b      	ldr	r3, [r7, #16]
 80023fc:	4313      	orrs	r3, r2
 80023fe:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002400:	4b07      	ldr	r3, [pc, #28]	; (8002420 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	f003 0307 	and.w	r3, r3, #7
 8002408:	693a      	ldr	r2, [r7, #16]
 800240a:	429a      	cmp	r2, r3
 800240c:	d001      	beq.n	8002412 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800240e:	2301      	movs	r3, #1
 8002410:	e000      	b.n	8002414 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002412:	2300      	movs	r3, #0
}
 8002414:	4618      	mov	r0, r3
 8002416:	3718      	adds	r7, #24
 8002418:	46bd      	mov	sp, r7
 800241a:	bd80      	pop	{r7, pc}
 800241c:	40021000 	.word	0x40021000
 8002420:	40022000 	.word	0x40022000

08002424 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002424:	b580      	push	{r7, lr}
 8002426:	b086      	sub	sp, #24
 8002428:	af00      	add	r7, sp, #0
 800242a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800242c:	2300      	movs	r3, #0
 800242e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002430:	2300      	movs	r3, #0
 8002432:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800243c:	2b00      	cmp	r3, #0
 800243e:	d03f      	beq.n	80024c0 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002444:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002448:	d01c      	beq.n	8002484 <HAL_RCCEx_PeriphCLKConfig+0x60>
 800244a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800244e:	d802      	bhi.n	8002456 <HAL_RCCEx_PeriphCLKConfig+0x32>
 8002450:	2b00      	cmp	r3, #0
 8002452:	d00e      	beq.n	8002472 <HAL_RCCEx_PeriphCLKConfig+0x4e>
 8002454:	e01f      	b.n	8002496 <HAL_RCCEx_PeriphCLKConfig+0x72>
 8002456:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800245a:	d003      	beq.n	8002464 <HAL_RCCEx_PeriphCLKConfig+0x40>
 800245c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002460:	d01c      	beq.n	800249c <HAL_RCCEx_PeriphCLKConfig+0x78>
 8002462:	e018      	b.n	8002496 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002464:	4b85      	ldr	r3, [pc, #532]	; (800267c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002466:	68db      	ldr	r3, [r3, #12]
 8002468:	4a84      	ldr	r2, [pc, #528]	; (800267c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800246a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800246e:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002470:	e015      	b.n	800249e <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	3304      	adds	r3, #4
 8002476:	2100      	movs	r1, #0
 8002478:	4618      	mov	r0, r3
 800247a:	f000 fab9 	bl	80029f0 <RCCEx_PLLSAI1_Config>
 800247e:	4603      	mov	r3, r0
 8002480:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002482:	e00c      	b.n	800249e <HAL_RCCEx_PeriphCLKConfig+0x7a>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	3320      	adds	r3, #32
 8002488:	2100      	movs	r1, #0
 800248a:	4618      	mov	r0, r3
 800248c:	f000 fba0 	bl	8002bd0 <RCCEx_PLLSAI2_Config>
 8002490:	4603      	mov	r3, r0
 8002492:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002494:	e003      	b.n	800249e <HAL_RCCEx_PeriphCLKConfig+0x7a>
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002496:	2301      	movs	r3, #1
 8002498:	74fb      	strb	r3, [r7, #19]
      break;
 800249a:	e000      	b.n	800249e <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 800249c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800249e:	7cfb      	ldrb	r3, [r7, #19]
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d10b      	bne.n	80024bc <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80024a4:	4b75      	ldr	r3, [pc, #468]	; (800267c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80024a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024aa:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80024b2:	4972      	ldr	r1, [pc, #456]	; (800267c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80024b4:	4313      	orrs	r3, r2
 80024b6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80024ba:	e001      	b.n	80024c0 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80024bc:	7cfb      	ldrb	r3, [r7, #19]
 80024be:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d03f      	beq.n	800254c <HAL_RCCEx_PeriphCLKConfig+0x128>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80024d0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80024d4:	d01c      	beq.n	8002510 <HAL_RCCEx_PeriphCLKConfig+0xec>
 80024d6:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80024da:	d802      	bhi.n	80024e2 <HAL_RCCEx_PeriphCLKConfig+0xbe>
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d00e      	beq.n	80024fe <HAL_RCCEx_PeriphCLKConfig+0xda>
 80024e0:	e01f      	b.n	8002522 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 80024e2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80024e6:	d003      	beq.n	80024f0 <HAL_RCCEx_PeriphCLKConfig+0xcc>
 80024e8:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80024ec:	d01c      	beq.n	8002528 <HAL_RCCEx_PeriphCLKConfig+0x104>
 80024ee:	e018      	b.n	8002522 <HAL_RCCEx_PeriphCLKConfig+0xfe>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80024f0:	4b62      	ldr	r3, [pc, #392]	; (800267c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80024f2:	68db      	ldr	r3, [r3, #12]
 80024f4:	4a61      	ldr	r2, [pc, #388]	; (800267c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80024f6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80024fa:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80024fc:	e015      	b.n	800252a <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	3304      	adds	r3, #4
 8002502:	2100      	movs	r1, #0
 8002504:	4618      	mov	r0, r3
 8002506:	f000 fa73 	bl	80029f0 <RCCEx_PLLSAI1_Config>
 800250a:	4603      	mov	r3, r0
 800250c:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800250e:	e00c      	b.n	800252a <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	3320      	adds	r3, #32
 8002514:	2100      	movs	r1, #0
 8002516:	4618      	mov	r0, r3
 8002518:	f000 fb5a 	bl	8002bd0 <RCCEx_PLLSAI2_Config>
 800251c:	4603      	mov	r3, r0
 800251e:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002520:	e003      	b.n	800252a <HAL_RCCEx_PeriphCLKConfig+0x106>
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002522:	2301      	movs	r3, #1
 8002524:	74fb      	strb	r3, [r7, #19]
      break;
 8002526:	e000      	b.n	800252a <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8002528:	bf00      	nop
    }

    if(ret == HAL_OK)
 800252a:	7cfb      	ldrb	r3, [r7, #19]
 800252c:	2b00      	cmp	r3, #0
 800252e:	d10b      	bne.n	8002548 <HAL_RCCEx_PeriphCLKConfig+0x124>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002530:	4b52      	ldr	r3, [pc, #328]	; (800267c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002532:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002536:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800253e:	494f      	ldr	r1, [pc, #316]	; (800267c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002540:	4313      	orrs	r3, r2
 8002542:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002546:	e001      	b.n	800254c <HAL_RCCEx_PeriphCLKConfig+0x128>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002548:	7cfb      	ldrb	r3, [r7, #19]
 800254a:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002554:	2b00      	cmp	r3, #0
 8002556:	f000 80a0 	beq.w	800269a <HAL_RCCEx_PeriphCLKConfig+0x276>
  {
    FlagStatus       pwrclkchanged = RESET;
 800255a:	2300      	movs	r3, #0
 800255c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800255e:	4b47      	ldr	r3, [pc, #284]	; (800267c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002560:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002562:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002566:	2b00      	cmp	r3, #0
 8002568:	d101      	bne.n	800256e <HAL_RCCEx_PeriphCLKConfig+0x14a>
 800256a:	2301      	movs	r3, #1
 800256c:	e000      	b.n	8002570 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 800256e:	2300      	movs	r3, #0
 8002570:	2b00      	cmp	r3, #0
 8002572:	d00d      	beq.n	8002590 <HAL_RCCEx_PeriphCLKConfig+0x16c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002574:	4b41      	ldr	r3, [pc, #260]	; (800267c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002576:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002578:	4a40      	ldr	r2, [pc, #256]	; (800267c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800257a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800257e:	6593      	str	r3, [r2, #88]	; 0x58
 8002580:	4b3e      	ldr	r3, [pc, #248]	; (800267c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002582:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002584:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002588:	60bb      	str	r3, [r7, #8]
 800258a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800258c:	2301      	movs	r3, #1
 800258e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002590:	4b3b      	ldr	r3, [pc, #236]	; (8002680 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	4a3a      	ldr	r2, [pc, #232]	; (8002680 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8002596:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800259a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800259c:	f7fe f85c 	bl	8000658 <HAL_GetTick>
 80025a0:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80025a2:	e009      	b.n	80025b8 <HAL_RCCEx_PeriphCLKConfig+0x194>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80025a4:	f7fe f858 	bl	8000658 <HAL_GetTick>
 80025a8:	4602      	mov	r2, r0
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	1ad3      	subs	r3, r2, r3
 80025ae:	2b02      	cmp	r3, #2
 80025b0:	d902      	bls.n	80025b8 <HAL_RCCEx_PeriphCLKConfig+0x194>
      {
        ret = HAL_TIMEOUT;
 80025b2:	2303      	movs	r3, #3
 80025b4:	74fb      	strb	r3, [r7, #19]
        break;
 80025b6:	e005      	b.n	80025c4 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80025b8:	4b31      	ldr	r3, [pc, #196]	; (8002680 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d0ef      	beq.n	80025a4 <HAL_RCCEx_PeriphCLKConfig+0x180>
      }
    }

    if(ret == HAL_OK)
 80025c4:	7cfb      	ldrb	r3, [r7, #19]
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d15c      	bne.n	8002684 <HAL_RCCEx_PeriphCLKConfig+0x260>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80025ca:	4b2c      	ldr	r3, [pc, #176]	; (800267c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80025cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80025d0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80025d4:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80025d6:	697b      	ldr	r3, [r7, #20]
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d01f      	beq.n	800261c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80025e2:	697a      	ldr	r2, [r7, #20]
 80025e4:	429a      	cmp	r2, r3
 80025e6:	d019      	beq.n	800261c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80025e8:	4b24      	ldr	r3, [pc, #144]	; (800267c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80025ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80025ee:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80025f2:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80025f4:	4b21      	ldr	r3, [pc, #132]	; (800267c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80025f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80025fa:	4a20      	ldr	r2, [pc, #128]	; (800267c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80025fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002600:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002604:	4b1d      	ldr	r3, [pc, #116]	; (800267c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002606:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800260a:	4a1c      	ldr	r2, [pc, #112]	; (800267c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800260c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002610:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002614:	4a19      	ldr	r2, [pc, #100]	; (800267c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002616:	697b      	ldr	r3, [r7, #20]
 8002618:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800261c:	697b      	ldr	r3, [r7, #20]
 800261e:	f003 0301 	and.w	r3, r3, #1
 8002622:	2b00      	cmp	r3, #0
 8002624:	d016      	beq.n	8002654 <HAL_RCCEx_PeriphCLKConfig+0x230>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002626:	f7fe f817 	bl	8000658 <HAL_GetTick>
 800262a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800262c:	e00b      	b.n	8002646 <HAL_RCCEx_PeriphCLKConfig+0x222>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800262e:	f7fe f813 	bl	8000658 <HAL_GetTick>
 8002632:	4602      	mov	r2, r0
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	1ad3      	subs	r3, r2, r3
 8002638:	f241 3288 	movw	r2, #5000	; 0x1388
 800263c:	4293      	cmp	r3, r2
 800263e:	d902      	bls.n	8002646 <HAL_RCCEx_PeriphCLKConfig+0x222>
          {
            ret = HAL_TIMEOUT;
 8002640:	2303      	movs	r3, #3
 8002642:	74fb      	strb	r3, [r7, #19]
            break;
 8002644:	e006      	b.n	8002654 <HAL_RCCEx_PeriphCLKConfig+0x230>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002646:	4b0d      	ldr	r3, [pc, #52]	; (800267c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002648:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800264c:	f003 0302 	and.w	r3, r3, #2
 8002650:	2b00      	cmp	r3, #0
 8002652:	d0ec      	beq.n	800262e <HAL_RCCEx_PeriphCLKConfig+0x20a>
          }
        }
      }

      if(ret == HAL_OK)
 8002654:	7cfb      	ldrb	r3, [r7, #19]
 8002656:	2b00      	cmp	r3, #0
 8002658:	d10c      	bne.n	8002674 <HAL_RCCEx_PeriphCLKConfig+0x250>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800265a:	4b08      	ldr	r3, [pc, #32]	; (800267c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800265c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002660:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800266a:	4904      	ldr	r1, [pc, #16]	; (800267c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800266c:	4313      	orrs	r3, r2
 800266e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002672:	e009      	b.n	8002688 <HAL_RCCEx_PeriphCLKConfig+0x264>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002674:	7cfb      	ldrb	r3, [r7, #19]
 8002676:	74bb      	strb	r3, [r7, #18]
 8002678:	e006      	b.n	8002688 <HAL_RCCEx_PeriphCLKConfig+0x264>
 800267a:	bf00      	nop
 800267c:	40021000 	.word	0x40021000
 8002680:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002684:	7cfb      	ldrb	r3, [r7, #19]
 8002686:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002688:	7c7b      	ldrb	r3, [r7, #17]
 800268a:	2b01      	cmp	r3, #1
 800268c:	d105      	bne.n	800269a <HAL_RCCEx_PeriphCLKConfig+0x276>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800268e:	4b9e      	ldr	r3, [pc, #632]	; (8002908 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002690:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002692:	4a9d      	ldr	r2, [pc, #628]	; (8002908 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002694:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002698:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	f003 0301 	and.w	r3, r3, #1
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d00a      	beq.n	80026bc <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80026a6:	4b98      	ldr	r3, [pc, #608]	; (8002908 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80026a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026ac:	f023 0203 	bic.w	r2, r3, #3
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026b4:	4994      	ldr	r1, [pc, #592]	; (8002908 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80026b6:	4313      	orrs	r3, r2
 80026b8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	f003 0302 	and.w	r3, r3, #2
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d00a      	beq.n	80026de <HAL_RCCEx_PeriphCLKConfig+0x2ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80026c8:	4b8f      	ldr	r3, [pc, #572]	; (8002908 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80026ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026ce:	f023 020c 	bic.w	r2, r3, #12
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80026d6:	498c      	ldr	r1, [pc, #560]	; (8002908 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80026d8:	4313      	orrs	r3, r2
 80026da:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	f003 0304 	and.w	r3, r3, #4
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d00a      	beq.n	8002700 <HAL_RCCEx_PeriphCLKConfig+0x2dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80026ea:	4b87      	ldr	r3, [pc, #540]	; (8002908 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80026ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026f0:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026f8:	4983      	ldr	r1, [pc, #524]	; (8002908 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80026fa:	4313      	orrs	r3, r2
 80026fc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	f003 0308 	and.w	r3, r3, #8
 8002708:	2b00      	cmp	r3, #0
 800270a:	d00a      	beq.n	8002722 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800270c:	4b7e      	ldr	r3, [pc, #504]	; (8002908 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800270e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002712:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800271a:	497b      	ldr	r1, [pc, #492]	; (8002908 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800271c:	4313      	orrs	r3, r2
 800271e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	f003 0310 	and.w	r3, r3, #16
 800272a:	2b00      	cmp	r3, #0
 800272c:	d00a      	beq.n	8002744 <HAL_RCCEx_PeriphCLKConfig+0x320>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800272e:	4b76      	ldr	r3, [pc, #472]	; (8002908 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002730:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002734:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800273c:	4972      	ldr	r1, [pc, #456]	; (8002908 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800273e:	4313      	orrs	r3, r2
 8002740:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	f003 0320 	and.w	r3, r3, #32
 800274c:	2b00      	cmp	r3, #0
 800274e:	d00a      	beq.n	8002766 <HAL_RCCEx_PeriphCLKConfig+0x342>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002750:	4b6d      	ldr	r3, [pc, #436]	; (8002908 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002752:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002756:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800275e:	496a      	ldr	r1, [pc, #424]	; (8002908 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002760:	4313      	orrs	r3, r2
 8002762:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800276e:	2b00      	cmp	r3, #0
 8002770:	d00a      	beq.n	8002788 <HAL_RCCEx_PeriphCLKConfig+0x364>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002772:	4b65      	ldr	r3, [pc, #404]	; (8002908 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002774:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002778:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002780:	4961      	ldr	r1, [pc, #388]	; (8002908 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002782:	4313      	orrs	r3, r2
 8002784:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002790:	2b00      	cmp	r3, #0
 8002792:	d00a      	beq.n	80027aa <HAL_RCCEx_PeriphCLKConfig+0x386>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002794:	4b5c      	ldr	r3, [pc, #368]	; (8002908 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002796:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800279a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80027a2:	4959      	ldr	r1, [pc, #356]	; (8002908 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80027a4:	4313      	orrs	r3, r2
 80027a6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d00a      	beq.n	80027cc <HAL_RCCEx_PeriphCLKConfig+0x3a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80027b6:	4b54      	ldr	r3, [pc, #336]	; (8002908 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80027b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027bc:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80027c4:	4950      	ldr	r1, [pc, #320]	; (8002908 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80027c6:	4313      	orrs	r3, r2
 80027c8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d00a      	beq.n	80027ee <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80027d8:	4b4b      	ldr	r3, [pc, #300]	; (8002908 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80027da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027de:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027e6:	4948      	ldr	r1, [pc, #288]	; (8002908 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80027e8:	4313      	orrs	r3, r2
 80027ea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d00a      	beq.n	8002810 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80027fa:	4b43      	ldr	r3, [pc, #268]	; (8002908 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80027fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002800:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002808:	493f      	ldr	r1, [pc, #252]	; (8002908 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800280a:	4313      	orrs	r3, r2
 800280c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002818:	2b00      	cmp	r3, #0
 800281a:	d028      	beq.n	800286e <HAL_RCCEx_PeriphCLKConfig+0x44a>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800281c:	4b3a      	ldr	r3, [pc, #232]	; (8002908 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800281e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002822:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800282a:	4937      	ldr	r1, [pc, #220]	; (8002908 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800282c:	4313      	orrs	r3, r2
 800282e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002836:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800283a:	d106      	bne.n	800284a <HAL_RCCEx_PeriphCLKConfig+0x426>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800283c:	4b32      	ldr	r3, [pc, #200]	; (8002908 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800283e:	68db      	ldr	r3, [r3, #12]
 8002840:	4a31      	ldr	r2, [pc, #196]	; (8002908 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002842:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002846:	60d3      	str	r3, [r2, #12]
 8002848:	e011      	b.n	800286e <HAL_RCCEx_PeriphCLKConfig+0x44a>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800284e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002852:	d10c      	bne.n	800286e <HAL_RCCEx_PeriphCLKConfig+0x44a>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	3304      	adds	r3, #4
 8002858:	2101      	movs	r1, #1
 800285a:	4618      	mov	r0, r3
 800285c:	f000 f8c8 	bl	80029f0 <RCCEx_PLLSAI1_Config>
 8002860:	4603      	mov	r3, r0
 8002862:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002864:	7cfb      	ldrb	r3, [r7, #19]
 8002866:	2b00      	cmp	r3, #0
 8002868:	d001      	beq.n	800286e <HAL_RCCEx_PeriphCLKConfig+0x44a>
        {
          /* set overall return value */
          status = ret;
 800286a:	7cfb      	ldrb	r3, [r7, #19]
 800286c:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002876:	2b00      	cmp	r3, #0
 8002878:	d028      	beq.n	80028cc <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800287a:	4b23      	ldr	r3, [pc, #140]	; (8002908 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800287c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002880:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002888:	491f      	ldr	r1, [pc, #124]	; (8002908 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800288a:	4313      	orrs	r3, r2
 800288c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002894:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002898:	d106      	bne.n	80028a8 <HAL_RCCEx_PeriphCLKConfig+0x484>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800289a:	4b1b      	ldr	r3, [pc, #108]	; (8002908 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800289c:	68db      	ldr	r3, [r3, #12]
 800289e:	4a1a      	ldr	r2, [pc, #104]	; (8002908 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80028a0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80028a4:	60d3      	str	r3, [r2, #12]
 80028a6:	e011      	b.n	80028cc <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028ac:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80028b0:	d10c      	bne.n	80028cc <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	3304      	adds	r3, #4
 80028b6:	2101      	movs	r1, #1
 80028b8:	4618      	mov	r0, r3
 80028ba:	f000 f899 	bl	80029f0 <RCCEx_PLLSAI1_Config>
 80028be:	4603      	mov	r3, r0
 80028c0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80028c2:	7cfb      	ldrb	r3, [r7, #19]
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d001      	beq.n	80028cc <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* set overall return value */
        status = ret;
 80028c8:	7cfb      	ldrb	r3, [r7, #19]
 80028ca:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d02b      	beq.n	8002930 <HAL_RCCEx_PeriphCLKConfig+0x50c>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80028d8:	4b0b      	ldr	r3, [pc, #44]	; (8002908 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80028da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028de:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80028e6:	4908      	ldr	r1, [pc, #32]	; (8002908 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80028e8:	4313      	orrs	r3, r2
 80028ea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80028f2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80028f6:	d109      	bne.n	800290c <HAL_RCCEx_PeriphCLKConfig+0x4e8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80028f8:	4b03      	ldr	r3, [pc, #12]	; (8002908 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80028fa:	68db      	ldr	r3, [r3, #12]
 80028fc:	4a02      	ldr	r2, [pc, #8]	; (8002908 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80028fe:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002902:	60d3      	str	r3, [r2, #12]
 8002904:	e014      	b.n	8002930 <HAL_RCCEx_PeriphCLKConfig+0x50c>
 8002906:	bf00      	nop
 8002908:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002910:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002914:	d10c      	bne.n	8002930 <HAL_RCCEx_PeriphCLKConfig+0x50c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	3304      	adds	r3, #4
 800291a:	2101      	movs	r1, #1
 800291c:	4618      	mov	r0, r3
 800291e:	f000 f867 	bl	80029f0 <RCCEx_PLLSAI1_Config>
 8002922:	4603      	mov	r3, r0
 8002924:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002926:	7cfb      	ldrb	r3, [r7, #19]
 8002928:	2b00      	cmp	r3, #0
 800292a:	d001      	beq.n	8002930 <HAL_RCCEx_PeriphCLKConfig+0x50c>
      {
        /* set overall return value */
        status = ret;
 800292c:	7cfb      	ldrb	r3, [r7, #19]
 800292e:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002938:	2b00      	cmp	r3, #0
 800293a:	d02f      	beq.n	800299c <HAL_RCCEx_PeriphCLKConfig+0x578>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800293c:	4b2b      	ldr	r3, [pc, #172]	; (80029ec <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800293e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002942:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800294a:	4928      	ldr	r1, [pc, #160]	; (80029ec <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800294c:	4313      	orrs	r3, r2
 800294e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002956:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800295a:	d10d      	bne.n	8002978 <HAL_RCCEx_PeriphCLKConfig+0x554>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	3304      	adds	r3, #4
 8002960:	2102      	movs	r1, #2
 8002962:	4618      	mov	r0, r3
 8002964:	f000 f844 	bl	80029f0 <RCCEx_PLLSAI1_Config>
 8002968:	4603      	mov	r3, r0
 800296a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800296c:	7cfb      	ldrb	r3, [r7, #19]
 800296e:	2b00      	cmp	r3, #0
 8002970:	d014      	beq.n	800299c <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 8002972:	7cfb      	ldrb	r3, [r7, #19]
 8002974:	74bb      	strb	r3, [r7, #18]
 8002976:	e011      	b.n	800299c <HAL_RCCEx_PeriphCLKConfig+0x578>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800297c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002980:	d10c      	bne.n	800299c <HAL_RCCEx_PeriphCLKConfig+0x578>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	3320      	adds	r3, #32
 8002986:	2102      	movs	r1, #2
 8002988:	4618      	mov	r0, r3
 800298a:	f000 f921 	bl	8002bd0 <RCCEx_PLLSAI2_Config>
 800298e:	4603      	mov	r3, r0
 8002990:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002992:	7cfb      	ldrb	r3, [r7, #19]
 8002994:	2b00      	cmp	r3, #0
 8002996:	d001      	beq.n	800299c <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 8002998:	7cfb      	ldrb	r3, [r7, #19]
 800299a:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d00a      	beq.n	80029be <HAL_RCCEx_PeriphCLKConfig+0x59a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80029a8:	4b10      	ldr	r3, [pc, #64]	; (80029ec <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80029aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029ae:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80029b6:	490d      	ldr	r1, [pc, #52]	; (80029ec <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80029b8:	4313      	orrs	r3, r2
 80029ba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d00b      	beq.n	80029e2 <HAL_RCCEx_PeriphCLKConfig+0x5be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80029ca:	4b08      	ldr	r3, [pc, #32]	; (80029ec <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80029cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029d0:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80029da:	4904      	ldr	r1, [pc, #16]	; (80029ec <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80029dc:	4313      	orrs	r3, r2
 80029de:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80029e2:	7cbb      	ldrb	r3, [r7, #18]
}
 80029e4:	4618      	mov	r0, r3
 80029e6:	3718      	adds	r7, #24
 80029e8:	46bd      	mov	sp, r7
 80029ea:	bd80      	pop	{r7, pc}
 80029ec:	40021000 	.word	0x40021000

080029f0 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80029f0:	b580      	push	{r7, lr}
 80029f2:	b084      	sub	sp, #16
 80029f4:	af00      	add	r7, sp, #0
 80029f6:	6078      	str	r0, [r7, #4]
 80029f8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80029fa:	2300      	movs	r3, #0
 80029fc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80029fe:	4b73      	ldr	r3, [pc, #460]	; (8002bcc <RCCEx_PLLSAI1_Config+0x1dc>)
 8002a00:	68db      	ldr	r3, [r3, #12]
 8002a02:	f003 0303 	and.w	r3, r3, #3
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d018      	beq.n	8002a3c <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002a0a:	4b70      	ldr	r3, [pc, #448]	; (8002bcc <RCCEx_PLLSAI1_Config+0x1dc>)
 8002a0c:	68db      	ldr	r3, [r3, #12]
 8002a0e:	f003 0203 	and.w	r2, r3, #3
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	429a      	cmp	r2, r3
 8002a18:	d10d      	bne.n	8002a36 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
       ||
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d009      	beq.n	8002a36 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002a22:	4b6a      	ldr	r3, [pc, #424]	; (8002bcc <RCCEx_PLLSAI1_Config+0x1dc>)
 8002a24:	68db      	ldr	r3, [r3, #12]
 8002a26:	091b      	lsrs	r3, r3, #4
 8002a28:	f003 0307 	and.w	r3, r3, #7
 8002a2c:	1c5a      	adds	r2, r3, #1
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	685b      	ldr	r3, [r3, #4]
       ||
 8002a32:	429a      	cmp	r2, r3
 8002a34:	d044      	beq.n	8002ac0 <RCCEx_PLLSAI1_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 8002a36:	2301      	movs	r3, #1
 8002a38:	73fb      	strb	r3, [r7, #15]
 8002a3a:	e041      	b.n	8002ac0 <RCCEx_PLLSAI1_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	2b02      	cmp	r3, #2
 8002a42:	d00c      	beq.n	8002a5e <RCCEx_PLLSAI1_Config+0x6e>
 8002a44:	2b03      	cmp	r3, #3
 8002a46:	d013      	beq.n	8002a70 <RCCEx_PLLSAI1_Config+0x80>
 8002a48:	2b01      	cmp	r3, #1
 8002a4a:	d120      	bne.n	8002a8e <RCCEx_PLLSAI1_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002a4c:	4b5f      	ldr	r3, [pc, #380]	; (8002bcc <RCCEx_PLLSAI1_Config+0x1dc>)
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	f003 0302 	and.w	r3, r3, #2
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d11d      	bne.n	8002a94 <RCCEx_PLLSAI1_Config+0xa4>
      {
        status = HAL_ERROR;
 8002a58:	2301      	movs	r3, #1
 8002a5a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002a5c:	e01a      	b.n	8002a94 <RCCEx_PLLSAI1_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002a5e:	4b5b      	ldr	r3, [pc, #364]	; (8002bcc <RCCEx_PLLSAI1_Config+0x1dc>)
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d116      	bne.n	8002a98 <RCCEx_PLLSAI1_Config+0xa8>
      {
        status = HAL_ERROR;
 8002a6a:	2301      	movs	r3, #1
 8002a6c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002a6e:	e013      	b.n	8002a98 <RCCEx_PLLSAI1_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002a70:	4b56      	ldr	r3, [pc, #344]	; (8002bcc <RCCEx_PLLSAI1_Config+0x1dc>)
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d10f      	bne.n	8002a9c <RCCEx_PLLSAI1_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002a7c:	4b53      	ldr	r3, [pc, #332]	; (8002bcc <RCCEx_PLLSAI1_Config+0x1dc>)
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d109      	bne.n	8002a9c <RCCEx_PLLSAI1_Config+0xac>
        {
          status = HAL_ERROR;
 8002a88:	2301      	movs	r3, #1
 8002a8a:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002a8c:	e006      	b.n	8002a9c <RCCEx_PLLSAI1_Config+0xac>
    default:
      status = HAL_ERROR;
 8002a8e:	2301      	movs	r3, #1
 8002a90:	73fb      	strb	r3, [r7, #15]
      break;
 8002a92:	e004      	b.n	8002a9e <RCCEx_PLLSAI1_Config+0xae>
      break;
 8002a94:	bf00      	nop
 8002a96:	e002      	b.n	8002a9e <RCCEx_PLLSAI1_Config+0xae>
      break;
 8002a98:	bf00      	nop
 8002a9a:	e000      	b.n	8002a9e <RCCEx_PLLSAI1_Config+0xae>
      break;
 8002a9c:	bf00      	nop
    }

    if(status == HAL_OK)
 8002a9e:	7bfb      	ldrb	r3, [r7, #15]
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d10d      	bne.n	8002ac0 <RCCEx_PLLSAI1_Config+0xd0>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002aa4:	4b49      	ldr	r3, [pc, #292]	; (8002bcc <RCCEx_PLLSAI1_Config+0x1dc>)
 8002aa6:	68db      	ldr	r3, [r3, #12]
 8002aa8:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	6819      	ldr	r1, [r3, #0]
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	685b      	ldr	r3, [r3, #4]
 8002ab4:	3b01      	subs	r3, #1
 8002ab6:	011b      	lsls	r3, r3, #4
 8002ab8:	430b      	orrs	r3, r1
 8002aba:	4944      	ldr	r1, [pc, #272]	; (8002bcc <RCCEx_PLLSAI1_Config+0x1dc>)
 8002abc:	4313      	orrs	r3, r2
 8002abe:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002ac0:	7bfb      	ldrb	r3, [r7, #15]
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d17d      	bne.n	8002bc2 <RCCEx_PLLSAI1_Config+0x1d2>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002ac6:	4b41      	ldr	r3, [pc, #260]	; (8002bcc <RCCEx_PLLSAI1_Config+0x1dc>)
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	4a40      	ldr	r2, [pc, #256]	; (8002bcc <RCCEx_PLLSAI1_Config+0x1dc>)
 8002acc:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002ad0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002ad2:	f7fd fdc1 	bl	8000658 <HAL_GetTick>
 8002ad6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002ad8:	e009      	b.n	8002aee <RCCEx_PLLSAI1_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002ada:	f7fd fdbd 	bl	8000658 <HAL_GetTick>
 8002ade:	4602      	mov	r2, r0
 8002ae0:	68bb      	ldr	r3, [r7, #8]
 8002ae2:	1ad3      	subs	r3, r2, r3
 8002ae4:	2b02      	cmp	r3, #2
 8002ae6:	d902      	bls.n	8002aee <RCCEx_PLLSAI1_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 8002ae8:	2303      	movs	r3, #3
 8002aea:	73fb      	strb	r3, [r7, #15]
        break;
 8002aec:	e005      	b.n	8002afa <RCCEx_PLLSAI1_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002aee:	4b37      	ldr	r3, [pc, #220]	; (8002bcc <RCCEx_PLLSAI1_Config+0x1dc>)
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d1ef      	bne.n	8002ada <RCCEx_PLLSAI1_Config+0xea>
      }
    }

    if(status == HAL_OK)
 8002afa:	7bfb      	ldrb	r3, [r7, #15]
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d160      	bne.n	8002bc2 <RCCEx_PLLSAI1_Config+0x1d2>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002b00:	683b      	ldr	r3, [r7, #0]
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d111      	bne.n	8002b2a <RCCEx_PLLSAI1_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002b06:	4b31      	ldr	r3, [pc, #196]	; (8002bcc <RCCEx_PLLSAI1_Config+0x1dc>)
 8002b08:	691b      	ldr	r3, [r3, #16]
 8002b0a:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8002b0e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002b12:	687a      	ldr	r2, [r7, #4]
 8002b14:	6892      	ldr	r2, [r2, #8]
 8002b16:	0211      	lsls	r1, r2, #8
 8002b18:	687a      	ldr	r2, [r7, #4]
 8002b1a:	68d2      	ldr	r2, [r2, #12]
 8002b1c:	0912      	lsrs	r2, r2, #4
 8002b1e:	0452      	lsls	r2, r2, #17
 8002b20:	430a      	orrs	r2, r1
 8002b22:	492a      	ldr	r1, [pc, #168]	; (8002bcc <RCCEx_PLLSAI1_Config+0x1dc>)
 8002b24:	4313      	orrs	r3, r2
 8002b26:	610b      	str	r3, [r1, #16]
 8002b28:	e027      	b.n	8002b7a <RCCEx_PLLSAI1_Config+0x18a>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002b2a:	683b      	ldr	r3, [r7, #0]
 8002b2c:	2b01      	cmp	r3, #1
 8002b2e:	d112      	bne.n	8002b56 <RCCEx_PLLSAI1_Config+0x166>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002b30:	4b26      	ldr	r3, [pc, #152]	; (8002bcc <RCCEx_PLLSAI1_Config+0x1dc>)
 8002b32:	691b      	ldr	r3, [r3, #16]
 8002b34:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8002b38:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002b3c:	687a      	ldr	r2, [r7, #4]
 8002b3e:	6892      	ldr	r2, [r2, #8]
 8002b40:	0211      	lsls	r1, r2, #8
 8002b42:	687a      	ldr	r2, [r7, #4]
 8002b44:	6912      	ldr	r2, [r2, #16]
 8002b46:	0852      	lsrs	r2, r2, #1
 8002b48:	3a01      	subs	r2, #1
 8002b4a:	0552      	lsls	r2, r2, #21
 8002b4c:	430a      	orrs	r2, r1
 8002b4e:	491f      	ldr	r1, [pc, #124]	; (8002bcc <RCCEx_PLLSAI1_Config+0x1dc>)
 8002b50:	4313      	orrs	r3, r2
 8002b52:	610b      	str	r3, [r1, #16]
 8002b54:	e011      	b.n	8002b7a <RCCEx_PLLSAI1_Config+0x18a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002b56:	4b1d      	ldr	r3, [pc, #116]	; (8002bcc <RCCEx_PLLSAI1_Config+0x1dc>)
 8002b58:	691b      	ldr	r3, [r3, #16]
 8002b5a:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002b5e:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002b62:	687a      	ldr	r2, [r7, #4]
 8002b64:	6892      	ldr	r2, [r2, #8]
 8002b66:	0211      	lsls	r1, r2, #8
 8002b68:	687a      	ldr	r2, [r7, #4]
 8002b6a:	6952      	ldr	r2, [r2, #20]
 8002b6c:	0852      	lsrs	r2, r2, #1
 8002b6e:	3a01      	subs	r2, #1
 8002b70:	0652      	lsls	r2, r2, #25
 8002b72:	430a      	orrs	r2, r1
 8002b74:	4915      	ldr	r1, [pc, #84]	; (8002bcc <RCCEx_PLLSAI1_Config+0x1dc>)
 8002b76:	4313      	orrs	r3, r2
 8002b78:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002b7a:	4b14      	ldr	r3, [pc, #80]	; (8002bcc <RCCEx_PLLSAI1_Config+0x1dc>)
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	4a13      	ldr	r2, [pc, #76]	; (8002bcc <RCCEx_PLLSAI1_Config+0x1dc>)
 8002b80:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002b84:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b86:	f7fd fd67 	bl	8000658 <HAL_GetTick>
 8002b8a:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002b8c:	e009      	b.n	8002ba2 <RCCEx_PLLSAI1_Config+0x1b2>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002b8e:	f7fd fd63 	bl	8000658 <HAL_GetTick>
 8002b92:	4602      	mov	r2, r0
 8002b94:	68bb      	ldr	r3, [r7, #8]
 8002b96:	1ad3      	subs	r3, r2, r3
 8002b98:	2b02      	cmp	r3, #2
 8002b9a:	d902      	bls.n	8002ba2 <RCCEx_PLLSAI1_Config+0x1b2>
        {
          status = HAL_TIMEOUT;
 8002b9c:	2303      	movs	r3, #3
 8002b9e:	73fb      	strb	r3, [r7, #15]
          break;
 8002ba0:	e005      	b.n	8002bae <RCCEx_PLLSAI1_Config+0x1be>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002ba2:	4b0a      	ldr	r3, [pc, #40]	; (8002bcc <RCCEx_PLLSAI1_Config+0x1dc>)
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d0ef      	beq.n	8002b8e <RCCEx_PLLSAI1_Config+0x19e>
        }
      }

      if(status == HAL_OK)
 8002bae:	7bfb      	ldrb	r3, [r7, #15]
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d106      	bne.n	8002bc2 <RCCEx_PLLSAI1_Config+0x1d2>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002bb4:	4b05      	ldr	r3, [pc, #20]	; (8002bcc <RCCEx_PLLSAI1_Config+0x1dc>)
 8002bb6:	691a      	ldr	r2, [r3, #16]
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	699b      	ldr	r3, [r3, #24]
 8002bbc:	4903      	ldr	r1, [pc, #12]	; (8002bcc <RCCEx_PLLSAI1_Config+0x1dc>)
 8002bbe:	4313      	orrs	r3, r2
 8002bc0:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002bc2:	7bfb      	ldrb	r3, [r7, #15]
}
 8002bc4:	4618      	mov	r0, r3
 8002bc6:	3710      	adds	r7, #16
 8002bc8:	46bd      	mov	sp, r7
 8002bca:	bd80      	pop	{r7, pc}
 8002bcc:	40021000 	.word	0x40021000

08002bd0 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8002bd0:	b580      	push	{r7, lr}
 8002bd2:	b084      	sub	sp, #16
 8002bd4:	af00      	add	r7, sp, #0
 8002bd6:	6078      	str	r0, [r7, #4]
 8002bd8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002bda:	2300      	movs	r3, #0
 8002bdc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002bde:	4b68      	ldr	r3, [pc, #416]	; (8002d80 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002be0:	68db      	ldr	r3, [r3, #12]
 8002be2:	f003 0303 	and.w	r3, r3, #3
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d018      	beq.n	8002c1c <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8002bea:	4b65      	ldr	r3, [pc, #404]	; (8002d80 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002bec:	68db      	ldr	r3, [r3, #12]
 8002bee:	f003 0203 	and.w	r2, r3, #3
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	429a      	cmp	r2, r3
 8002bf8:	d10d      	bne.n	8002c16 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
       ||
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d009      	beq.n	8002c16 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8002c02:	4b5f      	ldr	r3, [pc, #380]	; (8002d80 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002c04:	68db      	ldr	r3, [r3, #12]
 8002c06:	091b      	lsrs	r3, r3, #4
 8002c08:	f003 0307 	and.w	r3, r3, #7
 8002c0c:	1c5a      	adds	r2, r3, #1
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	685b      	ldr	r3, [r3, #4]
       ||
 8002c12:	429a      	cmp	r2, r3
 8002c14:	d044      	beq.n	8002ca0 <RCCEx_PLLSAI2_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 8002c16:	2301      	movs	r3, #1
 8002c18:	73fb      	strb	r3, [r7, #15]
 8002c1a:	e041      	b.n	8002ca0 <RCCEx_PLLSAI2_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	2b02      	cmp	r3, #2
 8002c22:	d00c      	beq.n	8002c3e <RCCEx_PLLSAI2_Config+0x6e>
 8002c24:	2b03      	cmp	r3, #3
 8002c26:	d013      	beq.n	8002c50 <RCCEx_PLLSAI2_Config+0x80>
 8002c28:	2b01      	cmp	r3, #1
 8002c2a:	d120      	bne.n	8002c6e <RCCEx_PLLSAI2_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002c2c:	4b54      	ldr	r3, [pc, #336]	; (8002d80 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	f003 0302 	and.w	r3, r3, #2
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d11d      	bne.n	8002c74 <RCCEx_PLLSAI2_Config+0xa4>
      {
        status = HAL_ERROR;
 8002c38:	2301      	movs	r3, #1
 8002c3a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002c3c:	e01a      	b.n	8002c74 <RCCEx_PLLSAI2_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002c3e:	4b50      	ldr	r3, [pc, #320]	; (8002d80 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d116      	bne.n	8002c78 <RCCEx_PLLSAI2_Config+0xa8>
      {
        status = HAL_ERROR;
 8002c4a:	2301      	movs	r3, #1
 8002c4c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002c4e:	e013      	b.n	8002c78 <RCCEx_PLLSAI2_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002c50:	4b4b      	ldr	r3, [pc, #300]	; (8002d80 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d10f      	bne.n	8002c7c <RCCEx_PLLSAI2_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002c5c:	4b48      	ldr	r3, [pc, #288]	; (8002d80 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d109      	bne.n	8002c7c <RCCEx_PLLSAI2_Config+0xac>
        {
          status = HAL_ERROR;
 8002c68:	2301      	movs	r3, #1
 8002c6a:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002c6c:	e006      	b.n	8002c7c <RCCEx_PLLSAI2_Config+0xac>
    default:
      status = HAL_ERROR;
 8002c6e:	2301      	movs	r3, #1
 8002c70:	73fb      	strb	r3, [r7, #15]
      break;
 8002c72:	e004      	b.n	8002c7e <RCCEx_PLLSAI2_Config+0xae>
      break;
 8002c74:	bf00      	nop
 8002c76:	e002      	b.n	8002c7e <RCCEx_PLLSAI2_Config+0xae>
      break;
 8002c78:	bf00      	nop
 8002c7a:	e000      	b.n	8002c7e <RCCEx_PLLSAI2_Config+0xae>
      break;
 8002c7c:	bf00      	nop
    }

    if(status == HAL_OK)
 8002c7e:	7bfb      	ldrb	r3, [r7, #15]
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d10d      	bne.n	8002ca0 <RCCEx_PLLSAI2_Config+0xd0>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002c84:	4b3e      	ldr	r3, [pc, #248]	; (8002d80 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002c86:	68db      	ldr	r3, [r3, #12]
 8002c88:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	6819      	ldr	r1, [r3, #0]
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	685b      	ldr	r3, [r3, #4]
 8002c94:	3b01      	subs	r3, #1
 8002c96:	011b      	lsls	r3, r3, #4
 8002c98:	430b      	orrs	r3, r1
 8002c9a:	4939      	ldr	r1, [pc, #228]	; (8002d80 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002c9c:	4313      	orrs	r3, r2
 8002c9e:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002ca0:	7bfb      	ldrb	r3, [r7, #15]
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d167      	bne.n	8002d76 <RCCEx_PLLSAI2_Config+0x1a6>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8002ca6:	4b36      	ldr	r3, [pc, #216]	; (8002d80 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	4a35      	ldr	r2, [pc, #212]	; (8002d80 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002cac:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002cb0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002cb2:	f7fd fcd1 	bl	8000658 <HAL_GetTick>
 8002cb6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002cb8:	e009      	b.n	8002cce <RCCEx_PLLSAI2_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002cba:	f7fd fccd 	bl	8000658 <HAL_GetTick>
 8002cbe:	4602      	mov	r2, r0
 8002cc0:	68bb      	ldr	r3, [r7, #8]
 8002cc2:	1ad3      	subs	r3, r2, r3
 8002cc4:	2b02      	cmp	r3, #2
 8002cc6:	d902      	bls.n	8002cce <RCCEx_PLLSAI2_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 8002cc8:	2303      	movs	r3, #3
 8002cca:	73fb      	strb	r3, [r7, #15]
        break;
 8002ccc:	e005      	b.n	8002cda <RCCEx_PLLSAI2_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002cce:	4b2c      	ldr	r3, [pc, #176]	; (8002d80 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d1ef      	bne.n	8002cba <RCCEx_PLLSAI2_Config+0xea>
      }
    }

    if(status == HAL_OK)
 8002cda:	7bfb      	ldrb	r3, [r7, #15]
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d14a      	bne.n	8002d76 <RCCEx_PLLSAI2_Config+0x1a6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002ce0:	683b      	ldr	r3, [r7, #0]
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d111      	bne.n	8002d0a <RCCEx_PLLSAI2_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002ce6:	4b26      	ldr	r3, [pc, #152]	; (8002d80 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002ce8:	695b      	ldr	r3, [r3, #20]
 8002cea:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8002cee:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002cf2:	687a      	ldr	r2, [r7, #4]
 8002cf4:	6892      	ldr	r2, [r2, #8]
 8002cf6:	0211      	lsls	r1, r2, #8
 8002cf8:	687a      	ldr	r2, [r7, #4]
 8002cfa:	68d2      	ldr	r2, [r2, #12]
 8002cfc:	0912      	lsrs	r2, r2, #4
 8002cfe:	0452      	lsls	r2, r2, #17
 8002d00:	430a      	orrs	r2, r1
 8002d02:	491f      	ldr	r1, [pc, #124]	; (8002d80 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002d04:	4313      	orrs	r3, r2
 8002d06:	614b      	str	r3, [r1, #20]
 8002d08:	e011      	b.n	8002d2e <RCCEx_PLLSAI2_Config+0x15e>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002d0a:	4b1d      	ldr	r3, [pc, #116]	; (8002d80 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002d0c:	695b      	ldr	r3, [r3, #20]
 8002d0e:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002d12:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002d16:	687a      	ldr	r2, [r7, #4]
 8002d18:	6892      	ldr	r2, [r2, #8]
 8002d1a:	0211      	lsls	r1, r2, #8
 8002d1c:	687a      	ldr	r2, [r7, #4]
 8002d1e:	6912      	ldr	r2, [r2, #16]
 8002d20:	0852      	lsrs	r2, r2, #1
 8002d22:	3a01      	subs	r2, #1
 8002d24:	0652      	lsls	r2, r2, #25
 8002d26:	430a      	orrs	r2, r1
 8002d28:	4915      	ldr	r1, [pc, #84]	; (8002d80 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002d2a:	4313      	orrs	r3, r2
 8002d2c:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8002d2e:	4b14      	ldr	r3, [pc, #80]	; (8002d80 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	4a13      	ldr	r2, [pc, #76]	; (8002d80 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002d34:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002d38:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d3a:	f7fd fc8d 	bl	8000658 <HAL_GetTick>
 8002d3e:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002d40:	e009      	b.n	8002d56 <RCCEx_PLLSAI2_Config+0x186>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002d42:	f7fd fc89 	bl	8000658 <HAL_GetTick>
 8002d46:	4602      	mov	r2, r0
 8002d48:	68bb      	ldr	r3, [r7, #8]
 8002d4a:	1ad3      	subs	r3, r2, r3
 8002d4c:	2b02      	cmp	r3, #2
 8002d4e:	d902      	bls.n	8002d56 <RCCEx_PLLSAI2_Config+0x186>
        {
          status = HAL_TIMEOUT;
 8002d50:	2303      	movs	r3, #3
 8002d52:	73fb      	strb	r3, [r7, #15]
          break;
 8002d54:	e005      	b.n	8002d62 <RCCEx_PLLSAI2_Config+0x192>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002d56:	4b0a      	ldr	r3, [pc, #40]	; (8002d80 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d0ef      	beq.n	8002d42 <RCCEx_PLLSAI2_Config+0x172>
        }
      }

      if(status == HAL_OK)
 8002d62:	7bfb      	ldrb	r3, [r7, #15]
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d106      	bne.n	8002d76 <RCCEx_PLLSAI2_Config+0x1a6>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8002d68:	4b05      	ldr	r3, [pc, #20]	; (8002d80 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002d6a:	695a      	ldr	r2, [r3, #20]
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	695b      	ldr	r3, [r3, #20]
 8002d70:	4903      	ldr	r1, [pc, #12]	; (8002d80 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002d72:	4313      	orrs	r3, r2
 8002d74:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8002d76:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d78:	4618      	mov	r0, r3
 8002d7a:	3710      	adds	r7, #16
 8002d7c:	46bd      	mov	sp, r7
 8002d7e:	bd80      	pop	{r7, pc}
 8002d80:	40021000 	.word	0x40021000

08002d84 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002d84:	b580      	push	{r7, lr}
 8002d86:	b082      	sub	sp, #8
 8002d88:	af00      	add	r7, sp, #0
 8002d8a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d101      	bne.n	8002d96 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002d92:	2301      	movs	r3, #1
 8002d94:	e040      	b.n	8002e18 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d106      	bne.n	8002dac <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	2200      	movs	r2, #0
 8002da2:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002da6:	6878      	ldr	r0, [r7, #4]
 8002da8:	f001 f9f0 	bl	800418c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	2224      	movs	r2, #36	; 0x24
 8002db0:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	681a      	ldr	r2, [r3, #0]
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	f022 0201 	bic.w	r2, r2, #1
 8002dc0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002dc2:	6878      	ldr	r0, [r7, #4]
 8002dc4:	f000 f8c0 	bl	8002f48 <UART_SetConfig>
 8002dc8:	4603      	mov	r3, r0
 8002dca:	2b01      	cmp	r3, #1
 8002dcc:	d101      	bne.n	8002dd2 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8002dce:	2301      	movs	r3, #1
 8002dd0:	e022      	b.n	8002e18 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d002      	beq.n	8002de0 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8002dda:	6878      	ldr	r0, [r7, #4]
 8002ddc:	f000 fbfc 	bl	80035d8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	685a      	ldr	r2, [r3, #4]
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002dee:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	689a      	ldr	r2, [r3, #8]
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002dfe:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	681a      	ldr	r2, [r3, #0]
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	f042 0201 	orr.w	r2, r2, #1
 8002e0e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002e10:	6878      	ldr	r0, [r7, #4]
 8002e12:	f000 fc83 	bl	800371c <UART_CheckIdleState>
 8002e16:	4603      	mov	r3, r0
}
 8002e18:	4618      	mov	r0, r3
 8002e1a:	3708      	adds	r7, #8
 8002e1c:	46bd      	mov	sp, r7
 8002e1e:	bd80      	pop	{r7, pc}

08002e20 <HAL_UART_Transmit>:
  * @param Size    Amount of data to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002e20:	b580      	push	{r7, lr}
 8002e22:	b08a      	sub	sp, #40	; 0x28
 8002e24:	af02      	add	r7, sp, #8
 8002e26:	60f8      	str	r0, [r7, #12]
 8002e28:	60b9      	str	r1, [r7, #8]
 8002e2a:	603b      	str	r3, [r7, #0]
 8002e2c:	4613      	mov	r3, r2
 8002e2e:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002e34:	2b20      	cmp	r3, #32
 8002e36:	f040 8081 	bne.w	8002f3c <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002e3a:	68bb      	ldr	r3, [r7, #8]
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d002      	beq.n	8002e46 <HAL_UART_Transmit+0x26>
 8002e40:	88fb      	ldrh	r3, [r7, #6]
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d101      	bne.n	8002e4a <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8002e46:	2301      	movs	r3, #1
 8002e48:	e079      	b.n	8002f3e <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8002e50:	2b01      	cmp	r3, #1
 8002e52:	d101      	bne.n	8002e58 <HAL_UART_Transmit+0x38>
 8002e54:	2302      	movs	r3, #2
 8002e56:	e072      	b.n	8002f3e <HAL_UART_Transmit+0x11e>
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	2201      	movs	r2, #1
 8002e5c:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	2200      	movs	r2, #0
 8002e64:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	2221      	movs	r2, #33	; 0x21
 8002e6a:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8002e6c:	f7fd fbf4 	bl	8000658 <HAL_GetTick>
 8002e70:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	88fa      	ldrh	r2, [r7, #6]
 8002e76:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	88fa      	ldrh	r2, [r7, #6]
 8002e7e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	689b      	ldr	r3, [r3, #8]
 8002e86:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002e8a:	d108      	bne.n	8002e9e <HAL_UART_Transmit+0x7e>
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	691b      	ldr	r3, [r3, #16]
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d104      	bne.n	8002e9e <HAL_UART_Transmit+0x7e>
    {
      pdata8bits  = NULL;
 8002e94:	2300      	movs	r3, #0
 8002e96:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002e98:	68bb      	ldr	r3, [r7, #8]
 8002e9a:	61bb      	str	r3, [r7, #24]
 8002e9c:	e003      	b.n	8002ea6 <HAL_UART_Transmit+0x86>
    }
    else
    {
      pdata8bits  = pData;
 8002e9e:	68bb      	ldr	r3, [r7, #8]
 8002ea0:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002ea2:	2300      	movs	r3, #0
 8002ea4:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002ea6:	e02d      	b.n	8002f04 <HAL_UART_Transmit+0xe4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002ea8:	683b      	ldr	r3, [r7, #0]
 8002eaa:	9300      	str	r3, [sp, #0]
 8002eac:	697b      	ldr	r3, [r7, #20]
 8002eae:	2200      	movs	r2, #0
 8002eb0:	2180      	movs	r1, #128	; 0x80
 8002eb2:	68f8      	ldr	r0, [r7, #12]
 8002eb4:	f000 fc77 	bl	80037a6 <UART_WaitOnFlagUntilTimeout>
 8002eb8:	4603      	mov	r3, r0
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d001      	beq.n	8002ec2 <HAL_UART_Transmit+0xa2>
      {
        return HAL_TIMEOUT;
 8002ebe:	2303      	movs	r3, #3
 8002ec0:	e03d      	b.n	8002f3e <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 8002ec2:	69fb      	ldr	r3, [r7, #28]
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d10b      	bne.n	8002ee0 <HAL_UART_Transmit+0xc0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002ec8:	69bb      	ldr	r3, [r7, #24]
 8002eca:	881a      	ldrh	r2, [r3, #0]
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002ed4:	b292      	uxth	r2, r2
 8002ed6:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8002ed8:	69bb      	ldr	r3, [r7, #24]
 8002eda:	3302      	adds	r3, #2
 8002edc:	61bb      	str	r3, [r7, #24]
 8002ede:	e008      	b.n	8002ef2 <HAL_UART_Transmit+0xd2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002ee0:	69fb      	ldr	r3, [r7, #28]
 8002ee2:	781a      	ldrb	r2, [r3, #0]
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	b292      	uxth	r2, r2
 8002eea:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8002eec:	69fb      	ldr	r3, [r7, #28]
 8002eee:	3301      	adds	r3, #1
 8002ef0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002ef8:	b29b      	uxth	r3, r3
 8002efa:	3b01      	subs	r3, #1
 8002efc:	b29a      	uxth	r2, r3
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002f0a:	b29b      	uxth	r3, r3
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d1cb      	bne.n	8002ea8 <HAL_UART_Transmit+0x88>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002f10:	683b      	ldr	r3, [r7, #0]
 8002f12:	9300      	str	r3, [sp, #0]
 8002f14:	697b      	ldr	r3, [r7, #20]
 8002f16:	2200      	movs	r2, #0
 8002f18:	2140      	movs	r1, #64	; 0x40
 8002f1a:	68f8      	ldr	r0, [r7, #12]
 8002f1c:	f000 fc43 	bl	80037a6 <UART_WaitOnFlagUntilTimeout>
 8002f20:	4603      	mov	r3, r0
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d001      	beq.n	8002f2a <HAL_UART_Transmit+0x10a>
    {
      return HAL_TIMEOUT;
 8002f26:	2303      	movs	r3, #3
 8002f28:	e009      	b.n	8002f3e <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	2220      	movs	r2, #32
 8002f2e:	675a      	str	r2, [r3, #116]	; 0x74

    __HAL_UNLOCK(huart);
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	2200      	movs	r2, #0
 8002f34:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    return HAL_OK;
 8002f38:	2300      	movs	r3, #0
 8002f3a:	e000      	b.n	8002f3e <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 8002f3c:	2302      	movs	r3, #2
  }
}
 8002f3e:	4618      	mov	r0, r3
 8002f40:	3720      	adds	r7, #32
 8002f42:	46bd      	mov	sp, r7
 8002f44:	bd80      	pop	{r7, pc}
	...

08002f48 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002f48:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8002f4c:	b088      	sub	sp, #32
 8002f4e:	af00      	add	r7, sp, #0
 8002f50:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8002f52:	2300      	movs	r3, #0
 8002f54:	617b      	str	r3, [r7, #20]
  HAL_StatusTypeDef ret               = HAL_OK;
 8002f56:	2300      	movs	r3, #0
 8002f58:	74fb      	strb	r3, [r7, #19]
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;
 8002f5a:	2300      	movs	r3, #0
 8002f5c:	60fb      	str	r3, [r7, #12]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	689a      	ldr	r2, [r3, #8]
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	691b      	ldr	r3, [r3, #16]
 8002f66:	431a      	orrs	r2, r3
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	695b      	ldr	r3, [r3, #20]
 8002f6c:	431a      	orrs	r2, r3
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	69db      	ldr	r3, [r3, #28]
 8002f72:	4313      	orrs	r3, r2
 8002f74:	61fb      	str	r3, [r7, #28]
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
#endif /* USART_CR1_FIFOEN */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	681a      	ldr	r2, [r3, #0]
 8002f7c:	4bac      	ldr	r3, [pc, #688]	; (8003230 <UART_SetConfig+0x2e8>)
 8002f7e:	4013      	ands	r3, r2
 8002f80:	687a      	ldr	r2, [r7, #4]
 8002f82:	6812      	ldr	r2, [r2, #0]
 8002f84:	69f9      	ldr	r1, [r7, #28]
 8002f86:	430b      	orrs	r3, r1
 8002f88:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	685b      	ldr	r3, [r3, #4]
 8002f90:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	68da      	ldr	r2, [r3, #12]
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	430a      	orrs	r2, r1
 8002f9e:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	699b      	ldr	r3, [r3, #24]
 8002fa4:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	4aa2      	ldr	r2, [pc, #648]	; (8003234 <UART_SetConfig+0x2ec>)
 8002fac:	4293      	cmp	r3, r2
 8002fae:	d004      	beq.n	8002fba <UART_SetConfig+0x72>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	6a1b      	ldr	r3, [r3, #32]
 8002fb4:	69fa      	ldr	r2, [r7, #28]
 8002fb6:	4313      	orrs	r3, r2
 8002fb8:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	689b      	ldr	r3, [r3, #8]
 8002fc0:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	69fa      	ldr	r2, [r7, #28]
 8002fca:	430a      	orrs	r2, r1
 8002fcc:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	4a99      	ldr	r2, [pc, #612]	; (8003238 <UART_SetConfig+0x2f0>)
 8002fd4:	4293      	cmp	r3, r2
 8002fd6:	d121      	bne.n	800301c <UART_SetConfig+0xd4>
 8002fd8:	4b98      	ldr	r3, [pc, #608]	; (800323c <UART_SetConfig+0x2f4>)
 8002fda:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002fde:	f003 0303 	and.w	r3, r3, #3
 8002fe2:	2b03      	cmp	r3, #3
 8002fe4:	d816      	bhi.n	8003014 <UART_SetConfig+0xcc>
 8002fe6:	a201      	add	r2, pc, #4	; (adr r2, 8002fec <UART_SetConfig+0xa4>)
 8002fe8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002fec:	08002ffd 	.word	0x08002ffd
 8002ff0:	08003009 	.word	0x08003009
 8002ff4:	08003003 	.word	0x08003003
 8002ff8:	0800300f 	.word	0x0800300f
 8002ffc:	2301      	movs	r3, #1
 8002ffe:	76fb      	strb	r3, [r7, #27]
 8003000:	e0e8      	b.n	80031d4 <UART_SetConfig+0x28c>
 8003002:	2302      	movs	r3, #2
 8003004:	76fb      	strb	r3, [r7, #27]
 8003006:	e0e5      	b.n	80031d4 <UART_SetConfig+0x28c>
 8003008:	2304      	movs	r3, #4
 800300a:	76fb      	strb	r3, [r7, #27]
 800300c:	e0e2      	b.n	80031d4 <UART_SetConfig+0x28c>
 800300e:	2308      	movs	r3, #8
 8003010:	76fb      	strb	r3, [r7, #27]
 8003012:	e0df      	b.n	80031d4 <UART_SetConfig+0x28c>
 8003014:	2310      	movs	r3, #16
 8003016:	76fb      	strb	r3, [r7, #27]
 8003018:	bf00      	nop
 800301a:	e0db      	b.n	80031d4 <UART_SetConfig+0x28c>
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	4a87      	ldr	r2, [pc, #540]	; (8003240 <UART_SetConfig+0x2f8>)
 8003022:	4293      	cmp	r3, r2
 8003024:	d134      	bne.n	8003090 <UART_SetConfig+0x148>
 8003026:	4b85      	ldr	r3, [pc, #532]	; (800323c <UART_SetConfig+0x2f4>)
 8003028:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800302c:	f003 030c 	and.w	r3, r3, #12
 8003030:	2b0c      	cmp	r3, #12
 8003032:	d829      	bhi.n	8003088 <UART_SetConfig+0x140>
 8003034:	a201      	add	r2, pc, #4	; (adr r2, 800303c <UART_SetConfig+0xf4>)
 8003036:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800303a:	bf00      	nop
 800303c:	08003071 	.word	0x08003071
 8003040:	08003089 	.word	0x08003089
 8003044:	08003089 	.word	0x08003089
 8003048:	08003089 	.word	0x08003089
 800304c:	0800307d 	.word	0x0800307d
 8003050:	08003089 	.word	0x08003089
 8003054:	08003089 	.word	0x08003089
 8003058:	08003089 	.word	0x08003089
 800305c:	08003077 	.word	0x08003077
 8003060:	08003089 	.word	0x08003089
 8003064:	08003089 	.word	0x08003089
 8003068:	08003089 	.word	0x08003089
 800306c:	08003083 	.word	0x08003083
 8003070:	2300      	movs	r3, #0
 8003072:	76fb      	strb	r3, [r7, #27]
 8003074:	e0ae      	b.n	80031d4 <UART_SetConfig+0x28c>
 8003076:	2302      	movs	r3, #2
 8003078:	76fb      	strb	r3, [r7, #27]
 800307a:	e0ab      	b.n	80031d4 <UART_SetConfig+0x28c>
 800307c:	2304      	movs	r3, #4
 800307e:	76fb      	strb	r3, [r7, #27]
 8003080:	e0a8      	b.n	80031d4 <UART_SetConfig+0x28c>
 8003082:	2308      	movs	r3, #8
 8003084:	76fb      	strb	r3, [r7, #27]
 8003086:	e0a5      	b.n	80031d4 <UART_SetConfig+0x28c>
 8003088:	2310      	movs	r3, #16
 800308a:	76fb      	strb	r3, [r7, #27]
 800308c:	bf00      	nop
 800308e:	e0a1      	b.n	80031d4 <UART_SetConfig+0x28c>
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	4a6b      	ldr	r2, [pc, #428]	; (8003244 <UART_SetConfig+0x2fc>)
 8003096:	4293      	cmp	r3, r2
 8003098:	d120      	bne.n	80030dc <UART_SetConfig+0x194>
 800309a:	4b68      	ldr	r3, [pc, #416]	; (800323c <UART_SetConfig+0x2f4>)
 800309c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030a0:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80030a4:	2b10      	cmp	r3, #16
 80030a6:	d00f      	beq.n	80030c8 <UART_SetConfig+0x180>
 80030a8:	2b10      	cmp	r3, #16
 80030aa:	d802      	bhi.n	80030b2 <UART_SetConfig+0x16a>
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d005      	beq.n	80030bc <UART_SetConfig+0x174>
 80030b0:	e010      	b.n	80030d4 <UART_SetConfig+0x18c>
 80030b2:	2b20      	cmp	r3, #32
 80030b4:	d005      	beq.n	80030c2 <UART_SetConfig+0x17a>
 80030b6:	2b30      	cmp	r3, #48	; 0x30
 80030b8:	d009      	beq.n	80030ce <UART_SetConfig+0x186>
 80030ba:	e00b      	b.n	80030d4 <UART_SetConfig+0x18c>
 80030bc:	2300      	movs	r3, #0
 80030be:	76fb      	strb	r3, [r7, #27]
 80030c0:	e088      	b.n	80031d4 <UART_SetConfig+0x28c>
 80030c2:	2302      	movs	r3, #2
 80030c4:	76fb      	strb	r3, [r7, #27]
 80030c6:	e085      	b.n	80031d4 <UART_SetConfig+0x28c>
 80030c8:	2304      	movs	r3, #4
 80030ca:	76fb      	strb	r3, [r7, #27]
 80030cc:	e082      	b.n	80031d4 <UART_SetConfig+0x28c>
 80030ce:	2308      	movs	r3, #8
 80030d0:	76fb      	strb	r3, [r7, #27]
 80030d2:	e07f      	b.n	80031d4 <UART_SetConfig+0x28c>
 80030d4:	2310      	movs	r3, #16
 80030d6:	76fb      	strb	r3, [r7, #27]
 80030d8:	bf00      	nop
 80030da:	e07b      	b.n	80031d4 <UART_SetConfig+0x28c>
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	4a59      	ldr	r2, [pc, #356]	; (8003248 <UART_SetConfig+0x300>)
 80030e2:	4293      	cmp	r3, r2
 80030e4:	d120      	bne.n	8003128 <UART_SetConfig+0x1e0>
 80030e6:	4b55      	ldr	r3, [pc, #340]	; (800323c <UART_SetConfig+0x2f4>)
 80030e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030ec:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80030f0:	2b40      	cmp	r3, #64	; 0x40
 80030f2:	d00f      	beq.n	8003114 <UART_SetConfig+0x1cc>
 80030f4:	2b40      	cmp	r3, #64	; 0x40
 80030f6:	d802      	bhi.n	80030fe <UART_SetConfig+0x1b6>
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d005      	beq.n	8003108 <UART_SetConfig+0x1c0>
 80030fc:	e010      	b.n	8003120 <UART_SetConfig+0x1d8>
 80030fe:	2b80      	cmp	r3, #128	; 0x80
 8003100:	d005      	beq.n	800310e <UART_SetConfig+0x1c6>
 8003102:	2bc0      	cmp	r3, #192	; 0xc0
 8003104:	d009      	beq.n	800311a <UART_SetConfig+0x1d2>
 8003106:	e00b      	b.n	8003120 <UART_SetConfig+0x1d8>
 8003108:	2300      	movs	r3, #0
 800310a:	76fb      	strb	r3, [r7, #27]
 800310c:	e062      	b.n	80031d4 <UART_SetConfig+0x28c>
 800310e:	2302      	movs	r3, #2
 8003110:	76fb      	strb	r3, [r7, #27]
 8003112:	e05f      	b.n	80031d4 <UART_SetConfig+0x28c>
 8003114:	2304      	movs	r3, #4
 8003116:	76fb      	strb	r3, [r7, #27]
 8003118:	e05c      	b.n	80031d4 <UART_SetConfig+0x28c>
 800311a:	2308      	movs	r3, #8
 800311c:	76fb      	strb	r3, [r7, #27]
 800311e:	e059      	b.n	80031d4 <UART_SetConfig+0x28c>
 8003120:	2310      	movs	r3, #16
 8003122:	76fb      	strb	r3, [r7, #27]
 8003124:	bf00      	nop
 8003126:	e055      	b.n	80031d4 <UART_SetConfig+0x28c>
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	4a47      	ldr	r2, [pc, #284]	; (800324c <UART_SetConfig+0x304>)
 800312e:	4293      	cmp	r3, r2
 8003130:	d124      	bne.n	800317c <UART_SetConfig+0x234>
 8003132:	4b42      	ldr	r3, [pc, #264]	; (800323c <UART_SetConfig+0x2f4>)
 8003134:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003138:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800313c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003140:	d012      	beq.n	8003168 <UART_SetConfig+0x220>
 8003142:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003146:	d802      	bhi.n	800314e <UART_SetConfig+0x206>
 8003148:	2b00      	cmp	r3, #0
 800314a:	d007      	beq.n	800315c <UART_SetConfig+0x214>
 800314c:	e012      	b.n	8003174 <UART_SetConfig+0x22c>
 800314e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003152:	d006      	beq.n	8003162 <UART_SetConfig+0x21a>
 8003154:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003158:	d009      	beq.n	800316e <UART_SetConfig+0x226>
 800315a:	e00b      	b.n	8003174 <UART_SetConfig+0x22c>
 800315c:	2300      	movs	r3, #0
 800315e:	76fb      	strb	r3, [r7, #27]
 8003160:	e038      	b.n	80031d4 <UART_SetConfig+0x28c>
 8003162:	2302      	movs	r3, #2
 8003164:	76fb      	strb	r3, [r7, #27]
 8003166:	e035      	b.n	80031d4 <UART_SetConfig+0x28c>
 8003168:	2304      	movs	r3, #4
 800316a:	76fb      	strb	r3, [r7, #27]
 800316c:	e032      	b.n	80031d4 <UART_SetConfig+0x28c>
 800316e:	2308      	movs	r3, #8
 8003170:	76fb      	strb	r3, [r7, #27]
 8003172:	e02f      	b.n	80031d4 <UART_SetConfig+0x28c>
 8003174:	2310      	movs	r3, #16
 8003176:	76fb      	strb	r3, [r7, #27]
 8003178:	bf00      	nop
 800317a:	e02b      	b.n	80031d4 <UART_SetConfig+0x28c>
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	4a2c      	ldr	r2, [pc, #176]	; (8003234 <UART_SetConfig+0x2ec>)
 8003182:	4293      	cmp	r3, r2
 8003184:	d124      	bne.n	80031d0 <UART_SetConfig+0x288>
 8003186:	4b2d      	ldr	r3, [pc, #180]	; (800323c <UART_SetConfig+0x2f4>)
 8003188:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800318c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003190:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003194:	d012      	beq.n	80031bc <UART_SetConfig+0x274>
 8003196:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800319a:	d802      	bhi.n	80031a2 <UART_SetConfig+0x25a>
 800319c:	2b00      	cmp	r3, #0
 800319e:	d007      	beq.n	80031b0 <UART_SetConfig+0x268>
 80031a0:	e012      	b.n	80031c8 <UART_SetConfig+0x280>
 80031a2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80031a6:	d006      	beq.n	80031b6 <UART_SetConfig+0x26e>
 80031a8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80031ac:	d009      	beq.n	80031c2 <UART_SetConfig+0x27a>
 80031ae:	e00b      	b.n	80031c8 <UART_SetConfig+0x280>
 80031b0:	2300      	movs	r3, #0
 80031b2:	76fb      	strb	r3, [r7, #27]
 80031b4:	e00e      	b.n	80031d4 <UART_SetConfig+0x28c>
 80031b6:	2302      	movs	r3, #2
 80031b8:	76fb      	strb	r3, [r7, #27]
 80031ba:	e00b      	b.n	80031d4 <UART_SetConfig+0x28c>
 80031bc:	2304      	movs	r3, #4
 80031be:	76fb      	strb	r3, [r7, #27]
 80031c0:	e008      	b.n	80031d4 <UART_SetConfig+0x28c>
 80031c2:	2308      	movs	r3, #8
 80031c4:	76fb      	strb	r3, [r7, #27]
 80031c6:	e005      	b.n	80031d4 <UART_SetConfig+0x28c>
 80031c8:	2310      	movs	r3, #16
 80031ca:	76fb      	strb	r3, [r7, #27]
 80031cc:	bf00      	nop
 80031ce:	e001      	b.n	80031d4 <UART_SetConfig+0x28c>
 80031d0:	2310      	movs	r3, #16
 80031d2:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	4a16      	ldr	r2, [pc, #88]	; (8003234 <UART_SetConfig+0x2ec>)
 80031da:	4293      	cmp	r3, r2
 80031dc:	f040 80fa 	bne.w	80033d4 <UART_SetConfig+0x48c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80031e0:	7efb      	ldrb	r3, [r7, #27]
 80031e2:	2b08      	cmp	r3, #8
 80031e4:	d836      	bhi.n	8003254 <UART_SetConfig+0x30c>
 80031e6:	a201      	add	r2, pc, #4	; (adr r2, 80031ec <UART_SetConfig+0x2a4>)
 80031e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031ec:	08003211 	.word	0x08003211
 80031f0:	08003255 	.word	0x08003255
 80031f4:	08003219 	.word	0x08003219
 80031f8:	08003255 	.word	0x08003255
 80031fc:	0800321f 	.word	0x0800321f
 8003200:	08003255 	.word	0x08003255
 8003204:	08003255 	.word	0x08003255
 8003208:	08003255 	.word	0x08003255
 800320c:	08003227 	.word	0x08003227
    {
      case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = (HAL_RCC_GetPCLK1Freq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = HAL_RCC_GetPCLK1Freq();
 8003210:	f7ff f87c 	bl	800230c <HAL_RCC_GetPCLK1Freq>
 8003214:	60f8      	str	r0, [r7, #12]
#endif /* USART_PRESC_PRESCALER */
        break;
 8003216:	e020      	b.n	800325a <UART_SetConfig+0x312>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = ((uint32_t)HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = (uint32_t)HSI_VALUE;
 8003218:	4b0d      	ldr	r3, [pc, #52]	; (8003250 <UART_SetConfig+0x308>)
 800321a:	60fb      	str	r3, [r7, #12]
#endif /* USART_PRESC_PRESCALER */
        break;
 800321c:	e01d      	b.n	800325a <UART_SetConfig+0x312>
      case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = (HAL_RCC_GetSysClockFreq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = HAL_RCC_GetSysClockFreq();
 800321e:	f7fe ffdf 	bl	80021e0 <HAL_RCC_GetSysClockFreq>
 8003222:	60f8      	str	r0, [r7, #12]
#endif /* USART_PRESC_PRESCALER */
        break;
 8003224:	e019      	b.n	800325a <UART_SetConfig+0x312>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = (uint32_t)LSE_VALUE;
 8003226:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800322a:	60fb      	str	r3, [r7, #12]
#endif /* USART_PRESC_PRESCALER */
        break;
 800322c:	e015      	b.n	800325a <UART_SetConfig+0x312>
 800322e:	bf00      	nop
 8003230:	efff69f3 	.word	0xefff69f3
 8003234:	40008000 	.word	0x40008000
 8003238:	40013800 	.word	0x40013800
 800323c:	40021000 	.word	0x40021000
 8003240:	40004400 	.word	0x40004400
 8003244:	40004800 	.word	0x40004800
 8003248:	40004c00 	.word	0x40004c00
 800324c:	40005000 	.word	0x40005000
 8003250:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8003254:	2301      	movs	r3, #1
 8003256:	74fb      	strb	r3, [r7, #19]
        break;
 8003258:	bf00      	nop
    }

    /* if proper clock source reported */
    if (lpuart_ker_ck_pres != 0U)
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	2b00      	cmp	r3, #0
 800325e:	f000 81ac 	beq.w	80035ba <UART_SetConfig+0x672>
    {
      /* ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	685a      	ldr	r2, [r3, #4]
 8003266:	4613      	mov	r3, r2
 8003268:	005b      	lsls	r3, r3, #1
 800326a:	4413      	add	r3, r2
 800326c:	68fa      	ldr	r2, [r7, #12]
 800326e:	429a      	cmp	r2, r3
 8003270:	d305      	bcc.n	800327e <UART_SetConfig+0x336>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	685b      	ldr	r3, [r3, #4]
 8003276:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003278:	68fa      	ldr	r2, [r7, #12]
 800327a:	429a      	cmp	r2, r3
 800327c:	d902      	bls.n	8003284 <UART_SetConfig+0x33c>
      {
        ret = HAL_ERROR;
 800327e:	2301      	movs	r3, #1
 8003280:	74fb      	strb	r3, [r7, #19]
 8003282:	e19a      	b.n	80035ba <UART_SetConfig+0x672>
      }
      else
      {
        switch (clocksource)
 8003284:	7efb      	ldrb	r3, [r7, #27]
 8003286:	2b08      	cmp	r3, #8
 8003288:	f200 8091 	bhi.w	80033ae <UART_SetConfig+0x466>
 800328c:	a201      	add	r2, pc, #4	; (adr r2, 8003294 <UART_SetConfig+0x34c>)
 800328e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003292:	bf00      	nop
 8003294:	080032b9 	.word	0x080032b9
 8003298:	080033af 	.word	0x080033af
 800329c:	08003305 	.word	0x08003305
 80032a0:	080033af 	.word	0x080033af
 80032a4:	08003339 	.word	0x08003339
 80032a8:	080033af 	.word	0x080033af
 80032ac:	080033af 	.word	0x080033af
 80032b0:	080033af 	.word	0x080033af
 80032b4:	08003385 	.word	0x08003385
        {
          case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 80032b8:	f7ff f828 	bl	800230c <HAL_RCC_GetPCLK1Freq>
 80032bc:	4603      	mov	r3, r0
 80032be:	4619      	mov	r1, r3
 80032c0:	f04f 0200 	mov.w	r2, #0
 80032c4:	f04f 0300 	mov.w	r3, #0
 80032c8:	f04f 0400 	mov.w	r4, #0
 80032cc:	0214      	lsls	r4, r2, #8
 80032ce:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 80032d2:	020b      	lsls	r3, r1, #8
 80032d4:	687a      	ldr	r2, [r7, #4]
 80032d6:	6852      	ldr	r2, [r2, #4]
 80032d8:	0852      	lsrs	r2, r2, #1
 80032da:	4611      	mov	r1, r2
 80032dc:	f04f 0200 	mov.w	r2, #0
 80032e0:	eb13 0b01 	adds.w	fp, r3, r1
 80032e4:	eb44 0c02 	adc.w	ip, r4, r2
 80032e8:	4658      	mov	r0, fp
 80032ea:	4661      	mov	r1, ip
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	685b      	ldr	r3, [r3, #4]
 80032f0:	f04f 0400 	mov.w	r4, #0
 80032f4:	461a      	mov	r2, r3
 80032f6:	4623      	mov	r3, r4
 80032f8:	f7fc ffc2 	bl	8000280 <__aeabi_uldivmod>
 80032fc:	4603      	mov	r3, r0
 80032fe:	460c      	mov	r4, r1
 8003300:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
            break;
 8003302:	e057      	b.n	80033b4 <UART_SetConfig+0x46c>
          case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate));
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	685b      	ldr	r3, [r3, #4]
 8003308:	085b      	lsrs	r3, r3, #1
 800330a:	f04f 0400 	mov.w	r4, #0
 800330e:	49b1      	ldr	r1, [pc, #708]	; (80035d4 <UART_SetConfig+0x68c>)
 8003310:	f04f 0200 	mov.w	r2, #0
 8003314:	eb13 0b01 	adds.w	fp, r3, r1
 8003318:	eb44 0c02 	adc.w	ip, r4, r2
 800331c:	4658      	mov	r0, fp
 800331e:	4661      	mov	r1, ip
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	685b      	ldr	r3, [r3, #4]
 8003324:	f04f 0400 	mov.w	r4, #0
 8003328:	461a      	mov	r2, r3
 800332a:	4623      	mov	r3, r4
 800332c:	f7fc ffa8 	bl	8000280 <__aeabi_uldivmod>
 8003330:	4603      	mov	r3, r0
 8003332:	460c      	mov	r4, r1
 8003334:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
            break;
 8003336:	e03d      	b.n	80033b4 <UART_SetConfig+0x46c>
          case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8003338:	f7fe ff52 	bl	80021e0 <HAL_RCC_GetSysClockFreq>
 800333c:	4603      	mov	r3, r0
 800333e:	4619      	mov	r1, r3
 8003340:	f04f 0200 	mov.w	r2, #0
 8003344:	f04f 0300 	mov.w	r3, #0
 8003348:	f04f 0400 	mov.w	r4, #0
 800334c:	0214      	lsls	r4, r2, #8
 800334e:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8003352:	020b      	lsls	r3, r1, #8
 8003354:	687a      	ldr	r2, [r7, #4]
 8003356:	6852      	ldr	r2, [r2, #4]
 8003358:	0852      	lsrs	r2, r2, #1
 800335a:	4611      	mov	r1, r2
 800335c:	f04f 0200 	mov.w	r2, #0
 8003360:	eb13 0b01 	adds.w	fp, r3, r1
 8003364:	eb44 0c02 	adc.w	ip, r4, r2
 8003368:	4658      	mov	r0, fp
 800336a:	4661      	mov	r1, ip
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	685b      	ldr	r3, [r3, #4]
 8003370:	f04f 0400 	mov.w	r4, #0
 8003374:	461a      	mov	r2, r3
 8003376:	4623      	mov	r3, r4
 8003378:	f7fc ff82 	bl	8000280 <__aeabi_uldivmod>
 800337c:	4603      	mov	r3, r0
 800337e:	460c      	mov	r4, r1
 8003380:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
            break;
 8003382:	e017      	b.n	80033b4 <UART_SetConfig+0x46c>
          case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate));
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	685b      	ldr	r3, [r3, #4]
 8003388:	085b      	lsrs	r3, r3, #1
 800338a:	f04f 0400 	mov.w	r4, #0
 800338e:	f513 0000 	adds.w	r0, r3, #8388608	; 0x800000
 8003392:	f144 0100 	adc.w	r1, r4, #0
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	685b      	ldr	r3, [r3, #4]
 800339a:	f04f 0400 	mov.w	r4, #0
 800339e:	461a      	mov	r2, r3
 80033a0:	4623      	mov	r3, r4
 80033a2:	f7fc ff6d 	bl	8000280 <__aeabi_uldivmod>
 80033a6:	4603      	mov	r3, r0
 80033a8:	460c      	mov	r4, r1
 80033aa:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
            break;
 80033ac:	e002      	b.n	80033b4 <UART_SetConfig+0x46c>
          case UART_CLOCKSOURCE_UNDEFINED:
          default:
            ret = HAL_ERROR;
 80033ae:	2301      	movs	r3, #1
 80033b0:	74fb      	strb	r3, [r7, #19]
            break;
 80033b2:	bf00      	nop
        }

        /* It is forbidden to write values lower than 0x300 in the LPUART_BRR register */
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80033b4:	697b      	ldr	r3, [r7, #20]
 80033b6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80033ba:	d308      	bcc.n	80033ce <UART_SetConfig+0x486>
 80033bc:	697b      	ldr	r3, [r7, #20]
 80033be:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80033c2:	d204      	bcs.n	80033ce <UART_SetConfig+0x486>
        {
          huart->Instance->BRR = usartdiv;
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	697a      	ldr	r2, [r7, #20]
 80033ca:	60da      	str	r2, [r3, #12]
 80033cc:	e0f5      	b.n	80035ba <UART_SetConfig+0x672>
        }
        else
        {
          ret = HAL_ERROR;
 80033ce:	2301      	movs	r3, #1
 80033d0:	74fb      	strb	r3, [r7, #19]
 80033d2:	e0f2      	b.n	80035ba <UART_SetConfig+0x672>
        }
      } /*   if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (lpuart_ker_ck_pres != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	69db      	ldr	r3, [r3, #28]
 80033d8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80033dc:	d17f      	bne.n	80034de <UART_SetConfig+0x596>
  {
    switch (clocksource)
 80033de:	7efb      	ldrb	r3, [r7, #27]
 80033e0:	2b08      	cmp	r3, #8
 80033e2:	d85c      	bhi.n	800349e <UART_SetConfig+0x556>
 80033e4:	a201      	add	r2, pc, #4	; (adr r2, 80033ec <UART_SetConfig+0x4a4>)
 80033e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80033ea:	bf00      	nop
 80033ec:	08003411 	.word	0x08003411
 80033f0:	0800342f 	.word	0x0800342f
 80033f4:	0800344d 	.word	0x0800344d
 80033f8:	0800349f 	.word	0x0800349f
 80033fc:	08003469 	.word	0x08003469
 8003400:	0800349f 	.word	0x0800349f
 8003404:	0800349f 	.word	0x0800349f
 8003408:	0800349f 	.word	0x0800349f
 800340c:	08003487 	.word	0x08003487
    {
      case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8003410:	f7fe ff7c 	bl	800230c <HAL_RCC_GetPCLK1Freq>
 8003414:	4603      	mov	r3, r0
 8003416:	005a      	lsls	r2, r3, #1
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	685b      	ldr	r3, [r3, #4]
 800341c:	085b      	lsrs	r3, r3, #1
 800341e:	441a      	add	r2, r3
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	685b      	ldr	r3, [r3, #4]
 8003424:	fbb2 f3f3 	udiv	r3, r2, r3
 8003428:	b29b      	uxth	r3, r3
 800342a:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 800342c:	e03a      	b.n	80034a4 <UART_SetConfig+0x55c>
      case UART_CLOCKSOURCE_PCLK2:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 800342e:	f7fe ff83 	bl	8002338 <HAL_RCC_GetPCLK2Freq>
 8003432:	4603      	mov	r3, r0
 8003434:	005a      	lsls	r2, r3, #1
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	685b      	ldr	r3, [r3, #4]
 800343a:	085b      	lsrs	r3, r3, #1
 800343c:	441a      	add	r2, r3
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	685b      	ldr	r3, [r3, #4]
 8003442:	fbb2 f3f3 	udiv	r3, r2, r3
 8003446:	b29b      	uxth	r3, r3
 8003448:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 800344a:	e02b      	b.n	80034a4 <UART_SetConfig+0x55c>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	685b      	ldr	r3, [r3, #4]
 8003450:	085b      	lsrs	r3, r3, #1
 8003452:	f103 73f4 	add.w	r3, r3, #31981568	; 0x1e80000
 8003456:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
 800345a:	687a      	ldr	r2, [r7, #4]
 800345c:	6852      	ldr	r2, [r2, #4]
 800345e:	fbb3 f3f2 	udiv	r3, r3, r2
 8003462:	b29b      	uxth	r3, r3
 8003464:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8003466:	e01d      	b.n	80034a4 <UART_SetConfig+0x55c>
      case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8003468:	f7fe feba 	bl	80021e0 <HAL_RCC_GetSysClockFreq>
 800346c:	4603      	mov	r3, r0
 800346e:	005a      	lsls	r2, r3, #1
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	685b      	ldr	r3, [r3, #4]
 8003474:	085b      	lsrs	r3, r3, #1
 8003476:	441a      	add	r2, r3
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	685b      	ldr	r3, [r3, #4]
 800347c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003480:	b29b      	uxth	r3, r3
 8003482:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8003484:	e00e      	b.n	80034a4 <UART_SetConfig+0x55c>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	685b      	ldr	r3, [r3, #4]
 800348a:	085b      	lsrs	r3, r3, #1
 800348c:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	685b      	ldr	r3, [r3, #4]
 8003494:	fbb2 f3f3 	udiv	r3, r2, r3
 8003498:	b29b      	uxth	r3, r3
 800349a:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 800349c:	e002      	b.n	80034a4 <UART_SetConfig+0x55c>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 800349e:	2301      	movs	r3, #1
 80034a0:	74fb      	strb	r3, [r7, #19]
        break;
 80034a2:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80034a4:	697b      	ldr	r3, [r7, #20]
 80034a6:	2b0f      	cmp	r3, #15
 80034a8:	d916      	bls.n	80034d8 <UART_SetConfig+0x590>
 80034aa:	697b      	ldr	r3, [r7, #20]
 80034ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80034b0:	d212      	bcs.n	80034d8 <UART_SetConfig+0x590>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80034b2:	697b      	ldr	r3, [r7, #20]
 80034b4:	b29b      	uxth	r3, r3
 80034b6:	f023 030f 	bic.w	r3, r3, #15
 80034ba:	817b      	strh	r3, [r7, #10]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80034bc:	697b      	ldr	r3, [r7, #20]
 80034be:	085b      	lsrs	r3, r3, #1
 80034c0:	b29b      	uxth	r3, r3
 80034c2:	f003 0307 	and.w	r3, r3, #7
 80034c6:	b29a      	uxth	r2, r3
 80034c8:	897b      	ldrh	r3, [r7, #10]
 80034ca:	4313      	orrs	r3, r2
 80034cc:	817b      	strh	r3, [r7, #10]
      huart->Instance->BRR = brrtemp;
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	897a      	ldrh	r2, [r7, #10]
 80034d4:	60da      	str	r2, [r3, #12]
 80034d6:	e070      	b.n	80035ba <UART_SetConfig+0x672>
    }
    else
    {
      ret = HAL_ERROR;
 80034d8:	2301      	movs	r3, #1
 80034da:	74fb      	strb	r3, [r7, #19]
 80034dc:	e06d      	b.n	80035ba <UART_SetConfig+0x672>
    }
  }
  else
  {
    switch (clocksource)
 80034de:	7efb      	ldrb	r3, [r7, #27]
 80034e0:	2b08      	cmp	r3, #8
 80034e2:	d859      	bhi.n	8003598 <UART_SetConfig+0x650>
 80034e4:	a201      	add	r2, pc, #4	; (adr r2, 80034ec <UART_SetConfig+0x5a4>)
 80034e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80034ea:	bf00      	nop
 80034ec:	08003511 	.word	0x08003511
 80034f0:	0800352d 	.word	0x0800352d
 80034f4:	08003549 	.word	0x08003549
 80034f8:	08003599 	.word	0x08003599
 80034fc:	08003565 	.word	0x08003565
 8003500:	08003599 	.word	0x08003599
 8003504:	08003599 	.word	0x08003599
 8003508:	08003599 	.word	0x08003599
 800350c:	08003581 	.word	0x08003581
    {
      case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8003510:	f7fe fefc 	bl	800230c <HAL_RCC_GetPCLK1Freq>
 8003514:	4602      	mov	r2, r0
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	685b      	ldr	r3, [r3, #4]
 800351a:	085b      	lsrs	r3, r3, #1
 800351c:	441a      	add	r2, r3
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	685b      	ldr	r3, [r3, #4]
 8003522:	fbb2 f3f3 	udiv	r3, r2, r3
 8003526:	b29b      	uxth	r3, r3
 8003528:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 800352a:	e038      	b.n	800359e <UART_SetConfig+0x656>
      case UART_CLOCKSOURCE_PCLK2:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 800352c:	f7fe ff04 	bl	8002338 <HAL_RCC_GetPCLK2Freq>
 8003530:	4602      	mov	r2, r0
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	685b      	ldr	r3, [r3, #4]
 8003536:	085b      	lsrs	r3, r3, #1
 8003538:	441a      	add	r2, r3
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	685b      	ldr	r3, [r3, #4]
 800353e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003542:	b29b      	uxth	r3, r3
 8003544:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8003546:	e02a      	b.n	800359e <UART_SetConfig+0x656>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	685b      	ldr	r3, [r3, #4]
 800354c:	085b      	lsrs	r3, r3, #1
 800354e:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 8003552:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 8003556:	687a      	ldr	r2, [r7, #4]
 8003558:	6852      	ldr	r2, [r2, #4]
 800355a:	fbb3 f3f2 	udiv	r3, r3, r2
 800355e:	b29b      	uxth	r3, r3
 8003560:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8003562:	e01c      	b.n	800359e <UART_SetConfig+0x656>
      case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8003564:	f7fe fe3c 	bl	80021e0 <HAL_RCC_GetSysClockFreq>
 8003568:	4602      	mov	r2, r0
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	685b      	ldr	r3, [r3, #4]
 800356e:	085b      	lsrs	r3, r3, #1
 8003570:	441a      	add	r2, r3
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	685b      	ldr	r3, [r3, #4]
 8003576:	fbb2 f3f3 	udiv	r3, r2, r3
 800357a:	b29b      	uxth	r3, r3
 800357c:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 800357e:	e00e      	b.n	800359e <UART_SetConfig+0x656>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	685b      	ldr	r3, [r3, #4]
 8003584:	085b      	lsrs	r3, r3, #1
 8003586:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	685b      	ldr	r3, [r3, #4]
 800358e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003592:	b29b      	uxth	r3, r3
 8003594:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8003596:	e002      	b.n	800359e <UART_SetConfig+0x656>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8003598:	2301      	movs	r3, #1
 800359a:	74fb      	strb	r3, [r7, #19]
        break;
 800359c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800359e:	697b      	ldr	r3, [r7, #20]
 80035a0:	2b0f      	cmp	r3, #15
 80035a2:	d908      	bls.n	80035b6 <UART_SetConfig+0x66e>
 80035a4:	697b      	ldr	r3, [r7, #20]
 80035a6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80035aa:	d204      	bcs.n	80035b6 <UART_SetConfig+0x66e>
    {
      huart->Instance->BRR = usartdiv;
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	697a      	ldr	r2, [r7, #20]
 80035b2:	60da      	str	r2, [r3, #12]
 80035b4:	e001      	b.n	80035ba <UART_SetConfig+0x672>
    }
    else
    {
      ret = HAL_ERROR;
 80035b6:	2301      	movs	r3, #1
 80035b8:	74fb      	strb	r3, [r7, #19]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	2200      	movs	r2, #0
 80035be:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	2200      	movs	r2, #0
 80035c4:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 80035c6:	7cfb      	ldrb	r3, [r7, #19]
}
 80035c8:	4618      	mov	r0, r3
 80035ca:	3720      	adds	r7, #32
 80035cc:	46bd      	mov	sp, r7
 80035ce:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 80035d2:	bf00      	nop
 80035d4:	f4240000 	.word	0xf4240000

080035d8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80035d8:	b480      	push	{r7}
 80035da:	b083      	sub	sp, #12
 80035dc:	af00      	add	r7, sp, #0
 80035de:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035e4:	f003 0301 	and.w	r3, r3, #1
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d00a      	beq.n	8003602 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	685b      	ldr	r3, [r3, #4]
 80035f2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	430a      	orrs	r2, r1
 8003600:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003606:	f003 0302 	and.w	r3, r3, #2
 800360a:	2b00      	cmp	r3, #0
 800360c:	d00a      	beq.n	8003624 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	685b      	ldr	r3, [r3, #4]
 8003614:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	430a      	orrs	r2, r1
 8003622:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003628:	f003 0304 	and.w	r3, r3, #4
 800362c:	2b00      	cmp	r3, #0
 800362e:	d00a      	beq.n	8003646 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	685b      	ldr	r3, [r3, #4]
 8003636:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	430a      	orrs	r2, r1
 8003644:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800364a:	f003 0308 	and.w	r3, r3, #8
 800364e:	2b00      	cmp	r3, #0
 8003650:	d00a      	beq.n	8003668 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	685b      	ldr	r3, [r3, #4]
 8003658:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	430a      	orrs	r2, r1
 8003666:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800366c:	f003 0310 	and.w	r3, r3, #16
 8003670:	2b00      	cmp	r3, #0
 8003672:	d00a      	beq.n	800368a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	689b      	ldr	r3, [r3, #8]
 800367a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	430a      	orrs	r2, r1
 8003688:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800368e:	f003 0320 	and.w	r3, r3, #32
 8003692:	2b00      	cmp	r3, #0
 8003694:	d00a      	beq.n	80036ac <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	689b      	ldr	r3, [r3, #8]
 800369c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	430a      	orrs	r2, r1
 80036aa:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d01a      	beq.n	80036ee <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	685b      	ldr	r3, [r3, #4]
 80036be:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	430a      	orrs	r2, r1
 80036cc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036d2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80036d6:	d10a      	bne.n	80036ee <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	685b      	ldr	r3, [r3, #4]
 80036de:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	430a      	orrs	r2, r1
 80036ec:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d00a      	beq.n	8003710 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	685b      	ldr	r3, [r3, #4]
 8003700:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	430a      	orrs	r2, r1
 800370e:	605a      	str	r2, [r3, #4]
  }
}
 8003710:	bf00      	nop
 8003712:	370c      	adds	r7, #12
 8003714:	46bd      	mov	sp, r7
 8003716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800371a:	4770      	bx	lr

0800371c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800371c:	b580      	push	{r7, lr}
 800371e:	b086      	sub	sp, #24
 8003720:	af02      	add	r7, sp, #8
 8003722:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	2200      	movs	r2, #0
 8003728:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 800372a:	f7fc ff95 	bl	8000658 <HAL_GetTick>
 800372e:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	f003 0308 	and.w	r3, r3, #8
 800373a:	2b08      	cmp	r3, #8
 800373c:	d10e      	bne.n	800375c <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800373e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003742:	9300      	str	r3, [sp, #0]
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	2200      	movs	r2, #0
 8003748:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800374c:	6878      	ldr	r0, [r7, #4]
 800374e:	f000 f82a 	bl	80037a6 <UART_WaitOnFlagUntilTimeout>
 8003752:	4603      	mov	r3, r0
 8003754:	2b00      	cmp	r3, #0
 8003756:	d001      	beq.n	800375c <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003758:	2303      	movs	r3, #3
 800375a:	e020      	b.n	800379e <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	f003 0304 	and.w	r3, r3, #4
 8003766:	2b04      	cmp	r3, #4
 8003768:	d10e      	bne.n	8003788 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800376a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800376e:	9300      	str	r3, [sp, #0]
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	2200      	movs	r2, #0
 8003774:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003778:	6878      	ldr	r0, [r7, #4]
 800377a:	f000 f814 	bl	80037a6 <UART_WaitOnFlagUntilTimeout>
 800377e:	4603      	mov	r3, r0
 8003780:	2b00      	cmp	r3, #0
 8003782:	d001      	beq.n	8003788 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003784:	2303      	movs	r3, #3
 8003786:	e00a      	b.n	800379e <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	2220      	movs	r2, #32
 800378c:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	2220      	movs	r2, #32
 8003792:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	2200      	movs	r2, #0
 8003798:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 800379c:	2300      	movs	r3, #0
}
 800379e:	4618      	mov	r0, r3
 80037a0:	3710      	adds	r7, #16
 80037a2:	46bd      	mov	sp, r7
 80037a4:	bd80      	pop	{r7, pc}

080037a6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80037a6:	b580      	push	{r7, lr}
 80037a8:	b084      	sub	sp, #16
 80037aa:	af00      	add	r7, sp, #0
 80037ac:	60f8      	str	r0, [r7, #12]
 80037ae:	60b9      	str	r1, [r7, #8]
 80037b0:	603b      	str	r3, [r7, #0]
 80037b2:	4613      	mov	r3, r2
 80037b4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80037b6:	e02a      	b.n	800380e <UART_WaitOnFlagUntilTimeout+0x68>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80037b8:	69bb      	ldr	r3, [r7, #24]
 80037ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037be:	d026      	beq.n	800380e <UART_WaitOnFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80037c0:	f7fc ff4a 	bl	8000658 <HAL_GetTick>
 80037c4:	4602      	mov	r2, r0
 80037c6:	683b      	ldr	r3, [r7, #0]
 80037c8:	1ad3      	subs	r3, r2, r3
 80037ca:	69ba      	ldr	r2, [r7, #24]
 80037cc:	429a      	cmp	r2, r3
 80037ce:	d302      	bcc.n	80037d6 <UART_WaitOnFlagUntilTimeout+0x30>
 80037d0:	69bb      	ldr	r3, [r7, #24]
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d11b      	bne.n	800380e <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	681a      	ldr	r2, [r3, #0]
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80037e4:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	689a      	ldr	r2, [r3, #8]
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	f022 0201 	bic.w	r2, r2, #1
 80037f4:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	2220      	movs	r2, #32
 80037fa:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	2220      	movs	r2, #32
 8003800:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	2200      	movs	r2, #0
 8003806:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 800380a:	2303      	movs	r3, #3
 800380c:	e00f      	b.n	800382e <UART_WaitOnFlagUntilTimeout+0x88>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	69da      	ldr	r2, [r3, #28]
 8003814:	68bb      	ldr	r3, [r7, #8]
 8003816:	4013      	ands	r3, r2
 8003818:	68ba      	ldr	r2, [r7, #8]
 800381a:	429a      	cmp	r2, r3
 800381c:	bf0c      	ite	eq
 800381e:	2301      	moveq	r3, #1
 8003820:	2300      	movne	r3, #0
 8003822:	b2db      	uxtb	r3, r3
 8003824:	461a      	mov	r2, r3
 8003826:	79fb      	ldrb	r3, [r7, #7]
 8003828:	429a      	cmp	r2, r3
 800382a:	d0c5      	beq.n	80037b8 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800382c:	2300      	movs	r3, #0
}
 800382e:	4618      	mov	r0, r3
 8003830:	3710      	adds	r7, #16
 8003832:	46bd      	mov	sp, r7
 8003834:	bd80      	pop	{r7, pc}
	...

08003838 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8003838:	b580      	push	{r7, lr}
 800383a:	b08a      	sub	sp, #40	; 0x28
 800383c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800383e:	f107 0314 	add.w	r3, r7, #20
 8003842:	2200      	movs	r2, #0
 8003844:	601a      	str	r2, [r3, #0]
 8003846:	605a      	str	r2, [r3, #4]
 8003848:	609a      	str	r2, [r3, #8]
 800384a:	60da      	str	r2, [r3, #12]
 800384c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800384e:	4b2b      	ldr	r3, [pc, #172]	; (80038fc <MX_GPIO_Init+0xc4>)
 8003850:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003852:	4a2a      	ldr	r2, [pc, #168]	; (80038fc <MX_GPIO_Init+0xc4>)
 8003854:	f043 0304 	orr.w	r3, r3, #4
 8003858:	64d3      	str	r3, [r2, #76]	; 0x4c
 800385a:	4b28      	ldr	r3, [pc, #160]	; (80038fc <MX_GPIO_Init+0xc4>)
 800385c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800385e:	f003 0304 	and.w	r3, r3, #4
 8003862:	613b      	str	r3, [r7, #16]
 8003864:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8003866:	4b25      	ldr	r3, [pc, #148]	; (80038fc <MX_GPIO_Init+0xc4>)
 8003868:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800386a:	4a24      	ldr	r2, [pc, #144]	; (80038fc <MX_GPIO_Init+0xc4>)
 800386c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003870:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003872:	4b22      	ldr	r3, [pc, #136]	; (80038fc <MX_GPIO_Init+0xc4>)
 8003874:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003876:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800387a:	60fb      	str	r3, [r7, #12]
 800387c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800387e:	4b1f      	ldr	r3, [pc, #124]	; (80038fc <MX_GPIO_Init+0xc4>)
 8003880:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003882:	4a1e      	ldr	r2, [pc, #120]	; (80038fc <MX_GPIO_Init+0xc4>)
 8003884:	f043 0301 	orr.w	r3, r3, #1
 8003888:	64d3      	str	r3, [r2, #76]	; 0x4c
 800388a:	4b1c      	ldr	r3, [pc, #112]	; (80038fc <MX_GPIO_Init+0xc4>)
 800388c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800388e:	f003 0301 	and.w	r3, r3, #1
 8003892:	60bb      	str	r3, [r7, #8]
 8003894:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003896:	4b19      	ldr	r3, [pc, #100]	; (80038fc <MX_GPIO_Init+0xc4>)
 8003898:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800389a:	4a18      	ldr	r2, [pc, #96]	; (80038fc <MX_GPIO_Init+0xc4>)
 800389c:	f043 0302 	orr.w	r3, r3, #2
 80038a0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80038a2:	4b16      	ldr	r3, [pc, #88]	; (80038fc <MX_GPIO_Init+0xc4>)
 80038a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80038a6:	f003 0302 	and.w	r3, r3, #2
 80038aa:	607b      	str	r3, [r7, #4]
 80038ac:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80038ae:	2200      	movs	r2, #0
 80038b0:	2120      	movs	r1, #32
 80038b2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80038b6:	f7fd f98b 	bl	8000bd0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 80038ba:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80038be:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80038c0:	4b0f      	ldr	r3, [pc, #60]	; (8003900 <MX_GPIO_Init+0xc8>)
 80038c2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80038c4:	2300      	movs	r3, #0
 80038c6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80038c8:	f107 0314 	add.w	r3, r7, #20
 80038cc:	4619      	mov	r1, r3
 80038ce:	480d      	ldr	r0, [pc, #52]	; (8003904 <MX_GPIO_Init+0xcc>)
 80038d0:	f7fc ffd6 	bl	8000880 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80038d4:	2320      	movs	r3, #32
 80038d6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80038d8:	2301      	movs	r3, #1
 80038da:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80038dc:	2300      	movs	r3, #0
 80038de:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80038e0:	2300      	movs	r3, #0
 80038e2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80038e4:	f107 0314 	add.w	r3, r7, #20
 80038e8:	4619      	mov	r1, r3
 80038ea:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80038ee:	f7fc ffc7 	bl	8000880 <HAL_GPIO_Init>

}
 80038f2:	bf00      	nop
 80038f4:	3728      	adds	r7, #40	; 0x28
 80038f6:	46bd      	mov	sp, r7
 80038f8:	bd80      	pop	{r7, pc}
 80038fa:	bf00      	nop
 80038fc:	40021000 	.word	0x40021000
 8003900:	10210000 	.word	0x10210000
 8003904:	48000800 	.word	0x48000800

08003908 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8003908:	b580      	push	{r7, lr}
 800390a:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 800390c:	4b1b      	ldr	r3, [pc, #108]	; (800397c <MX_I2C1_Init+0x74>)
 800390e:	4a1c      	ldr	r2, [pc, #112]	; (8003980 <MX_I2C1_Init+0x78>)
 8003910:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10909CEC;
 8003912:	4b1a      	ldr	r3, [pc, #104]	; (800397c <MX_I2C1_Init+0x74>)
 8003914:	4a1b      	ldr	r2, [pc, #108]	; (8003984 <MX_I2C1_Init+0x7c>)
 8003916:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8003918:	4b18      	ldr	r3, [pc, #96]	; (800397c <MX_I2C1_Init+0x74>)
 800391a:	2200      	movs	r2, #0
 800391c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800391e:	4b17      	ldr	r3, [pc, #92]	; (800397c <MX_I2C1_Init+0x74>)
 8003920:	2201      	movs	r2, #1
 8003922:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003924:	4b15      	ldr	r3, [pc, #84]	; (800397c <MX_I2C1_Init+0x74>)
 8003926:	2200      	movs	r2, #0
 8003928:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800392a:	4b14      	ldr	r3, [pc, #80]	; (800397c <MX_I2C1_Init+0x74>)
 800392c:	2200      	movs	r2, #0
 800392e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8003930:	4b12      	ldr	r3, [pc, #72]	; (800397c <MX_I2C1_Init+0x74>)
 8003932:	2200      	movs	r2, #0
 8003934:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003936:	4b11      	ldr	r3, [pc, #68]	; (800397c <MX_I2C1_Init+0x74>)
 8003938:	2200      	movs	r2, #0
 800393a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800393c:	4b0f      	ldr	r3, [pc, #60]	; (800397c <MX_I2C1_Init+0x74>)
 800393e:	2200      	movs	r2, #0
 8003940:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8003942:	480e      	ldr	r0, [pc, #56]	; (800397c <MX_I2C1_Init+0x74>)
 8003944:	f7fd f95c 	bl	8000c00 <HAL_I2C_Init>
 8003948:	4603      	mov	r3, r0
 800394a:	2b00      	cmp	r3, #0
 800394c:	d001      	beq.n	8003952 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800394e:	f000 fb34 	bl	8003fba <Error_Handler>
  }
  /** Configure Analogue filter 
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8003952:	2100      	movs	r1, #0
 8003954:	4809      	ldr	r0, [pc, #36]	; (800397c <MX_I2C1_Init+0x74>)
 8003956:	f7fd feb5 	bl	80016c4 <HAL_I2CEx_ConfigAnalogFilter>
 800395a:	4603      	mov	r3, r0
 800395c:	2b00      	cmp	r3, #0
 800395e:	d001      	beq.n	8003964 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8003960:	f000 fb2b 	bl	8003fba <Error_Handler>
  }
  /** Configure Digital filter 
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8003964:	2100      	movs	r1, #0
 8003966:	4805      	ldr	r0, [pc, #20]	; (800397c <MX_I2C1_Init+0x74>)
 8003968:	f7fd fef7 	bl	800175a <HAL_I2CEx_ConfigDigitalFilter>
 800396c:	4603      	mov	r3, r0
 800396e:	2b00      	cmp	r3, #0
 8003970:	d001      	beq.n	8003976 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8003972:	f000 fb22 	bl	8003fba <Error_Handler>
  }

}
 8003976:	bf00      	nop
 8003978:	bd80      	pop	{r7, pc}
 800397a:	bf00      	nop
 800397c:	200000a0 	.word	0x200000a0
 8003980:	40005400 	.word	0x40005400
 8003984:	10909cec 	.word	0x10909cec

08003988 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8003988:	b580      	push	{r7, lr}
 800398a:	b08a      	sub	sp, #40	; 0x28
 800398c:	af00      	add	r7, sp, #0
 800398e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003990:	f107 0314 	add.w	r3, r7, #20
 8003994:	2200      	movs	r2, #0
 8003996:	601a      	str	r2, [r3, #0]
 8003998:	605a      	str	r2, [r3, #4]
 800399a:	609a      	str	r2, [r3, #8]
 800399c:	60da      	str	r2, [r3, #12]
 800399e:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	4a17      	ldr	r2, [pc, #92]	; (8003a04 <HAL_I2C_MspInit+0x7c>)
 80039a6:	4293      	cmp	r3, r2
 80039a8:	d128      	bne.n	80039fc <HAL_I2C_MspInit+0x74>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80039aa:	4b17      	ldr	r3, [pc, #92]	; (8003a08 <HAL_I2C_MspInit+0x80>)
 80039ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80039ae:	4a16      	ldr	r2, [pc, #88]	; (8003a08 <HAL_I2C_MspInit+0x80>)
 80039b0:	f043 0302 	orr.w	r3, r3, #2
 80039b4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80039b6:	4b14      	ldr	r3, [pc, #80]	; (8003a08 <HAL_I2C_MspInit+0x80>)
 80039b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80039ba:	f003 0302 	and.w	r3, r3, #2
 80039be:	613b      	str	r3, [r7, #16]
 80039c0:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration    
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80039c2:	f44f 7340 	mov.w	r3, #768	; 0x300
 80039c6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80039c8:	2312      	movs	r3, #18
 80039ca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80039cc:	2301      	movs	r3, #1
 80039ce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80039d0:	2303      	movs	r3, #3
 80039d2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80039d4:	2304      	movs	r3, #4
 80039d6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80039d8:	f107 0314 	add.w	r3, r7, #20
 80039dc:	4619      	mov	r1, r3
 80039de:	480b      	ldr	r0, [pc, #44]	; (8003a0c <HAL_I2C_MspInit+0x84>)
 80039e0:	f7fc ff4e 	bl	8000880 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80039e4:	4b08      	ldr	r3, [pc, #32]	; (8003a08 <HAL_I2C_MspInit+0x80>)
 80039e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039e8:	4a07      	ldr	r2, [pc, #28]	; (8003a08 <HAL_I2C_MspInit+0x80>)
 80039ea:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80039ee:	6593      	str	r3, [r2, #88]	; 0x58
 80039f0:	4b05      	ldr	r3, [pc, #20]	; (8003a08 <HAL_I2C_MspInit+0x80>)
 80039f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039f4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80039f8:	60fb      	str	r3, [r7, #12]
 80039fa:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80039fc:	bf00      	nop
 80039fe:	3728      	adds	r7, #40	; 0x28
 8003a00:	46bd      	mov	sp, r7
 8003a02:	bd80      	pop	{r7, pc}
 8003a04:	40005400 	.word	0x40005400
 8003a08:	40021000 	.word	0x40021000
 8003a0c:	48000400 	.word	0x48000400

08003a10 <lcd_init>:
#include "i2c.h"



void lcd_init(I2C_HandleTypeDef* I2Cx, rgb_lcd* DataStruct)
{
 8003a10:	b580      	push	{r7, lr}
 8003a12:	b08a      	sub	sp, #40	; 0x28
 8003a14:	af02      	add	r7, sp, #8
 8003a16:	6078      	str	r0, [r7, #4]
 8003a18:	6039      	str	r1, [r7, #0]
	I2C_HandleTypeDef* Handle = I2Cx;
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	61fb      	str	r3, [r7, #28]
	DataStruct->_displayfunction |= LCD_2LINE | LCD_5x10DOTS; // MODE 2 LIGNES
 8003a1e:	683b      	ldr	r3, [r7, #0]
 8003a20:	781b      	ldrb	r3, [r3, #0]
 8003a22:	f043 030c 	orr.w	r3, r3, #12
 8003a26:	b2da      	uxtb	r2, r3
 8003a28:	683b      	ldr	r3, [r7, #0]
 8003a2a:	701a      	strb	r2, [r3, #0]
	uint8_t data[2];
	data[0] = 0x80;
 8003a2c:	2380      	movs	r3, #128	; 0x80
 8003a2e:	763b      	strb	r3, [r7, #24]
	data[1] = LCD_FUNCTIONSET | DataStruct->_displayfunction;
 8003a30:	683b      	ldr	r3, [r7, #0]
 8003a32:	781b      	ldrb	r3, [r3, #0]
 8003a34:	f043 0320 	orr.w	r3, r3, #32
 8003a38:	b2db      	uxtb	r3, r3
 8003a3a:	767b      	strb	r3, [r7, #25]

	HAL_UART_Transmit(&huart2,(uint8_t *)data,2,10);
 8003a3c:	f107 0118 	add.w	r1, r7, #24
 8003a40:	230a      	movs	r3, #10
 8003a42:	2202      	movs	r2, #2
 8003a44:	486c      	ldr	r0, [pc, #432]	; (8003bf8 <lcd_init+0x1e8>)
 8003a46:	f7ff f9eb 	bl	8002e20 <HAL_UART_Transmit>
	char newline[2] = "\r\n";
 8003a4a:	f640 230d 	movw	r3, #2573	; 0xa0d
 8003a4e:	82bb      	strh	r3, [r7, #20]
	HAL_UART_Transmit(&huart2, (uint8_t *) newline, 2, 10);
 8003a50:	f107 0114 	add.w	r1, r7, #20
 8003a54:	230a      	movs	r3, #10
 8003a56:	2202      	movs	r2, #2
 8003a58:	4867      	ldr	r0, [pc, #412]	; (8003bf8 <lcd_init+0x1e8>)
 8003a5a:	f7ff f9e1 	bl	8002e20 <HAL_UART_Transmit>

	HAL_StatusTypeDef status = HAL_I2C_IsDeviceReady(Handle,LCD_ADDRESS,5,100);
 8003a5e:	2364      	movs	r3, #100	; 0x64
 8003a60:	2205      	movs	r2, #5
 8003a62:	217c      	movs	r1, #124	; 0x7c
 8003a64:	69f8      	ldr	r0, [r7, #28]
 8003a66:	f7fd fb45 	bl	80010f4 <HAL_I2C_IsDeviceReady>
 8003a6a:	4603      	mov	r3, r0
 8003a6c:	74fb      	strb	r3, [r7, #19]
	HAL_UART_Transmit(&huart2,&status,1,10);
 8003a6e:	f107 0113 	add.w	r1, r7, #19
 8003a72:	230a      	movs	r3, #10
 8003a74:	2201      	movs	r2, #1
 8003a76:	4860      	ldr	r0, [pc, #384]	; (8003bf8 <lcd_init+0x1e8>)
 8003a78:	f7ff f9d2 	bl	8002e20 <HAL_UART_Transmit>
	HAL_Delay(50);
 8003a7c:	2032      	movs	r0, #50	; 0x32
 8003a7e:	f7fc fdf7 	bl	8000670 <HAL_Delay>

	HAL_StatusTypeDef status2 = HAL_I2C_Master_Transmit(Handle, LCD_ADDRESS, data,2,5000);
 8003a82:	f107 0218 	add.w	r2, r7, #24
 8003a86:	f241 3388 	movw	r3, #5000	; 0x1388
 8003a8a:	9300      	str	r3, [sp, #0]
 8003a8c:	2302      	movs	r3, #2
 8003a8e:	217c      	movs	r1, #124	; 0x7c
 8003a90:	69f8      	ldr	r0, [r7, #28]
 8003a92:	f7fd f945 	bl	8000d20 <HAL_I2C_Master_Transmit>
 8003a96:	4603      	mov	r3, r0
 8003a98:	74bb      	strb	r3, [r7, #18]
	HAL_UART_Transmit(&huart2,&status2,1,10);
 8003a9a:	f107 0112 	add.w	r1, r7, #18
 8003a9e:	230a      	movs	r3, #10
 8003aa0:	2201      	movs	r2, #1
 8003aa2:	4855      	ldr	r0, [pc, #340]	; (8003bf8 <lcd_init+0x1e8>)
 8003aa4:	f7ff f9bc 	bl	8002e20 <HAL_UART_Transmit>
	HAL_Delay(50);
 8003aa8:	2032      	movs	r0, #50	; 0x32
 8003aaa:	f7fc fde1 	bl	8000670 <HAL_Delay>

	HAL_I2C_Master_Transmit(Handle,LCD_ADDRESS,data,2,5000);
 8003aae:	f107 0218 	add.w	r2, r7, #24
 8003ab2:	f241 3388 	movw	r3, #5000	; 0x1388
 8003ab6:	9300      	str	r3, [sp, #0]
 8003ab8:	2302      	movs	r3, #2
 8003aba:	217c      	movs	r1, #124	; 0x7c
 8003abc:	69f8      	ldr	r0, [r7, #28]
 8003abe:	f7fd f92f 	bl	8000d20 <HAL_I2C_Master_Transmit>
	HAL_Delay(5);
 8003ac2:	2005      	movs	r0, #5
 8003ac4:	f7fc fdd4 	bl	8000670 <HAL_Delay>

	HAL_I2C_Master_Transmit(Handle,LCD_ADDRESS,data,2,5000);
 8003ac8:	f107 0218 	add.w	r2, r7, #24
 8003acc:	f241 3388 	movw	r3, #5000	; 0x1388
 8003ad0:	9300      	str	r3, [sp, #0]
 8003ad2:	2302      	movs	r3, #2
 8003ad4:	217c      	movs	r1, #124	; 0x7c
 8003ad6:	69f8      	ldr	r0, [r7, #28]
 8003ad8:	f7fd f922 	bl	8000d20 <HAL_I2C_Master_Transmit>

	// CONTROL
	DataStruct->_displaycontrol = LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF;
 8003adc:	683b      	ldr	r3, [r7, #0]
 8003ade:	2204      	movs	r2, #4
 8003ae0:	705a      	strb	r2, [r3, #1]

	data[1] = LCD_DISPLAYCONTROL | DataStruct->_displaycontrol;
 8003ae2:	683b      	ldr	r3, [r7, #0]
 8003ae4:	785b      	ldrb	r3, [r3, #1]
 8003ae6:	f043 0308 	orr.w	r3, r3, #8
 8003aea:	b2db      	uxtb	r3, r3
 8003aec:	767b      	strb	r3, [r7, #25]
	HAL_I2C_Master_Transmit(Handle,LCD_ADDRESS, data,2,1000);
 8003aee:	f107 0218 	add.w	r2, r7, #24
 8003af2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003af6:	9300      	str	r3, [sp, #0]
 8003af8:	2302      	movs	r3, #2
 8003afa:	217c      	movs	r1, #124	; 0x7c
 8003afc:	69f8      	ldr	r0, [r7, #28]
 8003afe:	f7fd f90f 	bl	8000d20 <HAL_I2C_Master_Transmit>

	data[1] = LCD_CLEARDISPLAY;
 8003b02:	2301      	movs	r3, #1
 8003b04:	767b      	strb	r3, [r7, #25]
	HAL_I2C_Master_Transmit(Handle, (uint16_t)LCD_ADDRESS, (uint8_t *)data,2,1000);
 8003b06:	f107 0218 	add.w	r2, r7, #24
 8003b0a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003b0e:	9300      	str	r3, [sp, #0]
 8003b10:	2302      	movs	r3, #2
 8003b12:	217c      	movs	r1, #124	; 0x7c
 8003b14:	69f8      	ldr	r0, [r7, #28]
 8003b16:	f7fd f903 	bl	8000d20 <HAL_I2C_Master_Transmit>
	HAL_Delay(2);
 8003b1a:	2002      	movs	r0, #2
 8003b1c:	f7fc fda8 	bl	8000670 <HAL_Delay>

	// MODE
	DataStruct->_displaymode = LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT;
 8003b20:	683b      	ldr	r3, [r7, #0]
 8003b22:	2202      	movs	r2, #2
 8003b24:	709a      	strb	r2, [r3, #2]
	data[1] = LCD_ENTRYMODESET | DataStruct->_displaymode;
 8003b26:	683b      	ldr	r3, [r7, #0]
 8003b28:	789b      	ldrb	r3, [r3, #2]
 8003b2a:	f043 0304 	orr.w	r3, r3, #4
 8003b2e:	b2db      	uxtb	r3, r3
 8003b30:	767b      	strb	r3, [r7, #25]
	HAL_I2C_Master_Transmit(Handle, (uint16_t)LCD_ADDRESS, (uint8_t *)data,2,1000);
 8003b32:	f107 0218 	add.w	r2, r7, #24
 8003b36:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003b3a:	9300      	str	r3, [sp, #0]
 8003b3c:	2302      	movs	r3, #2
 8003b3e:	217c      	movs	r1, #124	; 0x7c
 8003b40:	69f8      	ldr	r0, [r7, #28]
 8003b42:	f7fd f8ed 	bl	8000d20 <HAL_I2C_Master_Transmit>

	// initialisation du lcd_rgb_Backight
		uint8_t data_backlight[2];
		data_backlight[0] = REG_MODE1;
 8003b46:	2300      	movs	r3, #0
 8003b48:	743b      	strb	r3, [r7, #16]
		data_backlight[1] = 0;
 8003b4a:	2300      	movs	r3, #0
 8003b4c:	747b      	strb	r3, [r7, #17]
		HAL_I2C_Master_Transmit(Handle, (uint16_t)RGB_ADDRESS, (uint8_t *)data_backlight,2,1000);
 8003b4e:	f107 0210 	add.w	r2, r7, #16
 8003b52:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003b56:	9300      	str	r3, [sp, #0]
 8003b58:	2302      	movs	r3, #2
 8003b5a:	21c4      	movs	r1, #196	; 0xc4
 8003b5c:	69f8      	ldr	r0, [r7, #28]
 8003b5e:	f7fd f8df 	bl	8000d20 <HAL_I2C_Master_Transmit>

		data_backlight[0] = REG_OUTPUT;
 8003b62:	2308      	movs	r3, #8
 8003b64:	743b      	strb	r3, [r7, #16]
		data_backlight[1] = 0xFF;
 8003b66:	23ff      	movs	r3, #255	; 0xff
 8003b68:	747b      	strb	r3, [r7, #17]
		HAL_I2C_Master_Transmit(Handle, (uint16_t)RGB_ADDRESS, (uint8_t *)data_backlight,2,1000);
 8003b6a:	f107 0210 	add.w	r2, r7, #16
 8003b6e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003b72:	9300      	str	r3, [sp, #0]
 8003b74:	2302      	movs	r3, #2
 8003b76:	21c4      	movs	r1, #196	; 0xc4
 8003b78:	69f8      	ldr	r0, [r7, #28]
 8003b7a:	f7fd f8d1 	bl	8000d20 <HAL_I2C_Master_Transmit>

		data_backlight[0] = REG_MODE2;
 8003b7e:	2301      	movs	r3, #1
 8003b80:	743b      	strb	r3, [r7, #16]
		data_backlight[1] = 0x20;
 8003b82:	2320      	movs	r3, #32
 8003b84:	747b      	strb	r3, [r7, #17]
		HAL_I2C_Master_Transmit(Handle, (uint16_t)RGB_ADDRESS, (uint8_t *)data_backlight,2,1000);
 8003b86:	f107 0210 	add.w	r2, r7, #16
 8003b8a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003b8e:	9300      	str	r3, [sp, #0]
 8003b90:	2302      	movs	r3, #2
 8003b92:	21c4      	movs	r1, #196	; 0xc4
 8003b94:	69f8      	ldr	r0, [r7, #28]
 8003b96:	f7fd f8c3 	bl	8000d20 <HAL_I2C_Master_Transmit>

		//couleur du LCD en Blanc
		uint8_t data_rgb[2];
		data_rgb[0] = REG_RED;
 8003b9a:	2304      	movs	r3, #4
 8003b9c:	733b      	strb	r3, [r7, #12]
		data_rgb[1] = 255;
 8003b9e:	23ff      	movs	r3, #255	; 0xff
 8003ba0:	737b      	strb	r3, [r7, #13]
		HAL_I2C_Master_Transmit(Handle, (uint16_t)RGB_ADDRESS, (uint8_t *)data_rgb,2,1000);
 8003ba2:	f107 020c 	add.w	r2, r7, #12
 8003ba6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003baa:	9300      	str	r3, [sp, #0]
 8003bac:	2302      	movs	r3, #2
 8003bae:	21c4      	movs	r1, #196	; 0xc4
 8003bb0:	69f8      	ldr	r0, [r7, #28]
 8003bb2:	f7fd f8b5 	bl	8000d20 <HAL_I2C_Master_Transmit>

		data_rgb[0] = REG_GREEN;
 8003bb6:	2303      	movs	r3, #3
 8003bb8:	733b      	strb	r3, [r7, #12]
		data_rgb[1] = 255;
 8003bba:	23ff      	movs	r3, #255	; 0xff
 8003bbc:	737b      	strb	r3, [r7, #13]
		HAL_I2C_Master_Transmit(Handle, (uint16_t)RGB_ADDRESS, (uint8_t *)data_rgb,2,1000);
 8003bbe:	f107 020c 	add.w	r2, r7, #12
 8003bc2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003bc6:	9300      	str	r3, [sp, #0]
 8003bc8:	2302      	movs	r3, #2
 8003bca:	21c4      	movs	r1, #196	; 0xc4
 8003bcc:	69f8      	ldr	r0, [r7, #28]
 8003bce:	f7fd f8a7 	bl	8000d20 <HAL_I2C_Master_Transmit>

		data_rgb[0] = REG_BLUE;
 8003bd2:	2302      	movs	r3, #2
 8003bd4:	733b      	strb	r3, [r7, #12]
		data_rgb[1] = 255;
 8003bd6:	23ff      	movs	r3, #255	; 0xff
 8003bd8:	737b      	strb	r3, [r7, #13]
		HAL_I2C_Master_Transmit(Handle, (uint16_t)RGB_ADDRESS, (uint8_t *)data_rgb,2,1000);
 8003bda:	f107 020c 	add.w	r2, r7, #12
 8003bde:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003be2:	9300      	str	r3, [sp, #0]
 8003be4:	2302      	movs	r3, #2
 8003be6:	21c4      	movs	r1, #196	; 0xc4
 8003be8:	69f8      	ldr	r0, [r7, #28]
 8003bea:	f7fd f899 	bl	8000d20 <HAL_I2C_Master_Transmit>


}
 8003bee:	bf00      	nop
 8003bf0:	3720      	adds	r7, #32
 8003bf2:	46bd      	mov	sp, r7
 8003bf4:	bd80      	pop	{r7, pc}
 8003bf6:	bf00      	nop
 8003bf8:	200000ec 	.word	0x200000ec

08003bfc <lcd_print>:
    unsigned char data[2] = {0x40, value};
    HAL_I2C_Master_Transmit(Handle,LCD_ADDRESS, data,2,1000);
}

void lcd_print(I2C_HandleTypeDef* I2Cx, char *str)
{
 8003bfc:	b580      	push	{r7, lr}
 8003bfe:	b088      	sub	sp, #32
 8003c00:	af02      	add	r7, sp, #8
 8003c02:	6078      	str	r0, [r7, #4]
 8003c04:	6039      	str	r1, [r7, #0]
	I2C_HandleTypeDef* Handle = I2Cx;
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	613b      	str	r3, [r7, #16]
    char data[2];
    data[0] = 0x40;
 8003c0a:	2340      	movs	r3, #64	; 0x40
 8003c0c:	733b      	strb	r3, [r7, #12]
    int i=0;
 8003c0e:	2300      	movs	r3, #0
 8003c10:	617b      	str	r3, [r7, #20]
    while(str[i] != '\0')
 8003c12:	e011      	b.n	8003c38 <lcd_print+0x3c>
    {
            data[1] = str[i];
 8003c14:	697b      	ldr	r3, [r7, #20]
 8003c16:	683a      	ldr	r2, [r7, #0]
 8003c18:	4413      	add	r3, r2
 8003c1a:	781b      	ldrb	r3, [r3, #0]
 8003c1c:	737b      	strb	r3, [r7, #13]
            HAL_I2C_Master_Transmit(Handle,LCD_ADDRESS,(uint8_t *) data, 2,1000);
 8003c1e:	f107 020c 	add.w	r2, r7, #12
 8003c22:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003c26:	9300      	str	r3, [sp, #0]
 8003c28:	2302      	movs	r3, #2
 8003c2a:	217c      	movs	r1, #124	; 0x7c
 8003c2c:	6938      	ldr	r0, [r7, #16]
 8003c2e:	f7fd f877 	bl	8000d20 <HAL_I2C_Master_Transmit>
            i++;
 8003c32:	697b      	ldr	r3, [r7, #20]
 8003c34:	3301      	adds	r3, #1
 8003c36:	617b      	str	r3, [r7, #20]
    while(str[i] != '\0')
 8003c38:	697b      	ldr	r3, [r7, #20]
 8003c3a:	683a      	ldr	r2, [r7, #0]
 8003c3c:	4413      	add	r3, r2
 8003c3e:	781b      	ldrb	r3, [r3, #0]
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d1e7      	bne.n	8003c14 <lcd_print+0x18>
   }
}
 8003c44:	bf00      	nop
 8003c46:	3718      	adds	r7, #24
 8003c48:	46bd      	mov	sp, r7
 8003c4a:	bd80      	pop	{r7, pc}

08003c4c <lcd_position>:

void lcd_position(I2C_HandleTypeDef* I2Cx,char col, char row) // position du curseur le lcd
{
 8003c4c:	b580      	push	{r7, lr}
 8003c4e:	b086      	sub	sp, #24
 8003c50:	af02      	add	r7, sp, #8
 8003c52:	6078      	str	r0, [r7, #4]
 8003c54:	460b      	mov	r3, r1
 8003c56:	70fb      	strb	r3, [r7, #3]
 8003c58:	4613      	mov	r3, r2
 8003c5a:	70bb      	strb	r3, [r7, #2]
	I2C_HandleTypeDef* Handle = I2Cx;
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	60fb      	str	r3, [r7, #12]
    if(row == 0)
 8003c60:	78bb      	ldrb	r3, [r7, #2]
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d104      	bne.n	8003c70 <lcd_position+0x24>
    {
        col = col | 0x80;
 8003c66:	78fb      	ldrb	r3, [r7, #3]
 8003c68:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003c6c:	70fb      	strb	r3, [r7, #3]
 8003c6e:	e003      	b.n	8003c78 <lcd_position+0x2c>
    }
    else
    {
        col = col | 0xc0;
 8003c70:	78fb      	ldrb	r3, [r7, #3]
 8003c72:	f063 033f 	orn	r3, r3, #63	; 0x3f
 8003c76:	70fb      	strb	r3, [r7, #3]
    }

    char data[2];
    data[0] = 0x80;
 8003c78:	2380      	movs	r3, #128	; 0x80
 8003c7a:	723b      	strb	r3, [r7, #8]
    data[1] = col;
 8003c7c:	78fb      	ldrb	r3, [r7, #3]
 8003c7e:	727b      	strb	r3, [r7, #9]
    HAL_I2C_Master_Transmit(Handle,LCD_ADDRESS,(uint8_t *) data, 2,1000);
 8003c80:	f107 0208 	add.w	r2, r7, #8
 8003c84:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003c88:	9300      	str	r3, [sp, #0]
 8003c8a:	2302      	movs	r3, #2
 8003c8c:	217c      	movs	r1, #124	; 0x7c
 8003c8e:	68f8      	ldr	r0, [r7, #12]
 8003c90:	f7fd f846 	bl	8000d20 <HAL_I2C_Master_Transmit>
}
 8003c94:	bf00      	nop
 8003c96:	3710      	adds	r7, #16
 8003c98:	46bd      	mov	sp, r7
 8003c9a:	bd80      	pop	{r7, pc}

08003c9c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003c9c:	b590      	push	{r4, r7, lr}
 8003c9e:	b08d      	sub	sp, #52	; 0x34
 8003ca0:	af02      	add	r7, sp, #8

  /* MCU Configuration--------------------------------------------
   * ------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();//initialisation des périphériques
 8003ca2:	f7fc fc6d 	bl	8000580 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003ca6:	f000 f911 	bl	8003ecc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003caa:	f7ff fdc5 	bl	8003838 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8003cae:	f000 fa3d 	bl	800412c <MX_USART2_UART_Init>
  MX_I2C1_Init();//initialisation de I2C
 8003cb2:	f7ff fe29 	bl	8003908 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */

    lcd_init(&hi2c1,&lcdData);
 8003cb6:	4977      	ldr	r1, [pc, #476]	; (8003e94 <main+0x1f8>)
 8003cb8:	4877      	ldr	r0, [pc, #476]	; (8003e98 <main+0x1fc>)
 8003cba:	f7ff fea9 	bl	8003a10 <lcd_init>
    lcd_position(&hi2c1,0,0);
 8003cbe:	2200      	movs	r2, #0
 8003cc0:	2100      	movs	r1, #0
 8003cc2:	4875      	ldr	r0, [pc, #468]	; (8003e98 <main+0x1fc>)
 8003cc4:	f7ff ffc2 	bl	8003c4c <lcd_position>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  /* USER CODE END WHILE */
	  	  buf[0] = CAPTEUR_CMD_MSB;//on met les paramètres de capteur pour le mode de fonctionnement
 8003cc8:	232c      	movs	r3, #44	; 0x2c
 8003cca:	733b      	strb	r3, [r7, #12]
	  	  		buf[1] = CAPTEUR_CMD_LSB;//on met la valeur de l'octet de paramètres de capteur
 8003ccc:	2306      	movs	r3, #6
 8003cce:	737b      	strb	r3, [r7, #13]
	  	  		ret = HAL_I2C_Master_Transmit( &hi2c1, CAPTEUR_ADRS, buf, 2, HAL_MAX_DELAY);//envoie des octets via I2C
 8003cd0:	2388      	movs	r3, #136	; 0x88
 8003cd2:	b299      	uxth	r1, r3
 8003cd4:	f107 020c 	add.w	r2, r7, #12
 8003cd8:	f04f 33ff 	mov.w	r3, #4294967295
 8003cdc:	9300      	str	r3, [sp, #0]
 8003cde:	2302      	movs	r3, #2
 8003ce0:	486d      	ldr	r0, [pc, #436]	; (8003e98 <main+0x1fc>)
 8003ce2:	f7fd f81d 	bl	8000d20 <HAL_I2C_Master_Transmit>
 8003ce6:	4603      	mov	r3, r0
 8003ce8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	  	  		if ( ret != HAL_OK)
 8003cec:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d008      	beq.n	8003d06 <main+0x6a>
	  	  		{
	  	  			strcpy((char*)buf, "erreur_T!!\r\n");
 8003cf4:	f107 030c 	add.w	r3, r7, #12
 8003cf8:	4a68      	ldr	r2, [pc, #416]	; (8003e9c <main+0x200>)
 8003cfa:	461c      	mov	r4, r3
 8003cfc:	4613      	mov	r3, r2
 8003cfe:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003d00:	c407      	stmia	r4!, {r0, r1, r2}
 8003d02:	7023      	strb	r3, [r4, #0]
 8003d04:	e0b3      	b.n	8003e6e <main+0x1d2>
	  	  		}
	  	  			else
	  	  		{

	  	  		ret = HAL_I2C_Master_Receive( &hi2c1, CAPTEUR_ADRS, buf, 6, HAL_MAX_DELAY);//réception des octets
 8003d06:	2388      	movs	r3, #136	; 0x88
 8003d08:	b299      	uxth	r1, r3
 8003d0a:	f107 020c 	add.w	r2, r7, #12
 8003d0e:	f04f 33ff 	mov.w	r3, #4294967295
 8003d12:	9300      	str	r3, [sp, #0]
 8003d14:	2306      	movs	r3, #6
 8003d16:	4860      	ldr	r0, [pc, #384]	; (8003e98 <main+0x1fc>)
 8003d18:	f7fd f8f6 	bl	8000f08 <HAL_I2C_Master_Receive>
 8003d1c:	4603      	mov	r3, r0
 8003d1e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	  	  					if ( ret != HAL_OK)
 8003d22:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d008      	beq.n	8003d3c <main+0xa0>
	  	  				{
	  	  					strcpy((char*)buf, "erreur_R!!\r\n");
 8003d2a:	f107 030c 	add.w	r3, r7, #12
 8003d2e:	4a5c      	ldr	r2, [pc, #368]	; (8003ea0 <main+0x204>)
 8003d30:	461c      	mov	r4, r3
 8003d32:	4613      	mov	r3, r2
 8003d34:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003d36:	c407      	stmia	r4!, {r0, r1, r2}
 8003d38:	7023      	strb	r3, [r4, #0]
 8003d3a:	e098      	b.n	8003e6e <main+0x1d2>
	  	  				}
	  	  		else
	  	  		{

	  	  			value  =   buf[1] | buf[0] << 8;// le variable value contient la valeur des octets des MSB et LSB de capteur avec un décalge vers la gauche
 8003d3c:	7b7b      	ldrb	r3, [r7, #13]
 8003d3e:	b21a      	sxth	r2, r3
 8003d40:	7b3b      	ldrb	r3, [r7, #12]
 8003d42:	021b      	lsls	r3, r3, #8
 8003d44:	b21b      	sxth	r3, r3
 8003d46:	4313      	orrs	r3, r2
 8003d48:	b21b      	sxth	r3, r3
 8003d4a:	b29b      	uxth	r3, r3
 8003d4c:	817b      	strh	r3, [r7, #10]


	  	  			temp = -45 + 175 * ( (float)value / 65535);// on calcule la valeur de la température
 8003d4e:	897b      	ldrh	r3, [r7, #10]
 8003d50:	b29b      	uxth	r3, r3
 8003d52:	ee07 3a90 	vmov	s15, r3
 8003d56:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003d5a:	eddf 6a52 	vldr	s13, [pc, #328]	; 8003ea4 <main+0x208>
 8003d5e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003d62:	ed9f 7a51 	vldr	s14, [pc, #324]	; 8003ea8 <main+0x20c>
 8003d66:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003d6a:	ed9f 7a50 	vldr	s14, [pc, #320]	; 8003eac <main+0x210>
 8003d6e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003d72:	edc7 7a01 	vstr	s15, [r7, #4]

	  	  			Entier_part = (int) temp;// récuperation de la partie dicimale de la température
 8003d76:	edd7 7a01 	vldr	s15, [r7, #4]
 8003d7a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003d7e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003d82:	edc7 7a08 	vstr	s15, [r7, #32]
	  	  			Decimal_part = temp;// récuperation de la partie dicimale de la température
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	61fb      	str	r3, [r7, #28]
	  	  			Decimal_part *= 100;
 8003d8a:	edd7 7a07 	vldr	s15, [r7, #28]
 8003d8e:	ed9f 7a48 	vldr	s14, [pc, #288]	; 8003eb0 <main+0x214>
 8003d92:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003d96:	edc7 7a07 	vstr	s15, [r7, #28]
	  	  			Decimal_part = Decimal_part - (Entier_part * 100);// calcule de la partie dicimale de la température
 8003d9a:	edd7 7a08 	vldr	s15, [r7, #32]
 8003d9e:	ed9f 7a44 	vldr	s14, [pc, #272]	; 8003eb0 <main+0x214>
 8003da2:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003da6:	ed97 7a07 	vldr	s14, [r7, #28]
 8003daa:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003dae:	edc7 7a07 	vstr	s15, [r7, #28]
	  	  			value = buf[4] | buf[3] << 8;
 8003db2:	7c3b      	ldrb	r3, [r7, #16]
 8003db4:	b21a      	sxth	r2, r3
 8003db6:	7bfb      	ldrb	r3, [r7, #15]
 8003db8:	021b      	lsls	r3, r3, #8
 8003dba:	b21b      	sxth	r3, r3
 8003dbc:	4313      	orrs	r3, r2
 8003dbe:	b21b      	sxth	r3, r3
 8003dc0:	b29b      	uxth	r3, r3
 8003dc2:	817b      	strh	r3, [r7, #10]

	  	  			umid = -49 + 315 *( (float)value / 65535);
 8003dc4:	897b      	ldrh	r3, [r7, #10]
 8003dc6:	b29b      	uxth	r3, r3
 8003dc8:	ee07 3a90 	vmov	s15, r3
 8003dcc:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003dd0:	eddf 6a34 	vldr	s13, [pc, #208]	; 8003ea4 <main+0x208>
 8003dd4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003dd8:	ed9f 7a36 	vldr	s14, [pc, #216]	; 8003eb4 <main+0x218>
 8003ddc:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003de0:	ed9f 7a35 	vldr	s14, [pc, #212]	; 8003eb8 <main+0x21c>
 8003de4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003de8:	edc7 7a06 	vstr	s15, [r7, #24]
	  	  			sprintf( (char*)buf, "%u.%u C ; %u D", (unsigned int) Entier_part,(unsigned int) Decimal_part,(unsigned int) umid  );
 8003dec:	edd7 7a08 	vldr	s15, [r7, #32]
 8003df0:	eebc 7ae7 	vcvt.u32.f32	s14, s15
 8003df4:	edd7 7a07 	vldr	s15, [r7, #28]
 8003df8:	eefc 6ae7 	vcvt.u32.f32	s13, s15
 8003dfc:	edd7 7a06 	vldr	s15, [r7, #24]
 8003e00:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003e04:	ee17 3a90 	vmov	r3, s15
 8003e08:	f107 000c 	add.w	r0, r7, #12
 8003e0c:	9300      	str	r3, [sp, #0]
 8003e0e:	ee16 3a90 	vmov	r3, s13
 8003e12:	ee17 2a10 	vmov	r2, s14
 8003e16:	4929      	ldr	r1, [pc, #164]	; (8003ebc <main+0x220>)
 8003e18:	f000 fa56 	bl	80042c8 <siprintf>
	  	  			lcd_position(&hi2c1,0,0);
 8003e1c:	2200      	movs	r2, #0
 8003e1e:	2100      	movs	r1, #0
 8003e20:	481d      	ldr	r0, [pc, #116]	; (8003e98 <main+0x1fc>)
 8003e22:	f7ff ff13 	bl	8003c4c <lcd_position>
	  	  			lcd_print(&hi2c1,"T =  ");//affichage de la température
 8003e26:	4926      	ldr	r1, [pc, #152]	; (8003ec0 <main+0x224>)
 8003e28:	481b      	ldr	r0, [pc, #108]	; (8003e98 <main+0x1fc>)
 8003e2a:	f7ff fee7 	bl	8003bfc <lcd_print>
	  	  			lcd_position(&hi2c1,7,0);
 8003e2e:	2200      	movs	r2, #0
 8003e30:	2107      	movs	r1, #7
 8003e32:	4819      	ldr	r0, [pc, #100]	; (8003e98 <main+0x1fc>)
 8003e34:	f7ff ff0a 	bl	8003c4c <lcd_position>
	  	  			lcd_print(&hi2c1,buf);//affichage de la valeur de la  température
 8003e38:	f107 030c 	add.w	r3, r7, #12
 8003e3c:	4619      	mov	r1, r3
 8003e3e:	4816      	ldr	r0, [pc, #88]	; (8003e98 <main+0x1fc>)
 8003e40:	f7ff fedc 	bl	8003bfc <lcd_print>
	  	  			lcd_position(&hi2c1,0,1);
 8003e44:	2201      	movs	r2, #1
 8003e46:	2100      	movs	r1, #0
 8003e48:	4813      	ldr	r0, [pc, #76]	; (8003e98 <main+0x1fc>)
 8003e4a:	f7ff feff 	bl	8003c4c <lcd_position>

	  	  			lcd_print(&hi2c1,"H = ");//affichage de l'humidité
 8003e4e:	491d      	ldr	r1, [pc, #116]	; (8003ec4 <main+0x228>)
 8003e50:	4811      	ldr	r0, [pc, #68]	; (8003e98 <main+0x1fc>)
 8003e52:	f7ff fed3 	bl	8003bfc <lcd_print>
	  	  			lcd_position(&hi2c1,7,1);
 8003e56:	2201      	movs	r2, #1
 8003e58:	2107      	movs	r1, #7
 8003e5a:	480f      	ldr	r0, [pc, #60]	; (8003e98 <main+0x1fc>)
 8003e5c:	f7ff fef6 	bl	8003c4c <lcd_position>
	  	  			lcd_print(&hi2c1,&buf[10]);//affichage de la valeur de l'humidité
 8003e60:	f107 030c 	add.w	r3, r7, #12
 8003e64:	330a      	adds	r3, #10
 8003e66:	4619      	mov	r1, r3
 8003e68:	480b      	ldr	r0, [pc, #44]	; (8003e98 <main+0x1fc>)
 8003e6a:	f7ff fec7 	bl	8003bfc <lcd_print>

	  	  		}
	  	  		}
	  	  		HAL_UART_Transmit(&huart2, buf, strlen((char*)buf), HAL_MAX_DELAY);//transmission des octets
 8003e6e:	f107 030c 	add.w	r3, r7, #12
 8003e72:	4618      	mov	r0, r3
 8003e74:	f7fc f9ac 	bl	80001d0 <strlen>
 8003e78:	4603      	mov	r3, r0
 8003e7a:	b29a      	uxth	r2, r3
 8003e7c:	f107 010c 	add.w	r1, r7, #12
 8003e80:	f04f 33ff 	mov.w	r3, #4294967295
 8003e84:	4810      	ldr	r0, [pc, #64]	; (8003ec8 <main+0x22c>)
 8003e86:	f7fe ffcb 	bl	8002e20 <HAL_UART_Transmit>
	  	  		HAL_Delay(1000);
 8003e8a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003e8e:	f7fc fbef 	bl	8000670 <HAL_Delay>
  {
 8003e92:	e719      	b.n	8003cc8 <main+0x2c>
 8003e94:	2000008c 	.word	0x2000008c
 8003e98:	200000a0 	.word	0x200000a0
 8003e9c:	08004aec 	.word	0x08004aec
 8003ea0:	08004afc 	.word	0x08004afc
 8003ea4:	477fff00 	.word	0x477fff00
 8003ea8:	432f0000 	.word	0x432f0000
 8003eac:	42340000 	.word	0x42340000
 8003eb0:	42c80000 	.word	0x42c80000
 8003eb4:	439d8000 	.word	0x439d8000
 8003eb8:	42440000 	.word	0x42440000
 8003ebc:	08004b0c 	.word	0x08004b0c
 8003ec0:	08004b1c 	.word	0x08004b1c
 8003ec4:	08004b24 	.word	0x08004b24
 8003ec8:	200000ec 	.word	0x200000ec

08003ecc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003ecc:	b580      	push	{r7, lr}
 8003ece:	b0b8      	sub	sp, #224	; 0xe0
 8003ed0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003ed2:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8003ed6:	2244      	movs	r2, #68	; 0x44
 8003ed8:	2100      	movs	r1, #0
 8003eda:	4618      	mov	r0, r3
 8003edc:	f000 f9ec 	bl	80042b8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003ee0:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8003ee4:	2200      	movs	r2, #0
 8003ee6:	601a      	str	r2, [r3, #0]
 8003ee8:	605a      	str	r2, [r3, #4]
 8003eea:	609a      	str	r2, [r3, #8]
 8003eec:	60da      	str	r2, [r3, #12]
 8003eee:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003ef0:	463b      	mov	r3, r7
 8003ef2:	2288      	movs	r2, #136	; 0x88
 8003ef4:	2100      	movs	r1, #0
 8003ef6:	4618      	mov	r0, r3
 8003ef8:	f000 f9de 	bl	80042b8 <memset>

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8003efc:	2302      	movs	r3, #2
 8003efe:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003f02:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003f06:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8003f0a:	2310      	movs	r3, #16
 8003f0c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003f10:	2302      	movs	r3, #2
 8003f12:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8003f16:	2302      	movs	r3, #2
 8003f18:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 1;
 8003f1c:	2301      	movs	r3, #1
 8003f1e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 10;
 8003f22:	230a      	movs	r3, #10
 8003f24:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8003f28:	2307      	movs	r3, #7
 8003f2a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8003f2e:	2302      	movs	r3, #2
 8003f30:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8003f34:	2302      	movs	r3, #2
 8003f36:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003f3a:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8003f3e:	4618      	mov	r0, r3
 8003f40:	f7fd fcbc 	bl	80018bc <HAL_RCC_OscConfig>
 8003f44:	4603      	mov	r3, r0
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d001      	beq.n	8003f4e <SystemClock_Config+0x82>
  {
    Error_Handler();
 8003f4a:	f000 f836 	bl	8003fba <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003f4e:	230f      	movs	r3, #15
 8003f50:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003f54:	2303      	movs	r3, #3
 8003f56:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003f5a:	2300      	movs	r3, #0
 8003f5c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8003f60:	2300      	movs	r3, #0
 8003f62:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003f66:	2300      	movs	r3, #0
 8003f68:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8003f6c:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8003f70:	2104      	movs	r1, #4
 8003f72:	4618      	mov	r0, r3
 8003f74:	f7fe f852 	bl	800201c <HAL_RCC_ClockConfig>
 8003f78:	4603      	mov	r3, r0
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d001      	beq.n	8003f82 <SystemClock_Config+0xb6>
  {
    Error_Handler();
 8003f7e:	f000 f81c 	bl	8003fba <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_I2C1;
 8003f82:	2342      	movs	r3, #66	; 0x42
 8003f84:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8003f86:	2300      	movs	r3, #0
 8003f88:	63fb      	str	r3, [r7, #60]	; 0x3c
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8003f8a:	2300      	movs	r3, #0
 8003f8c:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003f8e:	463b      	mov	r3, r7
 8003f90:	4618      	mov	r0, r3
 8003f92:	f7fe fa47 	bl	8002424 <HAL_RCCEx_PeriphCLKConfig>
 8003f96:	4603      	mov	r3, r0
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d001      	beq.n	8003fa0 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8003f9c:	f000 f80d 	bl	8003fba <Error_Handler>
  }
  /** Configure the main internal regulator output voltage 
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8003fa0:	f44f 7000 	mov.w	r0, #512	; 0x200
 8003fa4:	f7fd fc34 	bl	8001810 <HAL_PWREx_ControlVoltageScaling>
 8003fa8:	4603      	mov	r3, r0
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d001      	beq.n	8003fb2 <SystemClock_Config+0xe6>
  {
    Error_Handler();
 8003fae:	f000 f804 	bl	8003fba <Error_Handler>
  }
}
 8003fb2:	bf00      	nop
 8003fb4:	37e0      	adds	r7, #224	; 0xe0
 8003fb6:	46bd      	mov	sp, r7
 8003fb8:	bd80      	pop	{r7, pc}

08003fba <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003fba:	b480      	push	{r7}
 8003fbc:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003fbe:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003fc0:	e7fe      	b.n	8003fc0 <Error_Handler+0x6>
	...

08003fc4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003fc4:	b480      	push	{r7}
 8003fc6:	b083      	sub	sp, #12
 8003fc8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003fca:	4b0f      	ldr	r3, [pc, #60]	; (8004008 <HAL_MspInit+0x44>)
 8003fcc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003fce:	4a0e      	ldr	r2, [pc, #56]	; (8004008 <HAL_MspInit+0x44>)
 8003fd0:	f043 0301 	orr.w	r3, r3, #1
 8003fd4:	6613      	str	r3, [r2, #96]	; 0x60
 8003fd6:	4b0c      	ldr	r3, [pc, #48]	; (8004008 <HAL_MspInit+0x44>)
 8003fd8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003fda:	f003 0301 	and.w	r3, r3, #1
 8003fde:	607b      	str	r3, [r7, #4]
 8003fe0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003fe2:	4b09      	ldr	r3, [pc, #36]	; (8004008 <HAL_MspInit+0x44>)
 8003fe4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003fe6:	4a08      	ldr	r2, [pc, #32]	; (8004008 <HAL_MspInit+0x44>)
 8003fe8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003fec:	6593      	str	r3, [r2, #88]	; 0x58
 8003fee:	4b06      	ldr	r3, [pc, #24]	; (8004008 <HAL_MspInit+0x44>)
 8003ff0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ff2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ff6:	603b      	str	r3, [r7, #0]
 8003ff8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003ffa:	bf00      	nop
 8003ffc:	370c      	adds	r7, #12
 8003ffe:	46bd      	mov	sp, r7
 8004000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004004:	4770      	bx	lr
 8004006:	bf00      	nop
 8004008:	40021000 	.word	0x40021000

0800400c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800400c:	b480      	push	{r7}
 800400e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8004010:	bf00      	nop
 8004012:	46bd      	mov	sp, r7
 8004014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004018:	4770      	bx	lr

0800401a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800401a:	b480      	push	{r7}
 800401c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800401e:	e7fe      	b.n	800401e <HardFault_Handler+0x4>

08004020 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004020:	b480      	push	{r7}
 8004022:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004024:	e7fe      	b.n	8004024 <MemManage_Handler+0x4>

08004026 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004026:	b480      	push	{r7}
 8004028:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800402a:	e7fe      	b.n	800402a <BusFault_Handler+0x4>

0800402c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800402c:	b480      	push	{r7}
 800402e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004030:	e7fe      	b.n	8004030 <UsageFault_Handler+0x4>

08004032 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004032:	b480      	push	{r7}
 8004034:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004036:	bf00      	nop
 8004038:	46bd      	mov	sp, r7
 800403a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800403e:	4770      	bx	lr

08004040 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004040:	b480      	push	{r7}
 8004042:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004044:	bf00      	nop
 8004046:	46bd      	mov	sp, r7
 8004048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800404c:	4770      	bx	lr

0800404e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800404e:	b480      	push	{r7}
 8004050:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004052:	bf00      	nop
 8004054:	46bd      	mov	sp, r7
 8004056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800405a:	4770      	bx	lr

0800405c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800405c:	b580      	push	{r7, lr}
 800405e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004060:	f7fc fae8 	bl	8000634 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004064:	bf00      	nop
 8004066:	bd80      	pop	{r7, pc}

08004068 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8004068:	b580      	push	{r7, lr}
 800406a:	b084      	sub	sp, #16
 800406c:	af00      	add	r7, sp, #0
 800406e:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8004070:	4b11      	ldr	r3, [pc, #68]	; (80040b8 <_sbrk+0x50>)
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	2b00      	cmp	r3, #0
 8004076:	d102      	bne.n	800407e <_sbrk+0x16>
		heap_end = &end;
 8004078:	4b0f      	ldr	r3, [pc, #60]	; (80040b8 <_sbrk+0x50>)
 800407a:	4a10      	ldr	r2, [pc, #64]	; (80040bc <_sbrk+0x54>)
 800407c:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 800407e:	4b0e      	ldr	r3, [pc, #56]	; (80040b8 <_sbrk+0x50>)
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8004084:	4b0c      	ldr	r3, [pc, #48]	; (80040b8 <_sbrk+0x50>)
 8004086:	681a      	ldr	r2, [r3, #0]
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	4413      	add	r3, r2
 800408c:	466a      	mov	r2, sp
 800408e:	4293      	cmp	r3, r2
 8004090:	d907      	bls.n	80040a2 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8004092:	f000 f8e7 	bl	8004264 <__errno>
 8004096:	4602      	mov	r2, r0
 8004098:	230c      	movs	r3, #12
 800409a:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 800409c:	f04f 33ff 	mov.w	r3, #4294967295
 80040a0:	e006      	b.n	80040b0 <_sbrk+0x48>
	}

	heap_end += incr;
 80040a2:	4b05      	ldr	r3, [pc, #20]	; (80040b8 <_sbrk+0x50>)
 80040a4:	681a      	ldr	r2, [r3, #0]
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	4413      	add	r3, r2
 80040aa:	4a03      	ldr	r2, [pc, #12]	; (80040b8 <_sbrk+0x50>)
 80040ac:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 80040ae:	68fb      	ldr	r3, [r7, #12]
}
 80040b0:	4618      	mov	r0, r3
 80040b2:	3710      	adds	r7, #16
 80040b4:	46bd      	mov	sp, r7
 80040b6:	bd80      	pop	{r7, pc}
 80040b8:	20000090 	.word	0x20000090
 80040bc:	20000170 	.word	0x20000170

080040c0 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80040c0:	b480      	push	{r7}
 80040c2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80040c4:	4b17      	ldr	r3, [pc, #92]	; (8004124 <SystemInit+0x64>)
 80040c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040ca:	4a16      	ldr	r2, [pc, #88]	; (8004124 <SystemInit+0x64>)
 80040cc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80040d0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 80040d4:	4b14      	ldr	r3, [pc, #80]	; (8004128 <SystemInit+0x68>)
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	4a13      	ldr	r2, [pc, #76]	; (8004128 <SystemInit+0x68>)
 80040da:	f043 0301 	orr.w	r3, r3, #1
 80040de:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 80040e0:	4b11      	ldr	r3, [pc, #68]	; (8004128 <SystemInit+0x68>)
 80040e2:	2200      	movs	r2, #0
 80040e4:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 80040e6:	4b10      	ldr	r3, [pc, #64]	; (8004128 <SystemInit+0x68>)
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	4a0f      	ldr	r2, [pc, #60]	; (8004128 <SystemInit+0x68>)
 80040ec:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 80040f0:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 80040f4:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 80040f6:	4b0c      	ldr	r3, [pc, #48]	; (8004128 <SystemInit+0x68>)
 80040f8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80040fc:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80040fe:	4b0a      	ldr	r3, [pc, #40]	; (8004128 <SystemInit+0x68>)
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	4a09      	ldr	r2, [pc, #36]	; (8004128 <SystemInit+0x68>)
 8004104:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004108:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 800410a:	4b07      	ldr	r3, [pc, #28]	; (8004128 <SystemInit+0x68>)
 800410c:	2200      	movs	r2, #0
 800410e:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8004110:	4b04      	ldr	r3, [pc, #16]	; (8004124 <SystemInit+0x64>)
 8004112:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8004116:	609a      	str	r2, [r3, #8]
#endif
}
 8004118:	bf00      	nop
 800411a:	46bd      	mov	sp, r7
 800411c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004120:	4770      	bx	lr
 8004122:	bf00      	nop
 8004124:	e000ed00 	.word	0xe000ed00
 8004128:	40021000 	.word	0x40021000

0800412c <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 800412c:	b580      	push	{r7, lr}
 800412e:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 8004130:	4b14      	ldr	r3, [pc, #80]	; (8004184 <MX_USART2_UART_Init+0x58>)
 8004132:	4a15      	ldr	r2, [pc, #84]	; (8004188 <MX_USART2_UART_Init+0x5c>)
 8004134:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8004136:	4b13      	ldr	r3, [pc, #76]	; (8004184 <MX_USART2_UART_Init+0x58>)
 8004138:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800413c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800413e:	4b11      	ldr	r3, [pc, #68]	; (8004184 <MX_USART2_UART_Init+0x58>)
 8004140:	2200      	movs	r2, #0
 8004142:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8004144:	4b0f      	ldr	r3, [pc, #60]	; (8004184 <MX_USART2_UART_Init+0x58>)
 8004146:	2200      	movs	r2, #0
 8004148:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800414a:	4b0e      	ldr	r3, [pc, #56]	; (8004184 <MX_USART2_UART_Init+0x58>)
 800414c:	2200      	movs	r2, #0
 800414e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8004150:	4b0c      	ldr	r3, [pc, #48]	; (8004184 <MX_USART2_UART_Init+0x58>)
 8004152:	220c      	movs	r2, #12
 8004154:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004156:	4b0b      	ldr	r3, [pc, #44]	; (8004184 <MX_USART2_UART_Init+0x58>)
 8004158:	2200      	movs	r2, #0
 800415a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800415c:	4b09      	ldr	r3, [pc, #36]	; (8004184 <MX_USART2_UART_Init+0x58>)
 800415e:	2200      	movs	r2, #0
 8004160:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8004162:	4b08      	ldr	r3, [pc, #32]	; (8004184 <MX_USART2_UART_Init+0x58>)
 8004164:	2200      	movs	r2, #0
 8004166:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8004168:	4b06      	ldr	r3, [pc, #24]	; (8004184 <MX_USART2_UART_Init+0x58>)
 800416a:	2200      	movs	r2, #0
 800416c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800416e:	4805      	ldr	r0, [pc, #20]	; (8004184 <MX_USART2_UART_Init+0x58>)
 8004170:	f7fe fe08 	bl	8002d84 <HAL_UART_Init>
 8004174:	4603      	mov	r3, r0
 8004176:	2b00      	cmp	r3, #0
 8004178:	d001      	beq.n	800417e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800417a:	f7ff ff1e 	bl	8003fba <Error_Handler>
  }

}
 800417e:	bf00      	nop
 8004180:	bd80      	pop	{r7, pc}
 8004182:	bf00      	nop
 8004184:	200000ec 	.word	0x200000ec
 8004188:	40004400 	.word	0x40004400

0800418c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800418c:	b580      	push	{r7, lr}
 800418e:	b08a      	sub	sp, #40	; 0x28
 8004190:	af00      	add	r7, sp, #0
 8004192:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004194:	f107 0314 	add.w	r3, r7, #20
 8004198:	2200      	movs	r2, #0
 800419a:	601a      	str	r2, [r3, #0]
 800419c:	605a      	str	r2, [r3, #4]
 800419e:	609a      	str	r2, [r3, #8]
 80041a0:	60da      	str	r2, [r3, #12]
 80041a2:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	4a17      	ldr	r2, [pc, #92]	; (8004208 <HAL_UART_MspInit+0x7c>)
 80041aa:	4293      	cmp	r3, r2
 80041ac:	d128      	bne.n	8004200 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80041ae:	4b17      	ldr	r3, [pc, #92]	; (800420c <HAL_UART_MspInit+0x80>)
 80041b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041b2:	4a16      	ldr	r2, [pc, #88]	; (800420c <HAL_UART_MspInit+0x80>)
 80041b4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80041b8:	6593      	str	r3, [r2, #88]	; 0x58
 80041ba:	4b14      	ldr	r3, [pc, #80]	; (800420c <HAL_UART_MspInit+0x80>)
 80041bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80041c2:	613b      	str	r3, [r7, #16]
 80041c4:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80041c6:	4b11      	ldr	r3, [pc, #68]	; (800420c <HAL_UART_MspInit+0x80>)
 80041c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80041ca:	4a10      	ldr	r2, [pc, #64]	; (800420c <HAL_UART_MspInit+0x80>)
 80041cc:	f043 0301 	orr.w	r3, r3, #1
 80041d0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80041d2:	4b0e      	ldr	r3, [pc, #56]	; (800420c <HAL_UART_MspInit+0x80>)
 80041d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80041d6:	f003 0301 	and.w	r3, r3, #1
 80041da:	60fb      	str	r3, [r7, #12]
 80041dc:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80041de:	230c      	movs	r3, #12
 80041e0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80041e2:	2302      	movs	r3, #2
 80041e4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80041e6:	2300      	movs	r3, #0
 80041e8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80041ea:	2303      	movs	r3, #3
 80041ec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80041ee:	2307      	movs	r3, #7
 80041f0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80041f2:	f107 0314 	add.w	r3, r7, #20
 80041f6:	4619      	mov	r1, r3
 80041f8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80041fc:	f7fc fb40 	bl	8000880 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8004200:	bf00      	nop
 8004202:	3728      	adds	r7, #40	; 0x28
 8004204:	46bd      	mov	sp, r7
 8004206:	bd80      	pop	{r7, pc}
 8004208:	40004400 	.word	0x40004400
 800420c:	40021000 	.word	0x40021000

08004210 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8004210:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004248 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8004214:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8004216:	e003      	b.n	8004220 <LoopCopyDataInit>

08004218 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8004218:	4b0c      	ldr	r3, [pc, #48]	; (800424c <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 800421a:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 800421c:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 800421e:	3104      	adds	r1, #4

08004220 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8004220:	480b      	ldr	r0, [pc, #44]	; (8004250 <LoopForever+0xa>)
	ldr	r3, =_edata
 8004222:	4b0c      	ldr	r3, [pc, #48]	; (8004254 <LoopForever+0xe>)
	adds	r2, r0, r1
 8004224:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8004226:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8004228:	d3f6      	bcc.n	8004218 <CopyDataInit>
	ldr	r2, =_sbss
 800422a:	4a0b      	ldr	r2, [pc, #44]	; (8004258 <LoopForever+0x12>)
	b	LoopFillZerobss
 800422c:	e002      	b.n	8004234 <LoopFillZerobss>

0800422e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 800422e:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8004230:	f842 3b04 	str.w	r3, [r2], #4

08004234 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8004234:	4b09      	ldr	r3, [pc, #36]	; (800425c <LoopForever+0x16>)
	cmp	r2, r3
 8004236:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8004238:	d3f9      	bcc.n	800422e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800423a:	f7ff ff41 	bl	80040c0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800423e:	f000 f817 	bl	8004270 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8004242:	f7ff fd2b 	bl	8003c9c <main>

08004246 <LoopForever>:

LoopForever:
    b LoopForever
 8004246:	e7fe      	b.n	8004246 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8004248:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 800424c:	08004bb8 	.word	0x08004bb8
	ldr	r0, =_sdata
 8004250:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8004254:	20000070 	.word	0x20000070
	ldr	r2, =_sbss
 8004258:	20000070 	.word	0x20000070
	ldr	r3, = _ebss
 800425c:	20000170 	.word	0x20000170

08004260 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8004260:	e7fe      	b.n	8004260 <ADC1_2_IRQHandler>
	...

08004264 <__errno>:
 8004264:	4b01      	ldr	r3, [pc, #4]	; (800426c <__errno+0x8>)
 8004266:	6818      	ldr	r0, [r3, #0]
 8004268:	4770      	bx	lr
 800426a:	bf00      	nop
 800426c:	2000000c 	.word	0x2000000c

08004270 <__libc_init_array>:
 8004270:	b570      	push	{r4, r5, r6, lr}
 8004272:	4e0d      	ldr	r6, [pc, #52]	; (80042a8 <__libc_init_array+0x38>)
 8004274:	4c0d      	ldr	r4, [pc, #52]	; (80042ac <__libc_init_array+0x3c>)
 8004276:	1ba4      	subs	r4, r4, r6
 8004278:	10a4      	asrs	r4, r4, #2
 800427a:	2500      	movs	r5, #0
 800427c:	42a5      	cmp	r5, r4
 800427e:	d109      	bne.n	8004294 <__libc_init_array+0x24>
 8004280:	4e0b      	ldr	r6, [pc, #44]	; (80042b0 <__libc_init_array+0x40>)
 8004282:	4c0c      	ldr	r4, [pc, #48]	; (80042b4 <__libc_init_array+0x44>)
 8004284:	f000 fc26 	bl	8004ad4 <_init>
 8004288:	1ba4      	subs	r4, r4, r6
 800428a:	10a4      	asrs	r4, r4, #2
 800428c:	2500      	movs	r5, #0
 800428e:	42a5      	cmp	r5, r4
 8004290:	d105      	bne.n	800429e <__libc_init_array+0x2e>
 8004292:	bd70      	pop	{r4, r5, r6, pc}
 8004294:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004298:	4798      	blx	r3
 800429a:	3501      	adds	r5, #1
 800429c:	e7ee      	b.n	800427c <__libc_init_array+0xc>
 800429e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80042a2:	4798      	blx	r3
 80042a4:	3501      	adds	r5, #1
 80042a6:	e7f2      	b.n	800428e <__libc_init_array+0x1e>
 80042a8:	08004bb0 	.word	0x08004bb0
 80042ac:	08004bb0 	.word	0x08004bb0
 80042b0:	08004bb0 	.word	0x08004bb0
 80042b4:	08004bb4 	.word	0x08004bb4

080042b8 <memset>:
 80042b8:	4402      	add	r2, r0
 80042ba:	4603      	mov	r3, r0
 80042bc:	4293      	cmp	r3, r2
 80042be:	d100      	bne.n	80042c2 <memset+0xa>
 80042c0:	4770      	bx	lr
 80042c2:	f803 1b01 	strb.w	r1, [r3], #1
 80042c6:	e7f9      	b.n	80042bc <memset+0x4>

080042c8 <siprintf>:
 80042c8:	b40e      	push	{r1, r2, r3}
 80042ca:	b500      	push	{lr}
 80042cc:	b09c      	sub	sp, #112	; 0x70
 80042ce:	ab1d      	add	r3, sp, #116	; 0x74
 80042d0:	9002      	str	r0, [sp, #8]
 80042d2:	9006      	str	r0, [sp, #24]
 80042d4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80042d8:	4809      	ldr	r0, [pc, #36]	; (8004300 <siprintf+0x38>)
 80042da:	9107      	str	r1, [sp, #28]
 80042dc:	9104      	str	r1, [sp, #16]
 80042de:	4909      	ldr	r1, [pc, #36]	; (8004304 <siprintf+0x3c>)
 80042e0:	f853 2b04 	ldr.w	r2, [r3], #4
 80042e4:	9105      	str	r1, [sp, #20]
 80042e6:	6800      	ldr	r0, [r0, #0]
 80042e8:	9301      	str	r3, [sp, #4]
 80042ea:	a902      	add	r1, sp, #8
 80042ec:	f000 f866 	bl	80043bc <_svfiprintf_r>
 80042f0:	9b02      	ldr	r3, [sp, #8]
 80042f2:	2200      	movs	r2, #0
 80042f4:	701a      	strb	r2, [r3, #0]
 80042f6:	b01c      	add	sp, #112	; 0x70
 80042f8:	f85d eb04 	ldr.w	lr, [sp], #4
 80042fc:	b003      	add	sp, #12
 80042fe:	4770      	bx	lr
 8004300:	2000000c 	.word	0x2000000c
 8004304:	ffff0208 	.word	0xffff0208

08004308 <__ssputs_r>:
 8004308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800430c:	688e      	ldr	r6, [r1, #8]
 800430e:	429e      	cmp	r6, r3
 8004310:	4682      	mov	sl, r0
 8004312:	460c      	mov	r4, r1
 8004314:	4690      	mov	r8, r2
 8004316:	4699      	mov	r9, r3
 8004318:	d837      	bhi.n	800438a <__ssputs_r+0x82>
 800431a:	898a      	ldrh	r2, [r1, #12]
 800431c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004320:	d031      	beq.n	8004386 <__ssputs_r+0x7e>
 8004322:	6825      	ldr	r5, [r4, #0]
 8004324:	6909      	ldr	r1, [r1, #16]
 8004326:	1a6f      	subs	r7, r5, r1
 8004328:	6965      	ldr	r5, [r4, #20]
 800432a:	2302      	movs	r3, #2
 800432c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004330:	fb95 f5f3 	sdiv	r5, r5, r3
 8004334:	f109 0301 	add.w	r3, r9, #1
 8004338:	443b      	add	r3, r7
 800433a:	429d      	cmp	r5, r3
 800433c:	bf38      	it	cc
 800433e:	461d      	movcc	r5, r3
 8004340:	0553      	lsls	r3, r2, #21
 8004342:	d530      	bpl.n	80043a6 <__ssputs_r+0x9e>
 8004344:	4629      	mov	r1, r5
 8004346:	f000 fb2b 	bl	80049a0 <_malloc_r>
 800434a:	4606      	mov	r6, r0
 800434c:	b950      	cbnz	r0, 8004364 <__ssputs_r+0x5c>
 800434e:	230c      	movs	r3, #12
 8004350:	f8ca 3000 	str.w	r3, [sl]
 8004354:	89a3      	ldrh	r3, [r4, #12]
 8004356:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800435a:	81a3      	strh	r3, [r4, #12]
 800435c:	f04f 30ff 	mov.w	r0, #4294967295
 8004360:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004364:	463a      	mov	r2, r7
 8004366:	6921      	ldr	r1, [r4, #16]
 8004368:	f000 faa8 	bl	80048bc <memcpy>
 800436c:	89a3      	ldrh	r3, [r4, #12]
 800436e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8004372:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004376:	81a3      	strh	r3, [r4, #12]
 8004378:	6126      	str	r6, [r4, #16]
 800437a:	6165      	str	r5, [r4, #20]
 800437c:	443e      	add	r6, r7
 800437e:	1bed      	subs	r5, r5, r7
 8004380:	6026      	str	r6, [r4, #0]
 8004382:	60a5      	str	r5, [r4, #8]
 8004384:	464e      	mov	r6, r9
 8004386:	454e      	cmp	r6, r9
 8004388:	d900      	bls.n	800438c <__ssputs_r+0x84>
 800438a:	464e      	mov	r6, r9
 800438c:	4632      	mov	r2, r6
 800438e:	4641      	mov	r1, r8
 8004390:	6820      	ldr	r0, [r4, #0]
 8004392:	f000 fa9e 	bl	80048d2 <memmove>
 8004396:	68a3      	ldr	r3, [r4, #8]
 8004398:	1b9b      	subs	r3, r3, r6
 800439a:	60a3      	str	r3, [r4, #8]
 800439c:	6823      	ldr	r3, [r4, #0]
 800439e:	441e      	add	r6, r3
 80043a0:	6026      	str	r6, [r4, #0]
 80043a2:	2000      	movs	r0, #0
 80043a4:	e7dc      	b.n	8004360 <__ssputs_r+0x58>
 80043a6:	462a      	mov	r2, r5
 80043a8:	f000 fb54 	bl	8004a54 <_realloc_r>
 80043ac:	4606      	mov	r6, r0
 80043ae:	2800      	cmp	r0, #0
 80043b0:	d1e2      	bne.n	8004378 <__ssputs_r+0x70>
 80043b2:	6921      	ldr	r1, [r4, #16]
 80043b4:	4650      	mov	r0, sl
 80043b6:	f000 faa5 	bl	8004904 <_free_r>
 80043ba:	e7c8      	b.n	800434e <__ssputs_r+0x46>

080043bc <_svfiprintf_r>:
 80043bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80043c0:	461d      	mov	r5, r3
 80043c2:	898b      	ldrh	r3, [r1, #12]
 80043c4:	061f      	lsls	r7, r3, #24
 80043c6:	b09d      	sub	sp, #116	; 0x74
 80043c8:	4680      	mov	r8, r0
 80043ca:	460c      	mov	r4, r1
 80043cc:	4616      	mov	r6, r2
 80043ce:	d50f      	bpl.n	80043f0 <_svfiprintf_r+0x34>
 80043d0:	690b      	ldr	r3, [r1, #16]
 80043d2:	b96b      	cbnz	r3, 80043f0 <_svfiprintf_r+0x34>
 80043d4:	2140      	movs	r1, #64	; 0x40
 80043d6:	f000 fae3 	bl	80049a0 <_malloc_r>
 80043da:	6020      	str	r0, [r4, #0]
 80043dc:	6120      	str	r0, [r4, #16]
 80043de:	b928      	cbnz	r0, 80043ec <_svfiprintf_r+0x30>
 80043e0:	230c      	movs	r3, #12
 80043e2:	f8c8 3000 	str.w	r3, [r8]
 80043e6:	f04f 30ff 	mov.w	r0, #4294967295
 80043ea:	e0c8      	b.n	800457e <_svfiprintf_r+0x1c2>
 80043ec:	2340      	movs	r3, #64	; 0x40
 80043ee:	6163      	str	r3, [r4, #20]
 80043f0:	2300      	movs	r3, #0
 80043f2:	9309      	str	r3, [sp, #36]	; 0x24
 80043f4:	2320      	movs	r3, #32
 80043f6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80043fa:	2330      	movs	r3, #48	; 0x30
 80043fc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004400:	9503      	str	r5, [sp, #12]
 8004402:	f04f 0b01 	mov.w	fp, #1
 8004406:	4637      	mov	r7, r6
 8004408:	463d      	mov	r5, r7
 800440a:	f815 3b01 	ldrb.w	r3, [r5], #1
 800440e:	b10b      	cbz	r3, 8004414 <_svfiprintf_r+0x58>
 8004410:	2b25      	cmp	r3, #37	; 0x25
 8004412:	d13e      	bne.n	8004492 <_svfiprintf_r+0xd6>
 8004414:	ebb7 0a06 	subs.w	sl, r7, r6
 8004418:	d00b      	beq.n	8004432 <_svfiprintf_r+0x76>
 800441a:	4653      	mov	r3, sl
 800441c:	4632      	mov	r2, r6
 800441e:	4621      	mov	r1, r4
 8004420:	4640      	mov	r0, r8
 8004422:	f7ff ff71 	bl	8004308 <__ssputs_r>
 8004426:	3001      	adds	r0, #1
 8004428:	f000 80a4 	beq.w	8004574 <_svfiprintf_r+0x1b8>
 800442c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800442e:	4453      	add	r3, sl
 8004430:	9309      	str	r3, [sp, #36]	; 0x24
 8004432:	783b      	ldrb	r3, [r7, #0]
 8004434:	2b00      	cmp	r3, #0
 8004436:	f000 809d 	beq.w	8004574 <_svfiprintf_r+0x1b8>
 800443a:	2300      	movs	r3, #0
 800443c:	f04f 32ff 	mov.w	r2, #4294967295
 8004440:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004444:	9304      	str	r3, [sp, #16]
 8004446:	9307      	str	r3, [sp, #28]
 8004448:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800444c:	931a      	str	r3, [sp, #104]	; 0x68
 800444e:	462f      	mov	r7, r5
 8004450:	2205      	movs	r2, #5
 8004452:	f817 1b01 	ldrb.w	r1, [r7], #1
 8004456:	4850      	ldr	r0, [pc, #320]	; (8004598 <_svfiprintf_r+0x1dc>)
 8004458:	f7fb fec2 	bl	80001e0 <memchr>
 800445c:	9b04      	ldr	r3, [sp, #16]
 800445e:	b9d0      	cbnz	r0, 8004496 <_svfiprintf_r+0xda>
 8004460:	06d9      	lsls	r1, r3, #27
 8004462:	bf44      	itt	mi
 8004464:	2220      	movmi	r2, #32
 8004466:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800446a:	071a      	lsls	r2, r3, #28
 800446c:	bf44      	itt	mi
 800446e:	222b      	movmi	r2, #43	; 0x2b
 8004470:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8004474:	782a      	ldrb	r2, [r5, #0]
 8004476:	2a2a      	cmp	r2, #42	; 0x2a
 8004478:	d015      	beq.n	80044a6 <_svfiprintf_r+0xea>
 800447a:	9a07      	ldr	r2, [sp, #28]
 800447c:	462f      	mov	r7, r5
 800447e:	2000      	movs	r0, #0
 8004480:	250a      	movs	r5, #10
 8004482:	4639      	mov	r1, r7
 8004484:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004488:	3b30      	subs	r3, #48	; 0x30
 800448a:	2b09      	cmp	r3, #9
 800448c:	d94d      	bls.n	800452a <_svfiprintf_r+0x16e>
 800448e:	b1b8      	cbz	r0, 80044c0 <_svfiprintf_r+0x104>
 8004490:	e00f      	b.n	80044b2 <_svfiprintf_r+0xf6>
 8004492:	462f      	mov	r7, r5
 8004494:	e7b8      	b.n	8004408 <_svfiprintf_r+0x4c>
 8004496:	4a40      	ldr	r2, [pc, #256]	; (8004598 <_svfiprintf_r+0x1dc>)
 8004498:	1a80      	subs	r0, r0, r2
 800449a:	fa0b f000 	lsl.w	r0, fp, r0
 800449e:	4318      	orrs	r0, r3
 80044a0:	9004      	str	r0, [sp, #16]
 80044a2:	463d      	mov	r5, r7
 80044a4:	e7d3      	b.n	800444e <_svfiprintf_r+0x92>
 80044a6:	9a03      	ldr	r2, [sp, #12]
 80044a8:	1d11      	adds	r1, r2, #4
 80044aa:	6812      	ldr	r2, [r2, #0]
 80044ac:	9103      	str	r1, [sp, #12]
 80044ae:	2a00      	cmp	r2, #0
 80044b0:	db01      	blt.n	80044b6 <_svfiprintf_r+0xfa>
 80044b2:	9207      	str	r2, [sp, #28]
 80044b4:	e004      	b.n	80044c0 <_svfiprintf_r+0x104>
 80044b6:	4252      	negs	r2, r2
 80044b8:	f043 0302 	orr.w	r3, r3, #2
 80044bc:	9207      	str	r2, [sp, #28]
 80044be:	9304      	str	r3, [sp, #16]
 80044c0:	783b      	ldrb	r3, [r7, #0]
 80044c2:	2b2e      	cmp	r3, #46	; 0x2e
 80044c4:	d10c      	bne.n	80044e0 <_svfiprintf_r+0x124>
 80044c6:	787b      	ldrb	r3, [r7, #1]
 80044c8:	2b2a      	cmp	r3, #42	; 0x2a
 80044ca:	d133      	bne.n	8004534 <_svfiprintf_r+0x178>
 80044cc:	9b03      	ldr	r3, [sp, #12]
 80044ce:	1d1a      	adds	r2, r3, #4
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	9203      	str	r2, [sp, #12]
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	bfb8      	it	lt
 80044d8:	f04f 33ff 	movlt.w	r3, #4294967295
 80044dc:	3702      	adds	r7, #2
 80044de:	9305      	str	r3, [sp, #20]
 80044e0:	4d2e      	ldr	r5, [pc, #184]	; (800459c <_svfiprintf_r+0x1e0>)
 80044e2:	7839      	ldrb	r1, [r7, #0]
 80044e4:	2203      	movs	r2, #3
 80044e6:	4628      	mov	r0, r5
 80044e8:	f7fb fe7a 	bl	80001e0 <memchr>
 80044ec:	b138      	cbz	r0, 80044fe <_svfiprintf_r+0x142>
 80044ee:	2340      	movs	r3, #64	; 0x40
 80044f0:	1b40      	subs	r0, r0, r5
 80044f2:	fa03 f000 	lsl.w	r0, r3, r0
 80044f6:	9b04      	ldr	r3, [sp, #16]
 80044f8:	4303      	orrs	r3, r0
 80044fa:	3701      	adds	r7, #1
 80044fc:	9304      	str	r3, [sp, #16]
 80044fe:	7839      	ldrb	r1, [r7, #0]
 8004500:	4827      	ldr	r0, [pc, #156]	; (80045a0 <_svfiprintf_r+0x1e4>)
 8004502:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004506:	2206      	movs	r2, #6
 8004508:	1c7e      	adds	r6, r7, #1
 800450a:	f7fb fe69 	bl	80001e0 <memchr>
 800450e:	2800      	cmp	r0, #0
 8004510:	d038      	beq.n	8004584 <_svfiprintf_r+0x1c8>
 8004512:	4b24      	ldr	r3, [pc, #144]	; (80045a4 <_svfiprintf_r+0x1e8>)
 8004514:	bb13      	cbnz	r3, 800455c <_svfiprintf_r+0x1a0>
 8004516:	9b03      	ldr	r3, [sp, #12]
 8004518:	3307      	adds	r3, #7
 800451a:	f023 0307 	bic.w	r3, r3, #7
 800451e:	3308      	adds	r3, #8
 8004520:	9303      	str	r3, [sp, #12]
 8004522:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004524:	444b      	add	r3, r9
 8004526:	9309      	str	r3, [sp, #36]	; 0x24
 8004528:	e76d      	b.n	8004406 <_svfiprintf_r+0x4a>
 800452a:	fb05 3202 	mla	r2, r5, r2, r3
 800452e:	2001      	movs	r0, #1
 8004530:	460f      	mov	r7, r1
 8004532:	e7a6      	b.n	8004482 <_svfiprintf_r+0xc6>
 8004534:	2300      	movs	r3, #0
 8004536:	3701      	adds	r7, #1
 8004538:	9305      	str	r3, [sp, #20]
 800453a:	4619      	mov	r1, r3
 800453c:	250a      	movs	r5, #10
 800453e:	4638      	mov	r0, r7
 8004540:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004544:	3a30      	subs	r2, #48	; 0x30
 8004546:	2a09      	cmp	r2, #9
 8004548:	d903      	bls.n	8004552 <_svfiprintf_r+0x196>
 800454a:	2b00      	cmp	r3, #0
 800454c:	d0c8      	beq.n	80044e0 <_svfiprintf_r+0x124>
 800454e:	9105      	str	r1, [sp, #20]
 8004550:	e7c6      	b.n	80044e0 <_svfiprintf_r+0x124>
 8004552:	fb05 2101 	mla	r1, r5, r1, r2
 8004556:	2301      	movs	r3, #1
 8004558:	4607      	mov	r7, r0
 800455a:	e7f0      	b.n	800453e <_svfiprintf_r+0x182>
 800455c:	ab03      	add	r3, sp, #12
 800455e:	9300      	str	r3, [sp, #0]
 8004560:	4622      	mov	r2, r4
 8004562:	4b11      	ldr	r3, [pc, #68]	; (80045a8 <_svfiprintf_r+0x1ec>)
 8004564:	a904      	add	r1, sp, #16
 8004566:	4640      	mov	r0, r8
 8004568:	f3af 8000 	nop.w
 800456c:	f1b0 3fff 	cmp.w	r0, #4294967295
 8004570:	4681      	mov	r9, r0
 8004572:	d1d6      	bne.n	8004522 <_svfiprintf_r+0x166>
 8004574:	89a3      	ldrh	r3, [r4, #12]
 8004576:	065b      	lsls	r3, r3, #25
 8004578:	f53f af35 	bmi.w	80043e6 <_svfiprintf_r+0x2a>
 800457c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800457e:	b01d      	add	sp, #116	; 0x74
 8004580:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004584:	ab03      	add	r3, sp, #12
 8004586:	9300      	str	r3, [sp, #0]
 8004588:	4622      	mov	r2, r4
 800458a:	4b07      	ldr	r3, [pc, #28]	; (80045a8 <_svfiprintf_r+0x1ec>)
 800458c:	a904      	add	r1, sp, #16
 800458e:	4640      	mov	r0, r8
 8004590:	f000 f882 	bl	8004698 <_printf_i>
 8004594:	e7ea      	b.n	800456c <_svfiprintf_r+0x1b0>
 8004596:	bf00      	nop
 8004598:	08004b74 	.word	0x08004b74
 800459c:	08004b7a 	.word	0x08004b7a
 80045a0:	08004b7e 	.word	0x08004b7e
 80045a4:	00000000 	.word	0x00000000
 80045a8:	08004309 	.word	0x08004309

080045ac <_printf_common>:
 80045ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80045b0:	4691      	mov	r9, r2
 80045b2:	461f      	mov	r7, r3
 80045b4:	688a      	ldr	r2, [r1, #8]
 80045b6:	690b      	ldr	r3, [r1, #16]
 80045b8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80045bc:	4293      	cmp	r3, r2
 80045be:	bfb8      	it	lt
 80045c0:	4613      	movlt	r3, r2
 80045c2:	f8c9 3000 	str.w	r3, [r9]
 80045c6:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80045ca:	4606      	mov	r6, r0
 80045cc:	460c      	mov	r4, r1
 80045ce:	b112      	cbz	r2, 80045d6 <_printf_common+0x2a>
 80045d0:	3301      	adds	r3, #1
 80045d2:	f8c9 3000 	str.w	r3, [r9]
 80045d6:	6823      	ldr	r3, [r4, #0]
 80045d8:	0699      	lsls	r1, r3, #26
 80045da:	bf42      	ittt	mi
 80045dc:	f8d9 3000 	ldrmi.w	r3, [r9]
 80045e0:	3302      	addmi	r3, #2
 80045e2:	f8c9 3000 	strmi.w	r3, [r9]
 80045e6:	6825      	ldr	r5, [r4, #0]
 80045e8:	f015 0506 	ands.w	r5, r5, #6
 80045ec:	d107      	bne.n	80045fe <_printf_common+0x52>
 80045ee:	f104 0a19 	add.w	sl, r4, #25
 80045f2:	68e3      	ldr	r3, [r4, #12]
 80045f4:	f8d9 2000 	ldr.w	r2, [r9]
 80045f8:	1a9b      	subs	r3, r3, r2
 80045fa:	42ab      	cmp	r3, r5
 80045fc:	dc28      	bgt.n	8004650 <_printf_common+0xa4>
 80045fe:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8004602:	6822      	ldr	r2, [r4, #0]
 8004604:	3300      	adds	r3, #0
 8004606:	bf18      	it	ne
 8004608:	2301      	movne	r3, #1
 800460a:	0692      	lsls	r2, r2, #26
 800460c:	d42d      	bmi.n	800466a <_printf_common+0xbe>
 800460e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004612:	4639      	mov	r1, r7
 8004614:	4630      	mov	r0, r6
 8004616:	47c0      	blx	r8
 8004618:	3001      	adds	r0, #1
 800461a:	d020      	beq.n	800465e <_printf_common+0xb2>
 800461c:	6823      	ldr	r3, [r4, #0]
 800461e:	68e5      	ldr	r5, [r4, #12]
 8004620:	f8d9 2000 	ldr.w	r2, [r9]
 8004624:	f003 0306 	and.w	r3, r3, #6
 8004628:	2b04      	cmp	r3, #4
 800462a:	bf08      	it	eq
 800462c:	1aad      	subeq	r5, r5, r2
 800462e:	68a3      	ldr	r3, [r4, #8]
 8004630:	6922      	ldr	r2, [r4, #16]
 8004632:	bf0c      	ite	eq
 8004634:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004638:	2500      	movne	r5, #0
 800463a:	4293      	cmp	r3, r2
 800463c:	bfc4      	itt	gt
 800463e:	1a9b      	subgt	r3, r3, r2
 8004640:	18ed      	addgt	r5, r5, r3
 8004642:	f04f 0900 	mov.w	r9, #0
 8004646:	341a      	adds	r4, #26
 8004648:	454d      	cmp	r5, r9
 800464a:	d11a      	bne.n	8004682 <_printf_common+0xd6>
 800464c:	2000      	movs	r0, #0
 800464e:	e008      	b.n	8004662 <_printf_common+0xb6>
 8004650:	2301      	movs	r3, #1
 8004652:	4652      	mov	r2, sl
 8004654:	4639      	mov	r1, r7
 8004656:	4630      	mov	r0, r6
 8004658:	47c0      	blx	r8
 800465a:	3001      	adds	r0, #1
 800465c:	d103      	bne.n	8004666 <_printf_common+0xba>
 800465e:	f04f 30ff 	mov.w	r0, #4294967295
 8004662:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004666:	3501      	adds	r5, #1
 8004668:	e7c3      	b.n	80045f2 <_printf_common+0x46>
 800466a:	18e1      	adds	r1, r4, r3
 800466c:	1c5a      	adds	r2, r3, #1
 800466e:	2030      	movs	r0, #48	; 0x30
 8004670:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004674:	4422      	add	r2, r4
 8004676:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800467a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800467e:	3302      	adds	r3, #2
 8004680:	e7c5      	b.n	800460e <_printf_common+0x62>
 8004682:	2301      	movs	r3, #1
 8004684:	4622      	mov	r2, r4
 8004686:	4639      	mov	r1, r7
 8004688:	4630      	mov	r0, r6
 800468a:	47c0      	blx	r8
 800468c:	3001      	adds	r0, #1
 800468e:	d0e6      	beq.n	800465e <_printf_common+0xb2>
 8004690:	f109 0901 	add.w	r9, r9, #1
 8004694:	e7d8      	b.n	8004648 <_printf_common+0x9c>
	...

08004698 <_printf_i>:
 8004698:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800469c:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 80046a0:	460c      	mov	r4, r1
 80046a2:	7e09      	ldrb	r1, [r1, #24]
 80046a4:	b085      	sub	sp, #20
 80046a6:	296e      	cmp	r1, #110	; 0x6e
 80046a8:	4617      	mov	r7, r2
 80046aa:	4606      	mov	r6, r0
 80046ac:	4698      	mov	r8, r3
 80046ae:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80046b0:	f000 80b3 	beq.w	800481a <_printf_i+0x182>
 80046b4:	d822      	bhi.n	80046fc <_printf_i+0x64>
 80046b6:	2963      	cmp	r1, #99	; 0x63
 80046b8:	d036      	beq.n	8004728 <_printf_i+0x90>
 80046ba:	d80a      	bhi.n	80046d2 <_printf_i+0x3a>
 80046bc:	2900      	cmp	r1, #0
 80046be:	f000 80b9 	beq.w	8004834 <_printf_i+0x19c>
 80046c2:	2958      	cmp	r1, #88	; 0x58
 80046c4:	f000 8083 	beq.w	80047ce <_printf_i+0x136>
 80046c8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80046cc:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 80046d0:	e032      	b.n	8004738 <_printf_i+0xa0>
 80046d2:	2964      	cmp	r1, #100	; 0x64
 80046d4:	d001      	beq.n	80046da <_printf_i+0x42>
 80046d6:	2969      	cmp	r1, #105	; 0x69
 80046d8:	d1f6      	bne.n	80046c8 <_printf_i+0x30>
 80046da:	6820      	ldr	r0, [r4, #0]
 80046dc:	6813      	ldr	r3, [r2, #0]
 80046de:	0605      	lsls	r5, r0, #24
 80046e0:	f103 0104 	add.w	r1, r3, #4
 80046e4:	d52a      	bpl.n	800473c <_printf_i+0xa4>
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	6011      	str	r1, [r2, #0]
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	da03      	bge.n	80046f6 <_printf_i+0x5e>
 80046ee:	222d      	movs	r2, #45	; 0x2d
 80046f0:	425b      	negs	r3, r3
 80046f2:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80046f6:	486f      	ldr	r0, [pc, #444]	; (80048b4 <_printf_i+0x21c>)
 80046f8:	220a      	movs	r2, #10
 80046fa:	e039      	b.n	8004770 <_printf_i+0xd8>
 80046fc:	2973      	cmp	r1, #115	; 0x73
 80046fe:	f000 809d 	beq.w	800483c <_printf_i+0x1a4>
 8004702:	d808      	bhi.n	8004716 <_printf_i+0x7e>
 8004704:	296f      	cmp	r1, #111	; 0x6f
 8004706:	d020      	beq.n	800474a <_printf_i+0xb2>
 8004708:	2970      	cmp	r1, #112	; 0x70
 800470a:	d1dd      	bne.n	80046c8 <_printf_i+0x30>
 800470c:	6823      	ldr	r3, [r4, #0]
 800470e:	f043 0320 	orr.w	r3, r3, #32
 8004712:	6023      	str	r3, [r4, #0]
 8004714:	e003      	b.n	800471e <_printf_i+0x86>
 8004716:	2975      	cmp	r1, #117	; 0x75
 8004718:	d017      	beq.n	800474a <_printf_i+0xb2>
 800471a:	2978      	cmp	r1, #120	; 0x78
 800471c:	d1d4      	bne.n	80046c8 <_printf_i+0x30>
 800471e:	2378      	movs	r3, #120	; 0x78
 8004720:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004724:	4864      	ldr	r0, [pc, #400]	; (80048b8 <_printf_i+0x220>)
 8004726:	e055      	b.n	80047d4 <_printf_i+0x13c>
 8004728:	6813      	ldr	r3, [r2, #0]
 800472a:	1d19      	adds	r1, r3, #4
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	6011      	str	r1, [r2, #0]
 8004730:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004734:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004738:	2301      	movs	r3, #1
 800473a:	e08c      	b.n	8004856 <_printf_i+0x1be>
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	6011      	str	r1, [r2, #0]
 8004740:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004744:	bf18      	it	ne
 8004746:	b21b      	sxthne	r3, r3
 8004748:	e7cf      	b.n	80046ea <_printf_i+0x52>
 800474a:	6813      	ldr	r3, [r2, #0]
 800474c:	6825      	ldr	r5, [r4, #0]
 800474e:	1d18      	adds	r0, r3, #4
 8004750:	6010      	str	r0, [r2, #0]
 8004752:	0628      	lsls	r0, r5, #24
 8004754:	d501      	bpl.n	800475a <_printf_i+0xc2>
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	e002      	b.n	8004760 <_printf_i+0xc8>
 800475a:	0668      	lsls	r0, r5, #25
 800475c:	d5fb      	bpl.n	8004756 <_printf_i+0xbe>
 800475e:	881b      	ldrh	r3, [r3, #0]
 8004760:	4854      	ldr	r0, [pc, #336]	; (80048b4 <_printf_i+0x21c>)
 8004762:	296f      	cmp	r1, #111	; 0x6f
 8004764:	bf14      	ite	ne
 8004766:	220a      	movne	r2, #10
 8004768:	2208      	moveq	r2, #8
 800476a:	2100      	movs	r1, #0
 800476c:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004770:	6865      	ldr	r5, [r4, #4]
 8004772:	60a5      	str	r5, [r4, #8]
 8004774:	2d00      	cmp	r5, #0
 8004776:	f2c0 8095 	blt.w	80048a4 <_printf_i+0x20c>
 800477a:	6821      	ldr	r1, [r4, #0]
 800477c:	f021 0104 	bic.w	r1, r1, #4
 8004780:	6021      	str	r1, [r4, #0]
 8004782:	2b00      	cmp	r3, #0
 8004784:	d13d      	bne.n	8004802 <_printf_i+0x16a>
 8004786:	2d00      	cmp	r5, #0
 8004788:	f040 808e 	bne.w	80048a8 <_printf_i+0x210>
 800478c:	4665      	mov	r5, ip
 800478e:	2a08      	cmp	r2, #8
 8004790:	d10b      	bne.n	80047aa <_printf_i+0x112>
 8004792:	6823      	ldr	r3, [r4, #0]
 8004794:	07db      	lsls	r3, r3, #31
 8004796:	d508      	bpl.n	80047aa <_printf_i+0x112>
 8004798:	6923      	ldr	r3, [r4, #16]
 800479a:	6862      	ldr	r2, [r4, #4]
 800479c:	429a      	cmp	r2, r3
 800479e:	bfde      	ittt	le
 80047a0:	2330      	movle	r3, #48	; 0x30
 80047a2:	f805 3c01 	strble.w	r3, [r5, #-1]
 80047a6:	f105 35ff 	addle.w	r5, r5, #4294967295
 80047aa:	ebac 0305 	sub.w	r3, ip, r5
 80047ae:	6123      	str	r3, [r4, #16]
 80047b0:	f8cd 8000 	str.w	r8, [sp]
 80047b4:	463b      	mov	r3, r7
 80047b6:	aa03      	add	r2, sp, #12
 80047b8:	4621      	mov	r1, r4
 80047ba:	4630      	mov	r0, r6
 80047bc:	f7ff fef6 	bl	80045ac <_printf_common>
 80047c0:	3001      	adds	r0, #1
 80047c2:	d14d      	bne.n	8004860 <_printf_i+0x1c8>
 80047c4:	f04f 30ff 	mov.w	r0, #4294967295
 80047c8:	b005      	add	sp, #20
 80047ca:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80047ce:	4839      	ldr	r0, [pc, #228]	; (80048b4 <_printf_i+0x21c>)
 80047d0:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 80047d4:	6813      	ldr	r3, [r2, #0]
 80047d6:	6821      	ldr	r1, [r4, #0]
 80047d8:	1d1d      	adds	r5, r3, #4
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	6015      	str	r5, [r2, #0]
 80047de:	060a      	lsls	r2, r1, #24
 80047e0:	d50b      	bpl.n	80047fa <_printf_i+0x162>
 80047e2:	07ca      	lsls	r2, r1, #31
 80047e4:	bf44      	itt	mi
 80047e6:	f041 0120 	orrmi.w	r1, r1, #32
 80047ea:	6021      	strmi	r1, [r4, #0]
 80047ec:	b91b      	cbnz	r3, 80047f6 <_printf_i+0x15e>
 80047ee:	6822      	ldr	r2, [r4, #0]
 80047f0:	f022 0220 	bic.w	r2, r2, #32
 80047f4:	6022      	str	r2, [r4, #0]
 80047f6:	2210      	movs	r2, #16
 80047f8:	e7b7      	b.n	800476a <_printf_i+0xd2>
 80047fa:	064d      	lsls	r5, r1, #25
 80047fc:	bf48      	it	mi
 80047fe:	b29b      	uxthmi	r3, r3
 8004800:	e7ef      	b.n	80047e2 <_printf_i+0x14a>
 8004802:	4665      	mov	r5, ip
 8004804:	fbb3 f1f2 	udiv	r1, r3, r2
 8004808:	fb02 3311 	mls	r3, r2, r1, r3
 800480c:	5cc3      	ldrb	r3, [r0, r3]
 800480e:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8004812:	460b      	mov	r3, r1
 8004814:	2900      	cmp	r1, #0
 8004816:	d1f5      	bne.n	8004804 <_printf_i+0x16c>
 8004818:	e7b9      	b.n	800478e <_printf_i+0xf6>
 800481a:	6813      	ldr	r3, [r2, #0]
 800481c:	6825      	ldr	r5, [r4, #0]
 800481e:	6961      	ldr	r1, [r4, #20]
 8004820:	1d18      	adds	r0, r3, #4
 8004822:	6010      	str	r0, [r2, #0]
 8004824:	0628      	lsls	r0, r5, #24
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	d501      	bpl.n	800482e <_printf_i+0x196>
 800482a:	6019      	str	r1, [r3, #0]
 800482c:	e002      	b.n	8004834 <_printf_i+0x19c>
 800482e:	066a      	lsls	r2, r5, #25
 8004830:	d5fb      	bpl.n	800482a <_printf_i+0x192>
 8004832:	8019      	strh	r1, [r3, #0]
 8004834:	2300      	movs	r3, #0
 8004836:	6123      	str	r3, [r4, #16]
 8004838:	4665      	mov	r5, ip
 800483a:	e7b9      	b.n	80047b0 <_printf_i+0x118>
 800483c:	6813      	ldr	r3, [r2, #0]
 800483e:	1d19      	adds	r1, r3, #4
 8004840:	6011      	str	r1, [r2, #0]
 8004842:	681d      	ldr	r5, [r3, #0]
 8004844:	6862      	ldr	r2, [r4, #4]
 8004846:	2100      	movs	r1, #0
 8004848:	4628      	mov	r0, r5
 800484a:	f7fb fcc9 	bl	80001e0 <memchr>
 800484e:	b108      	cbz	r0, 8004854 <_printf_i+0x1bc>
 8004850:	1b40      	subs	r0, r0, r5
 8004852:	6060      	str	r0, [r4, #4]
 8004854:	6863      	ldr	r3, [r4, #4]
 8004856:	6123      	str	r3, [r4, #16]
 8004858:	2300      	movs	r3, #0
 800485a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800485e:	e7a7      	b.n	80047b0 <_printf_i+0x118>
 8004860:	6923      	ldr	r3, [r4, #16]
 8004862:	462a      	mov	r2, r5
 8004864:	4639      	mov	r1, r7
 8004866:	4630      	mov	r0, r6
 8004868:	47c0      	blx	r8
 800486a:	3001      	adds	r0, #1
 800486c:	d0aa      	beq.n	80047c4 <_printf_i+0x12c>
 800486e:	6823      	ldr	r3, [r4, #0]
 8004870:	079b      	lsls	r3, r3, #30
 8004872:	d413      	bmi.n	800489c <_printf_i+0x204>
 8004874:	68e0      	ldr	r0, [r4, #12]
 8004876:	9b03      	ldr	r3, [sp, #12]
 8004878:	4298      	cmp	r0, r3
 800487a:	bfb8      	it	lt
 800487c:	4618      	movlt	r0, r3
 800487e:	e7a3      	b.n	80047c8 <_printf_i+0x130>
 8004880:	2301      	movs	r3, #1
 8004882:	464a      	mov	r2, r9
 8004884:	4639      	mov	r1, r7
 8004886:	4630      	mov	r0, r6
 8004888:	47c0      	blx	r8
 800488a:	3001      	adds	r0, #1
 800488c:	d09a      	beq.n	80047c4 <_printf_i+0x12c>
 800488e:	3501      	adds	r5, #1
 8004890:	68e3      	ldr	r3, [r4, #12]
 8004892:	9a03      	ldr	r2, [sp, #12]
 8004894:	1a9b      	subs	r3, r3, r2
 8004896:	42ab      	cmp	r3, r5
 8004898:	dcf2      	bgt.n	8004880 <_printf_i+0x1e8>
 800489a:	e7eb      	b.n	8004874 <_printf_i+0x1dc>
 800489c:	2500      	movs	r5, #0
 800489e:	f104 0919 	add.w	r9, r4, #25
 80048a2:	e7f5      	b.n	8004890 <_printf_i+0x1f8>
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d1ac      	bne.n	8004802 <_printf_i+0x16a>
 80048a8:	7803      	ldrb	r3, [r0, #0]
 80048aa:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80048ae:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80048b2:	e76c      	b.n	800478e <_printf_i+0xf6>
 80048b4:	08004b85 	.word	0x08004b85
 80048b8:	08004b96 	.word	0x08004b96

080048bc <memcpy>:
 80048bc:	b510      	push	{r4, lr}
 80048be:	1e43      	subs	r3, r0, #1
 80048c0:	440a      	add	r2, r1
 80048c2:	4291      	cmp	r1, r2
 80048c4:	d100      	bne.n	80048c8 <memcpy+0xc>
 80048c6:	bd10      	pop	{r4, pc}
 80048c8:	f811 4b01 	ldrb.w	r4, [r1], #1
 80048cc:	f803 4f01 	strb.w	r4, [r3, #1]!
 80048d0:	e7f7      	b.n	80048c2 <memcpy+0x6>

080048d2 <memmove>:
 80048d2:	4288      	cmp	r0, r1
 80048d4:	b510      	push	{r4, lr}
 80048d6:	eb01 0302 	add.w	r3, r1, r2
 80048da:	d807      	bhi.n	80048ec <memmove+0x1a>
 80048dc:	1e42      	subs	r2, r0, #1
 80048de:	4299      	cmp	r1, r3
 80048e0:	d00a      	beq.n	80048f8 <memmove+0x26>
 80048e2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80048e6:	f802 4f01 	strb.w	r4, [r2, #1]!
 80048ea:	e7f8      	b.n	80048de <memmove+0xc>
 80048ec:	4283      	cmp	r3, r0
 80048ee:	d9f5      	bls.n	80048dc <memmove+0xa>
 80048f0:	1881      	adds	r1, r0, r2
 80048f2:	1ad2      	subs	r2, r2, r3
 80048f4:	42d3      	cmn	r3, r2
 80048f6:	d100      	bne.n	80048fa <memmove+0x28>
 80048f8:	bd10      	pop	{r4, pc}
 80048fa:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80048fe:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8004902:	e7f7      	b.n	80048f4 <memmove+0x22>

08004904 <_free_r>:
 8004904:	b538      	push	{r3, r4, r5, lr}
 8004906:	4605      	mov	r5, r0
 8004908:	2900      	cmp	r1, #0
 800490a:	d045      	beq.n	8004998 <_free_r+0x94>
 800490c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004910:	1f0c      	subs	r4, r1, #4
 8004912:	2b00      	cmp	r3, #0
 8004914:	bfb8      	it	lt
 8004916:	18e4      	addlt	r4, r4, r3
 8004918:	f000 f8d2 	bl	8004ac0 <__malloc_lock>
 800491c:	4a1f      	ldr	r2, [pc, #124]	; (800499c <_free_r+0x98>)
 800491e:	6813      	ldr	r3, [r2, #0]
 8004920:	4610      	mov	r0, r2
 8004922:	b933      	cbnz	r3, 8004932 <_free_r+0x2e>
 8004924:	6063      	str	r3, [r4, #4]
 8004926:	6014      	str	r4, [r2, #0]
 8004928:	4628      	mov	r0, r5
 800492a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800492e:	f000 b8c8 	b.w	8004ac2 <__malloc_unlock>
 8004932:	42a3      	cmp	r3, r4
 8004934:	d90c      	bls.n	8004950 <_free_r+0x4c>
 8004936:	6821      	ldr	r1, [r4, #0]
 8004938:	1862      	adds	r2, r4, r1
 800493a:	4293      	cmp	r3, r2
 800493c:	bf04      	itt	eq
 800493e:	681a      	ldreq	r2, [r3, #0]
 8004940:	685b      	ldreq	r3, [r3, #4]
 8004942:	6063      	str	r3, [r4, #4]
 8004944:	bf04      	itt	eq
 8004946:	1852      	addeq	r2, r2, r1
 8004948:	6022      	streq	r2, [r4, #0]
 800494a:	6004      	str	r4, [r0, #0]
 800494c:	e7ec      	b.n	8004928 <_free_r+0x24>
 800494e:	4613      	mov	r3, r2
 8004950:	685a      	ldr	r2, [r3, #4]
 8004952:	b10a      	cbz	r2, 8004958 <_free_r+0x54>
 8004954:	42a2      	cmp	r2, r4
 8004956:	d9fa      	bls.n	800494e <_free_r+0x4a>
 8004958:	6819      	ldr	r1, [r3, #0]
 800495a:	1858      	adds	r0, r3, r1
 800495c:	42a0      	cmp	r0, r4
 800495e:	d10b      	bne.n	8004978 <_free_r+0x74>
 8004960:	6820      	ldr	r0, [r4, #0]
 8004962:	4401      	add	r1, r0
 8004964:	1858      	adds	r0, r3, r1
 8004966:	4282      	cmp	r2, r0
 8004968:	6019      	str	r1, [r3, #0]
 800496a:	d1dd      	bne.n	8004928 <_free_r+0x24>
 800496c:	6810      	ldr	r0, [r2, #0]
 800496e:	6852      	ldr	r2, [r2, #4]
 8004970:	605a      	str	r2, [r3, #4]
 8004972:	4401      	add	r1, r0
 8004974:	6019      	str	r1, [r3, #0]
 8004976:	e7d7      	b.n	8004928 <_free_r+0x24>
 8004978:	d902      	bls.n	8004980 <_free_r+0x7c>
 800497a:	230c      	movs	r3, #12
 800497c:	602b      	str	r3, [r5, #0]
 800497e:	e7d3      	b.n	8004928 <_free_r+0x24>
 8004980:	6820      	ldr	r0, [r4, #0]
 8004982:	1821      	adds	r1, r4, r0
 8004984:	428a      	cmp	r2, r1
 8004986:	bf04      	itt	eq
 8004988:	6811      	ldreq	r1, [r2, #0]
 800498a:	6852      	ldreq	r2, [r2, #4]
 800498c:	6062      	str	r2, [r4, #4]
 800498e:	bf04      	itt	eq
 8004990:	1809      	addeq	r1, r1, r0
 8004992:	6021      	streq	r1, [r4, #0]
 8004994:	605c      	str	r4, [r3, #4]
 8004996:	e7c7      	b.n	8004928 <_free_r+0x24>
 8004998:	bd38      	pop	{r3, r4, r5, pc}
 800499a:	bf00      	nop
 800499c:	20000094 	.word	0x20000094

080049a0 <_malloc_r>:
 80049a0:	b570      	push	{r4, r5, r6, lr}
 80049a2:	1ccd      	adds	r5, r1, #3
 80049a4:	f025 0503 	bic.w	r5, r5, #3
 80049a8:	3508      	adds	r5, #8
 80049aa:	2d0c      	cmp	r5, #12
 80049ac:	bf38      	it	cc
 80049ae:	250c      	movcc	r5, #12
 80049b0:	2d00      	cmp	r5, #0
 80049b2:	4606      	mov	r6, r0
 80049b4:	db01      	blt.n	80049ba <_malloc_r+0x1a>
 80049b6:	42a9      	cmp	r1, r5
 80049b8:	d903      	bls.n	80049c2 <_malloc_r+0x22>
 80049ba:	230c      	movs	r3, #12
 80049bc:	6033      	str	r3, [r6, #0]
 80049be:	2000      	movs	r0, #0
 80049c0:	bd70      	pop	{r4, r5, r6, pc}
 80049c2:	f000 f87d 	bl	8004ac0 <__malloc_lock>
 80049c6:	4a21      	ldr	r2, [pc, #132]	; (8004a4c <_malloc_r+0xac>)
 80049c8:	6814      	ldr	r4, [r2, #0]
 80049ca:	4621      	mov	r1, r4
 80049cc:	b991      	cbnz	r1, 80049f4 <_malloc_r+0x54>
 80049ce:	4c20      	ldr	r4, [pc, #128]	; (8004a50 <_malloc_r+0xb0>)
 80049d0:	6823      	ldr	r3, [r4, #0]
 80049d2:	b91b      	cbnz	r3, 80049dc <_malloc_r+0x3c>
 80049d4:	4630      	mov	r0, r6
 80049d6:	f000 f863 	bl	8004aa0 <_sbrk_r>
 80049da:	6020      	str	r0, [r4, #0]
 80049dc:	4629      	mov	r1, r5
 80049de:	4630      	mov	r0, r6
 80049e0:	f000 f85e 	bl	8004aa0 <_sbrk_r>
 80049e4:	1c43      	adds	r3, r0, #1
 80049e6:	d124      	bne.n	8004a32 <_malloc_r+0x92>
 80049e8:	230c      	movs	r3, #12
 80049ea:	6033      	str	r3, [r6, #0]
 80049ec:	4630      	mov	r0, r6
 80049ee:	f000 f868 	bl	8004ac2 <__malloc_unlock>
 80049f2:	e7e4      	b.n	80049be <_malloc_r+0x1e>
 80049f4:	680b      	ldr	r3, [r1, #0]
 80049f6:	1b5b      	subs	r3, r3, r5
 80049f8:	d418      	bmi.n	8004a2c <_malloc_r+0x8c>
 80049fa:	2b0b      	cmp	r3, #11
 80049fc:	d90f      	bls.n	8004a1e <_malloc_r+0x7e>
 80049fe:	600b      	str	r3, [r1, #0]
 8004a00:	50cd      	str	r5, [r1, r3]
 8004a02:	18cc      	adds	r4, r1, r3
 8004a04:	4630      	mov	r0, r6
 8004a06:	f000 f85c 	bl	8004ac2 <__malloc_unlock>
 8004a0a:	f104 000b 	add.w	r0, r4, #11
 8004a0e:	1d23      	adds	r3, r4, #4
 8004a10:	f020 0007 	bic.w	r0, r0, #7
 8004a14:	1ac3      	subs	r3, r0, r3
 8004a16:	d0d3      	beq.n	80049c0 <_malloc_r+0x20>
 8004a18:	425a      	negs	r2, r3
 8004a1a:	50e2      	str	r2, [r4, r3]
 8004a1c:	e7d0      	b.n	80049c0 <_malloc_r+0x20>
 8004a1e:	428c      	cmp	r4, r1
 8004a20:	684b      	ldr	r3, [r1, #4]
 8004a22:	bf16      	itet	ne
 8004a24:	6063      	strne	r3, [r4, #4]
 8004a26:	6013      	streq	r3, [r2, #0]
 8004a28:	460c      	movne	r4, r1
 8004a2a:	e7eb      	b.n	8004a04 <_malloc_r+0x64>
 8004a2c:	460c      	mov	r4, r1
 8004a2e:	6849      	ldr	r1, [r1, #4]
 8004a30:	e7cc      	b.n	80049cc <_malloc_r+0x2c>
 8004a32:	1cc4      	adds	r4, r0, #3
 8004a34:	f024 0403 	bic.w	r4, r4, #3
 8004a38:	42a0      	cmp	r0, r4
 8004a3a:	d005      	beq.n	8004a48 <_malloc_r+0xa8>
 8004a3c:	1a21      	subs	r1, r4, r0
 8004a3e:	4630      	mov	r0, r6
 8004a40:	f000 f82e 	bl	8004aa0 <_sbrk_r>
 8004a44:	3001      	adds	r0, #1
 8004a46:	d0cf      	beq.n	80049e8 <_malloc_r+0x48>
 8004a48:	6025      	str	r5, [r4, #0]
 8004a4a:	e7db      	b.n	8004a04 <_malloc_r+0x64>
 8004a4c:	20000094 	.word	0x20000094
 8004a50:	20000098 	.word	0x20000098

08004a54 <_realloc_r>:
 8004a54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a56:	4607      	mov	r7, r0
 8004a58:	4614      	mov	r4, r2
 8004a5a:	460e      	mov	r6, r1
 8004a5c:	b921      	cbnz	r1, 8004a68 <_realloc_r+0x14>
 8004a5e:	4611      	mov	r1, r2
 8004a60:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8004a64:	f7ff bf9c 	b.w	80049a0 <_malloc_r>
 8004a68:	b922      	cbnz	r2, 8004a74 <_realloc_r+0x20>
 8004a6a:	f7ff ff4b 	bl	8004904 <_free_r>
 8004a6e:	4625      	mov	r5, r4
 8004a70:	4628      	mov	r0, r5
 8004a72:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004a74:	f000 f826 	bl	8004ac4 <_malloc_usable_size_r>
 8004a78:	42a0      	cmp	r0, r4
 8004a7a:	d20f      	bcs.n	8004a9c <_realloc_r+0x48>
 8004a7c:	4621      	mov	r1, r4
 8004a7e:	4638      	mov	r0, r7
 8004a80:	f7ff ff8e 	bl	80049a0 <_malloc_r>
 8004a84:	4605      	mov	r5, r0
 8004a86:	2800      	cmp	r0, #0
 8004a88:	d0f2      	beq.n	8004a70 <_realloc_r+0x1c>
 8004a8a:	4631      	mov	r1, r6
 8004a8c:	4622      	mov	r2, r4
 8004a8e:	f7ff ff15 	bl	80048bc <memcpy>
 8004a92:	4631      	mov	r1, r6
 8004a94:	4638      	mov	r0, r7
 8004a96:	f7ff ff35 	bl	8004904 <_free_r>
 8004a9a:	e7e9      	b.n	8004a70 <_realloc_r+0x1c>
 8004a9c:	4635      	mov	r5, r6
 8004a9e:	e7e7      	b.n	8004a70 <_realloc_r+0x1c>

08004aa0 <_sbrk_r>:
 8004aa0:	b538      	push	{r3, r4, r5, lr}
 8004aa2:	4c06      	ldr	r4, [pc, #24]	; (8004abc <_sbrk_r+0x1c>)
 8004aa4:	2300      	movs	r3, #0
 8004aa6:	4605      	mov	r5, r0
 8004aa8:	4608      	mov	r0, r1
 8004aaa:	6023      	str	r3, [r4, #0]
 8004aac:	f7ff fadc 	bl	8004068 <_sbrk>
 8004ab0:	1c43      	adds	r3, r0, #1
 8004ab2:	d102      	bne.n	8004aba <_sbrk_r+0x1a>
 8004ab4:	6823      	ldr	r3, [r4, #0]
 8004ab6:	b103      	cbz	r3, 8004aba <_sbrk_r+0x1a>
 8004ab8:	602b      	str	r3, [r5, #0]
 8004aba:	bd38      	pop	{r3, r4, r5, pc}
 8004abc:	2000016c 	.word	0x2000016c

08004ac0 <__malloc_lock>:
 8004ac0:	4770      	bx	lr

08004ac2 <__malloc_unlock>:
 8004ac2:	4770      	bx	lr

08004ac4 <_malloc_usable_size_r>:
 8004ac4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004ac8:	1f18      	subs	r0, r3, #4
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	bfbc      	itt	lt
 8004ace:	580b      	ldrlt	r3, [r1, r0]
 8004ad0:	18c0      	addlt	r0, r0, r3
 8004ad2:	4770      	bx	lr

08004ad4 <_init>:
 8004ad4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004ad6:	bf00      	nop
 8004ad8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004ada:	bc08      	pop	{r3}
 8004adc:	469e      	mov	lr, r3
 8004ade:	4770      	bx	lr

08004ae0 <_fini>:
 8004ae0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004ae2:	bf00      	nop
 8004ae4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004ae6:	bc08      	pop	{r3}
 8004ae8:	469e      	mov	lr, r3
 8004aea:	4770      	bx	lr
